<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.project_dir">/Users/test/Documents/YNOV/symfony/backend</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.runtime_environment">%env(default:kernel.environment:APP_RUNTIME_ENV)%</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.build_dir">/Users/test/Documents/YNOV/symfony/backend/var/cache/dev</parameter>
    <parameter key="kernel.cache_dir">/Users/test/Documents/YNOV/symfony/backend/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/Users/test/Documents/YNOV/symfony/backend/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
      <parameter key="DoctrineBundle">Doctrine\Bundle\DoctrineBundle\DoctrineBundle</parameter>
      <parameter key="DoctrineMigrationsBundle">Doctrine\Bundle\MigrationsBundle\DoctrineMigrationsBundle</parameter>
      <parameter key="MakerBundle">Symfony\Bundle\MakerBundle\MakerBundle</parameter>
      <parameter key="JMSSerializerBundle">JMS\SerializerBundle\JMSSerializerBundle</parameter>
      <parameter key="FOSRestBundle">FOS\RestBundle\FOSRestBundle</parameter>
      <parameter key="DoctrineFixturesBundle">Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle</parameter>
      <parameter key="SecurityBundle">Symfony\Bundle\SecurityBundle\SecurityBundle</parameter>
      <parameter key="LexikJWTAuthenticationBundle">Lexik\Bundle\JWTAuthenticationBundle\LexikJWTAuthenticationBundle</parameter>
      <parameter key="SensioFrameworkExtraBundle">Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
      <parameter key="DoctrineBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/doctrine/doctrine-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\DoctrineBundle</parameter>
      </parameter>
      <parameter key="DoctrineMigrationsBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/doctrine/doctrine-migrations-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\MigrationsBundle</parameter>
      </parameter>
      <parameter key="MakerBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/symfony/maker-bundle/src</parameter>
        <parameter key="namespace">Symfony\Bundle\MakerBundle</parameter>
      </parameter>
      <parameter key="JMSSerializerBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/jms/serializer-bundle</parameter>
        <parameter key="namespace">JMS\SerializerBundle</parameter>
      </parameter>
      <parameter key="FOSRestBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/friendsofsymfony/rest-bundle</parameter>
        <parameter key="namespace">FOS\RestBundle</parameter>
      </parameter>
      <parameter key="DoctrineFixturesBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/doctrine/doctrine-fixtures-bundle</parameter>
        <parameter key="namespace">Doctrine\Bundle\FixturesBundle</parameter>
      </parameter>
      <parameter key="SecurityBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/symfony/security-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\SecurityBundle</parameter>
      </parameter>
      <parameter key="LexikJWTAuthenticationBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/lexik/jwt-authentication-bundle</parameter>
        <parameter key="namespace">Lexik\Bundle\JWTAuthenticationBundle</parameter>
      </parameter>
      <parameter key="SensioFrameworkExtraBundle" type="collection">
        <parameter key="path">/Users/test/Documents/YNOV/symfony/backend/vendor/sensio/framework-extra-bundle/src</parameter>
        <parameter key="namespace">Sensio\Bundle\FrameworkExtraBundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">App_KernelDevDebugContainer</parameter>
    <parameter key="STRIPE_SECRET">%env(STRIPE_SECRET)%</parameter>
    <parameter key="event_dispatcher.event_aliases" type="collection">
      <parameter key="Symfony\Component\Console\Event\ConsoleCommandEvent">console.command</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleErrorEvent">console.error</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleSignalEvent">console.signal</parameter>
      <parameter key="Symfony\Component\Console\Event\ConsoleTerminateEvent">console.terminate</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent">kernel.controller_arguments</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ControllerEvent">kernel.controller</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ResponseEvent">kernel.response</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\FinishRequestEvent">kernel.finish_request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\RequestEvent">kernel.request</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ViewEvent">kernel.view</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\ExceptionEvent">kernel.exception</parameter>
      <parameter key="Symfony\Component\HttpKernel\Event\TerminateEvent">kernel.terminate</parameter>
      <parameter key="Symfony\Component\Security\Core\Event\AuthenticationSuccessEvent">security.authentication.success</parameter>
      <parameter key="Symfony\Component\Security\Http\Event\InteractiveLoginEvent">security.interactive_login</parameter>
      <parameter key="Symfony\Component\Security\Http\Event\SwitchUserEvent">security.switch_user</parameter>
    </parameter>
    <parameter key="fragment.renderer.hinclude.global_template">null</parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">false</parameter>
    <parameter key="kernel.trust_x_sendfile_type_header">false</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="kernel.enabled_locales" type="collection"/>
    <parameter key="kernel.error_controller">error_controller</parameter>
    <parameter key="debug.file_link_format">%env(default::SYMFONY_IDE)%</parameter>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/App_KernelDevDebugContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel::loadRoutes</parameter>
    <parameter key="router.cache_dir">/Users/test/Documents/YNOV/symfony/backend/var/cache/dev</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="serializer.mapping.cache.file">/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/serialization.php</parameter>
    <parameter key="cache.prefix.seed">_/Users/test/Documents/YNOV/symfony/backend.App_KernelDevDebugContainer</parameter>
    <parameter key="session.metadata.storage_key">_sf2_meta</parameter>
    <parameter key="session.storage.options" type="collection">
      <parameter key="cache_limiter" type="string">0</parameter>
      <parameter key="cookie_secure">auto</parameter>
      <parameter key="cookie_httponly">true</parameter>
      <parameter key="cookie_samesite">lax</parameter>
      <parameter key="gc_probability">1</parameter>
    </parameter>
    <parameter key="session.save_path">null</parameter>
    <parameter key="session.metadata.update_threshold">0</parameter>
    <parameter key="validator.mapping.cache.file">/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/validation.php</parameter>
    <parameter key="validator.translation_domain">validators</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="doctrine.dbal.configuration.class">Doctrine\DBAL\Configuration</parameter>
    <parameter key="doctrine.data_collector.class">Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector</parameter>
    <parameter key="doctrine.dbal.connection.event_manager.class">Symfony\Bridge\Doctrine\ContainerAwareEventManager</parameter>
    <parameter key="doctrine.dbal.connection_factory.class">Doctrine\Bundle\DoctrineBundle\ConnectionFactory</parameter>
    <parameter key="doctrine.dbal.events.mysql_session_init.class">Doctrine\DBAL\Event\Listeners\MysqlSessionInit</parameter>
    <parameter key="doctrine.dbal.events.oracle_session_init.class">Doctrine\DBAL\Event\Listeners\OracleSessionInit</parameter>
    <parameter key="doctrine.class">Doctrine\Bundle\DoctrineBundle\Registry</parameter>
    <parameter key="doctrine.entity_managers" type="collection">
      <parameter key="default">doctrine.orm.default_entity_manager</parameter>
    </parameter>
    <parameter key="doctrine.default_entity_manager">default</parameter>
    <parameter key="doctrine.dbal.connection_factory.types" type="collection"/>
    <parameter key="doctrine.connections" type="collection">
      <parameter key="default">doctrine.dbal.default_connection</parameter>
    </parameter>
    <parameter key="doctrine.default_connection">default</parameter>
    <parameter key="doctrine.orm.configuration.class">Doctrine\ORM\Configuration</parameter>
    <parameter key="doctrine.orm.entity_manager.class">Doctrine\ORM\EntityManager</parameter>
    <parameter key="doctrine.orm.manager_configurator.class">Doctrine\Bundle\DoctrineBundle\ManagerConfigurator</parameter>
    <parameter key="doctrine.orm.cache.array.class">Doctrine\Common\Cache\ArrayCache</parameter>
    <parameter key="doctrine.orm.cache.apc.class">Doctrine\Common\Cache\ApcCache</parameter>
    <parameter key="doctrine.orm.cache.memcache.class">Doctrine\Common\Cache\MemcacheCache</parameter>
    <parameter key="doctrine.orm.cache.memcache_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.memcache_port">11211</parameter>
    <parameter key="doctrine.orm.cache.memcache_instance.class">Memcache</parameter>
    <parameter key="doctrine.orm.cache.memcached.class">Doctrine\Common\Cache\MemcachedCache</parameter>
    <parameter key="doctrine.orm.cache.memcached_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.memcached_port">11211</parameter>
    <parameter key="doctrine.orm.cache.memcached_instance.class">Memcached</parameter>
    <parameter key="doctrine.orm.cache.redis.class">Doctrine\Common\Cache\RedisCache</parameter>
    <parameter key="doctrine.orm.cache.redis_host">localhost</parameter>
    <parameter key="doctrine.orm.cache.redis_port">6379</parameter>
    <parameter key="doctrine.orm.cache.redis_instance.class">Redis</parameter>
    <parameter key="doctrine.orm.cache.xcache.class">Doctrine\Common\Cache\XcacheCache</parameter>
    <parameter key="doctrine.orm.cache.wincache.class">Doctrine\Common\Cache\WinCacheCache</parameter>
    <parameter key="doctrine.orm.cache.zenddata.class">Doctrine\Common\Cache\ZendDataCache</parameter>
    <parameter key="doctrine.orm.metadata.driver_chain.class">Doctrine\Persistence\Mapping\Driver\MappingDriverChain</parameter>
    <parameter key="doctrine.orm.metadata.annotation.class">Doctrine\ORM\Mapping\Driver\AnnotationDriver</parameter>
    <parameter key="doctrine.orm.metadata.xml.class">Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver</parameter>
    <parameter key="doctrine.orm.metadata.yml.class">Doctrine\ORM\Mapping\Driver\SimplifiedYamlDriver</parameter>
    <parameter key="doctrine.orm.metadata.php.class">Doctrine\ORM\Mapping\Driver\PHPDriver</parameter>
    <parameter key="doctrine.orm.metadata.staticphp.class">Doctrine\ORM\Mapping\Driver\StaticPHPDriver</parameter>
    <parameter key="doctrine.orm.metadata.attribute.class">Doctrine\ORM\Mapping\Driver\AttributeDriver</parameter>
    <parameter key="doctrine.orm.proxy_cache_warmer.class">Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer</parameter>
    <parameter key="form.type_guesser.doctrine.class">Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser</parameter>
    <parameter key="doctrine.orm.validator.unique.class">Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator</parameter>
    <parameter key="doctrine.orm.validator_initializer.class">Symfony\Bridge\Doctrine\Validator\DoctrineInitializer</parameter>
    <parameter key="doctrine.orm.security.user.provider.class">Symfony\Bridge\Doctrine\Security\User\EntityUserProvider</parameter>
    <parameter key="doctrine.orm.listeners.resolve_target_entity.class">Doctrine\ORM\Tools\ResolveTargetEntityListener</parameter>
    <parameter key="doctrine.orm.listeners.attach_entity_listeners.class">Doctrine\ORM\Tools\AttachEntityListenersListener</parameter>
    <parameter key="doctrine.orm.naming_strategy.default.class">Doctrine\ORM\Mapping\DefaultNamingStrategy</parameter>
    <parameter key="doctrine.orm.naming_strategy.underscore.class">Doctrine\ORM\Mapping\UnderscoreNamingStrategy</parameter>
    <parameter key="doctrine.orm.quote_strategy.default.class">Doctrine\ORM\Mapping\DefaultQuoteStrategy</parameter>
    <parameter key="doctrine.orm.quote_strategy.ansi.class">Doctrine\ORM\Mapping\AnsiQuoteStrategy</parameter>
    <parameter key="doctrine.orm.entity_listener_resolver.class">Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver</parameter>
    <parameter key="doctrine.orm.second_level_cache.default_cache_factory.class">Doctrine\ORM\Cache\DefaultCacheFactory</parameter>
    <parameter key="doctrine.orm.second_level_cache.default_region.class">Doctrine\ORM\Cache\Region\DefaultRegion</parameter>
    <parameter key="doctrine.orm.second_level_cache.filelock_region.class">Doctrine\ORM\Cache\Region\FileLockRegion</parameter>
    <parameter key="doctrine.orm.second_level_cache.logger_chain.class">Doctrine\ORM\Cache\Logging\CacheLoggerChain</parameter>
    <parameter key="doctrine.orm.second_level_cache.logger_statistics.class">Doctrine\ORM\Cache\Logging\StatisticsCacheLogger</parameter>
    <parameter key="doctrine.orm.second_level_cache.cache_configuration.class">Doctrine\ORM\Cache\CacheConfiguration</parameter>
    <parameter key="doctrine.orm.second_level_cache.regions_configuration.class">Doctrine\ORM\Cache\RegionsConfiguration</parameter>
    <parameter key="doctrine.orm.auto_generate_proxy_classes">true</parameter>
    <parameter key="doctrine.orm.enable_lazy_ghost_objects">true</parameter>
    <parameter key="doctrine.orm.proxy_dir">/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/doctrine/orm/Proxies</parameter>
    <parameter key="doctrine.orm.proxy_namespace">Proxies</parameter>
    <parameter key="doctrine.migrations.preferred_em">null</parameter>
    <parameter key="doctrine.migrations.preferred_connection">null</parameter>
    <parameter key="jms_serializer.twig_enabled">default</parameter>
    <parameter key="fos_rest.format_listener.rules">null</parameter>
    <parameter key="security.role_hierarchy.roles" type="collection"/>
    <parameter key="security.access.denied_url">null</parameter>
    <parameter key="security.authentication.manager.erase_credentials">true</parameter>
    <parameter key="security.authentication.session_strategy.strategy">migrate</parameter>
    <parameter key="security.authentication.hide_user_not_found">true</parameter>
    <parameter key="security.firewalls" type="collection">
      <parameter>login</parameter>
      <parameter>api</parameter>
      <parameter>dev</parameter>
      <parameter>main</parameter>
    </parameter>
    <parameter key="lexik_jwt_authentication.authenticator_manager_enabled">true</parameter>
    <parameter key="lexik_jwt_authentication.pass_phrase">%env(JWT_PASSPHRASE)%</parameter>
    <parameter key="lexik_jwt_authentication.token_ttl">3600</parameter>
    <parameter key="lexik_jwt_authentication.clock_skew">0</parameter>
    <parameter key="lexik_jwt_authentication.user_identity_field">username</parameter>
    <parameter key="lexik_jwt_authentication.allow_no_expiration">false</parameter>
    <parameter key="lexik_jwt_authentication.user_id_claim">username</parameter>
    <parameter key="lexik_jwt_authentication.encoder.signature_algorithm">RS256</parameter>
    <parameter key="lexik_jwt_authentication.encoder.crypto_engine">openssl</parameter>
    <parameter key="console.command.ids" type="collection"/>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="kernel" class="App\Kernel" public="true" synthetic="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="routing.route_loader"/>
    </service>
    <service id="App\Serializer\CircularReferenceHandler" class="App\Serializer\CircularReferenceHandler" autowire="true" autoconfigure="true"/>
    <service id="App\Entity" class="App\Entity" abstract="true">
      <tag name="container.excluded" source="in &quot;config/services.yaml&quot;"/>
    </service>
    <service id="App\Controller\BookController" class="App\Controller\BookController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\BookController"/>
      </call>
    </service>
    <service id="App\Controller\ConversationController" class="App\Controller\ConversationController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\ConversationController"/>
      </call>
    </service>
    <service id="App\Controller\DashboardController" class="App\Controller\DashboardController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\DashboardController"/>
      </call>
    </service>
    <service id="App\Controller\MessageController" class="App\Controller\MessageController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\MessageController"/>
      </call>
    </service>
    <service id="App\Controller\ProjectController" class="App\Controller\ProjectController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\ProjectController"/>
      </call>
    </service>
    <service id="App\Controller\PublicationController" class="App\Controller\PublicationController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\PublicationController"/>
      </call>
    </service>
    <service id="App\Controller\RegistrationController" class="App\Controller\RegistrationController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\RegistrationController"/>
      </call>
    </service>
    <service id="App\Controller\StripeController" class="App\Controller\StripeController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <call method="setContainer">
        <argument type="service" id=".service_locator.O2p6Lk7.App\Controller\StripeController"/>
      </call>
    </service>
    <service id="App\DataFixtures\AppFixtures" class="App\DataFixtures\AppFixtures" autowire="true" autoconfigure="true">
      <tag name="doctrine.fixture.orm"/>
    </service>
    <service id="App\EventSubscriber\ExceptionSubscriber" class="App\EventSubscriber\ExceptionSubscriber" autowire="true" autoconfigure="true">
      <tag name="kernel.event_subscriber"/>
    </service>
    <service id="App\Repository\BookRepository" class="App\Repository\BookRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\CategoryRepository" class="App\Repository\CategoryRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ConversationRepository" class="App\Repository\ConversationRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\MessageRepository" class="App\Repository\MessageRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\ProjectRepository" class="App\Repository\ProjectRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\PublicationRepository" class="App\Repository\PublicationRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="App\Repository\UserRepository" class="App\Repository\UserRepository" autowire="true" autoconfigure="true">
      <tag name="doctrine.repository_service"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory"/>
    <service id="argument_resolver.backed_enum_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.datetime" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id="clock" on-invalid="null"/>
    </service>
    <service id="argument_resolver.request_payload" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" lazy="true">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver">controller.targeted_value_resolver</tag>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="serializer"/>
      <argument type="service" id="validator" on-invalid="null"/>
      <argument>null</argument>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">
      <tag priority="100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">
      <tag priority="50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">
      <tag priority="-50" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id=".service_locator.2MdOtvo"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">
      <tag priority="-100" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">
      <tag priority="-150" name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver">controller.argument_value_resolver</tag>
    </service>
    <service id="argument_resolver.query_parameter_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">
      <tag name="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver">controller.targeted_value_resolver</tag>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
      <argument>false</argument>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
      <argument>false</argument>
      <argument type="collection"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="disallow_search_engine_index_response_listener" class="Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="error_controller" class="Symfony\Component\HttpKernel\Controller\ErrorController" public="true">
      <argument type="service" id="http_kernel"/>
      <argument>error_controller</argument>
      <argument type="service" id="error_handler.error_renderer.serializer"/>
    </service>
    <service id="exception_listener" class="Symfony\Component\HttpKernel\EventListener\ErrorListener">
      <tag name="monolog.logger" channel="request"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument>error_controller</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="controller.cache_attribute_listener" class="Symfony\Component\HttpKernel\EventListener\CacheAttributeListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="parameter_bag" class="Symfony\Component\DependencyInjection\ParameterBag\ContainerBag">
      <argument type="service" id="service_container"/>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\HttpKernelRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\Runner\Symfony\ResponseRunner"/>
      <tag name="container.preload" class="Symfony\Component\Runtime\SymfonyRuntime"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="debug.controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="debug.argument_resolver"/>
      <argument>true</argument>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="http_cache" class="Symfony\Bundle\FrameworkBundle\HttpCache\HttpCache">
      <tag name="container.hot_path"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="http_cache.store"/>
      <argument>null</argument>
      <argument type="collection">
        <argument key="debug">true</argument>
      </argument>
    </service>
    <service id="http_cache.store" class="Symfony\Component\HttpKernel\HttpCache\Store">
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/http_cache</argument>
    </service>
    <service id="url_helper" class="Symfony\Component\HttpFoundation\UrlHelper">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <tag name="container.no_preload"/>
      <argument type="tagged_iterator" tag="kernel.cache_warmer"/>
      <argument>true</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/App_KernelDevDebugContainerDeprecations.log</argument>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer">
      <argument type="tagged_iterator" tag="kernel.cache_clearer"/>
    </service>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator">
      <argument type="service" id="kernel"/>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory">
      <argument type="tagged_iterator" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="services_resetter" class="Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter" public="true">
      <argument type="iterator">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="debug.stopwatch" type="service" id="debug.stopwatch" on-invalid="ignore_uninitialized"/>
        <argument key="debug.event_dispatcher" type="service" id="debug.event_dispatcher" on-invalid="ignore_uninitialized"/>
        <argument key="session_listener" type="service" id="session_listener" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator_expression_language" type="service" id="cache.validator_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine" type="service" id="doctrine" on-invalid="ignore_uninitialized"/>
        <argument key="doctrine.debug_data_holder" type="service" id="doctrine.debug_data_holder" on-invalid="ignore_uninitialized"/>
        <argument key="fos_rest.view_handler.default" type="service" id="fos_rest.view_handler.default" on-invalid="ignore_uninitialized"/>
        <argument key="security.token_storage" type="service" id="security.token_storage" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_is_granted_attribute_expression_language" type="service" id="cache.security_is_granted_attribute_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.firewall" type="service" id="debug.security.firewall" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.firewall.authenticator.login" type="service" id="debug.security.firewall.authenticator.login" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.firewall.authenticator.api" type="service" id="debug.security.firewall.authenticator.api" on-invalid="ignore_uninitialized"/>
        <argument key="debug.security.firewall.authenticator.main" type="service" id="debug.security.firewall.authenticator.main" on-invalid="ignore_uninitialized"/>
      </argument>
      <argument type="collection">
        <argument key="cache.app" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.system" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.serializer" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.annotations" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.property_info" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.stopwatch" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.event_dispatcher" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="session_listener" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.validator_expression_language" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="doctrine" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="doctrine.debug_data_holder" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="fos_rest.view_handler.default" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="security.token_storage" type="collection">
          <argument>disableUsageTracking</argument>
          <argument>setToken</argument>
        </argument>
        <argument key="cache.security_expression_language" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="cache.security_is_granted_attribute_expression_language" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.security.firewall" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.security.firewall.authenticator.login" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.security.firewall.authenticator.api" type="collection">
          <argument>reset</argument>
        </argument>
        <argument key="debug.security.firewall.authenticator.main" type="collection">
          <argument>reset</argument>
        </argument>
      </argument>
    </service>
    <service id="reverse_container" class="Symfony\Component\DependencyInjection\ReverseContainer">
      <argument type="service" id="service_container"/>
      <argument type="service" id=".service_locator.XXv1IfR"/>
    </service>
    <service id="locale_aware_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleAwareListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="iterator">
        <argument type="service" id="slugger"/>
      </argument>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="container.env_var_processor" class="Symfony\Component\DependencyInjection\EnvVarProcessor">
      <tag name="container.env_var_processor"/>
      <argument type="service" id="service_container"/>
      <argument type="tagged_iterator" tag="container.env_var_loader"/>
    </service>
    <service id="slugger" class="Symfony\Component\String\Slugger\AsciiSlugger">
      <tag name="kernel.locale_aware"/>
      <argument>en</argument>
    </service>
    <service id="container.getenv" class="Closure">
      <tag name="routing.expression_language_function" function="env"/>
      <argument type="collection">
        <argument type="service" id="service_container"/>
        <argument>getEnv</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.get_routing_condition_service" class="Closure" public="true">
      <tag name="routing.expression_language_function" function="service"/>
      <argument type="collection">
        <argument type="service" id=".service_locator.Xbsa8iG"/>
        <argument>get</argument>
      </argument>
      <factory class="Closure" method="fromCallable"/>
    </service>
    <service id="container.env" class="Symfony\Component\String\LazyString" constructor="fromCallable" abstract="true">
      <argument type="service" id="container.getenv"/>
    </service>
    <service id="config_builder.warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ConfigBuilderCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="kernel"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="clock" class="Symfony\Component\Clock\Clock"/>
    <service id="Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Request" class="Symfony\Component\HttpFoundation\Request" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Response" class="Symfony\Component\HttpFoundation\Response" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="Symfony\Component\HttpFoundation\Session\SessionInterface" class="Symfony\Component\HttpFoundation\Session\SessionInterface" abstract="true">
      <tag name="container.excluded"/>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler">
      <argument type="service" id=".service_locator.lLv4pWF"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.uri_generator" class="Symfony\Component\HttpKernel\Fragment\FragmentUriGenerator">
      <argument>/_fragment</argument>
      <argument type="service" id="uri_signer"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="error_handler.error_renderer.html" class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer">
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
        </service>
      </argument>
      <argument>UTF-8</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <argument>/Users/test/Documents/YNOV/symfony/backend</argument>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="getAndCleanOutputBuffer"/>
        </service>
      </argument>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener">
      <tag name="monolog.logger" channel="console"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.suggest_missing_package_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>about</argument>
      </call>
      <call method="setDescription">
        <argument>Display information about the current project</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="filesystem"/>
      <argument>/Users/test/Documents/YNOV/symfony/backend</argument>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
      <call method="setDescription">
        <argument>Install bundle's web assets under a public directory</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear the cache</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.validator_expression_language</argument>
        <argument>cache.doctrine.orm.default.result</argument>
        <argument>cache.doctrine.orm.default.query</argument>
        <argument>cache.security_expression_language</argument>
        <argument>cache.security_is_granted_attribute_expression_language</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
      <call method="setDescription">
        <argument>Clear cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
      <call method="setDescription">
        <argument>Prune cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_invalidate_tags" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolInvalidateTagsCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.NBUFN6A"/>
      <call method="setName">
        <argument>cache:pool:invalidate-tags</argument>
      </call>
      <call method="setDescription">
        <argument>Invalidate cache tags for all or a specific pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_delete" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache.global_clearer"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.validator_expression_language</argument>
        <argument>cache.doctrine.orm.default.result</argument>
        <argument>cache.doctrine.orm.default.query</argument>
        <argument>cache.security_expression_language</argument>
        <argument>cache.security_is_granted_attribute_expression_language</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:delete</argument>
      </call>
      <call method="setDescription">
        <argument>Delete an item from a cache pool</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_list" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="collection">
        <argument>cache.app</argument>
        <argument>cache.system</argument>
        <argument>cache.validator</argument>
        <argument>cache.serializer</argument>
        <argument>cache.annotations</argument>
        <argument>cache.property_info</argument>
        <argument>cache.validator_expression_language</argument>
        <argument>cache.doctrine.orm.default.result</argument>
        <argument>cache.doctrine.orm.default.query</argument>
        <argument>cache.security_expression_language</argument>
        <argument>cache.security_is_granted_attribute_expression_language</argument>
      </argument>
      <call method="setName">
        <argument>cache:pool:list</argument>
      </call>
      <call method="setDescription">
        <argument>List available cache pools</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
      <call method="setDescription">
        <argument>Warm up an empty cache</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the current configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
      <call method="setDescription">
        <argument>Dump the default configuration for an extension</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
      <call method="setDescription">
        <argument>Display current services for an application</argument>
      </call>
    </service>
    <service id="console.command.container_lint" class="Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:container</argument>
      </call>
      <call method="setDescription">
        <argument>Ensure that arguments injected into services match type declarations</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>null</argument>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
      <call method="setDescription">
        <argument>List classes/interfaces you can use for autowiring</argument>
      </call>
    </service>
    <service id="console.command.dotenv_debug" class="Symfony\Component\Dotenv\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument>dev</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend</argument>
      <call method="setName">
        <argument>debug:dotenv</argument>
      </call>
      <call method="setDescription">
        <argument>Lists all dotenv files with variables and values</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.Oannbdp"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
      <call method="setDescription">
        <argument>Display configured listeners for an application</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="debug.file_link_formatter" on-invalid="null"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
      <call method="setDescription">
        <argument>Display current routes for an application</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="router.default"/>
      <argument type="tagged_iterator" tag="routing.expression_language_provider"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
      <call method="setDescription">
        <argument>Help debug routes by simulating a path info match</argument>
      </call>
    </service>
    <service id="console.command.serializer_debug" class="Symfony\Component\Serializer\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
      <call method="setName">
        <argument>debug:serializer</argument>
      </call>
      <call method="setDescription">
        <argument>Display serialization information for classes</argument>
      </call>
    </service>
    <service id="console.command.validator_debug" class="Symfony\Component\Validator\Command\DebugCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="validator"/>
      <call method="setName">
        <argument>debug:validator</argument>
      </call>
      <call method="setDescription">
        <argument>Display validation constraints for classes</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
      <call method="setDescription">
        <argument>Lint a YAML file and outputs encountered errors</argument>
      </call>
    </service>
    <service id="console.command.secrets_set" class="Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:set</argument>
      </call>
      <call method="setDescription">
        <argument>Set a secret in the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_remove" class="Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="null"/>
      <call method="setName">
        <argument>secrets:remove</argument>
      </call>
      <call method="setDescription">
        <argument>Remove a secret from the vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_generate_key" class="Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:generate-keys</argument>
      </call>
      <call method="setDescription">
        <argument>Generate new encryption keys</argument>
      </call>
    </service>
    <service id="console.command.secrets_list" class="Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:list</argument>
      </call>
      <call method="setDescription">
        <argument>List all secrets</argument>
      </call>
    </service>
    <service id="console.command.secrets_decrypt_to_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:decrypt-to-local</argument>
      </call>
      <call method="setDescription">
        <argument>Decrypt all secrets and stores them in the local vault</argument>
      </call>
    </service>
    <service id="console.command.secrets_encrypt_from_local" class="Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="secrets.vault"/>
      <argument type="service" id="secrets.local_vault" on-invalid="ignore"/>
      <call method="setName">
        <argument>secrets:encrypt-from-local</argument>
      </call>
      <call method="setDescription">
        <argument>Encrypt all local secrets to the vault</argument>
      </call>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>CAJRMcuqiq</argument>
      <argument>0</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.app.taggable" class="Symfony\Component\Cache\Adapter\TagAwareAdapter">
      <tag name="cache.taggable" pool="cache.app"/>
      <argument type="service" id="cache.app"/>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>Guz2rQ-i73</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>Lw7RMfnmnb</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>4u07pSNQhD</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>Gl2YKw6eIw</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.property_info" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>BW9S-T8h3r</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/app</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer" reset="reset"/>
      <argument type="abstract">PSR-6 provider service</argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.redis_tag_aware" class="Symfony\Component\Cache\Adapter\RedisTagAwareAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Redis connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">Memcached connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine_dbal" class="Symfony\Component\Cache\Adapter\DoctrineDbalAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_dbal_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">DBAL connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.pdo" class="Symfony\Component\Cache\Adapter\PdoAdapter" abstract="true">
      <tag name="cache.pool" provider="cache.default_pdo_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument type="abstract">PDO connection service</argument>
      <argument></argument>
      <argument>0</argument>
      <argument type="collection"/>
      <argument type="service" id="cache.default_marshaller" on-invalid="ignore"/>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.array" class="Symfony\Component\Cache\Adapter\ArrayAdapter" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_marshaller" class="Symfony\Component\Cache\Marshaller\DefaultMarshaller">
      <argument>null</argument>
      <argument>true</argument>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator_expression_language" type="service" id="cache.validator_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_is_granted_attribute_expression_language" type="service" id="cache.security_is_granted_attribute_expression_language" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
        <argument key="cache.property_info" type="service" id="cache.property_info" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator_expression_language" type="service" id="cache.validator_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.doctrine.orm.default.result" type="service" id="cache.doctrine.orm.default.result" on-invalid="ignore_uninitialized"/>
        <argument key="cache.doctrine.orm.default.query" type="service" id="cache.doctrine.orm.default.query" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_expression_language" type="service" id="cache.security_expression_language" on-invalid="ignore_uninitialized"/>
        <argument key="cache.security_is_granted_attribute_expression_language" type="service" id="cache.security_is_granted_attribute_expression_language" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="debug.error_handler_configurator" class="Symfony\Component\HttpKernel\Debug\ErrorHandlerConfigurator" public="true">
      <tag name="monolog.logger" channel="php"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>null</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter">
      <argument>%env(default::SYMFONY_IDE)%</argument>
    </service>
    <service id="debug.stopwatch" class="Symfony\Component\Stopwatch\Stopwatch">
      <tag name="kernel.reset" method="reset"/>
      <argument>true</argument>
    </service>
    <service id="debug.event_dispatcher" class="Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher">
      <tag name="container.hot_path"/>
      <tag name="event_dispatcher">event_dispatcher.dispatcher</tag>
      <tag name="monolog.logger" channel="event"/>
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="event_dispatcher" inner="debug.event_dispatcher.inner"/>
      <argument type="service" id="debug.event_dispatcher.inner"/>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="fos_rest.format_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>34</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.context_listener.0"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="App\EventSubscriber\ExceptionSubscriber"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="argument_resolver.request_payload"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>setDefaultLocale</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="disallow_search_engine_index_response_listener"/>
          <argument>onResponse</argument>
        </argument>
        <argument>-255</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>logKernelException</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="exception_listener"/>
          <argument>removeCspHeader</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.cache_attribute_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-10</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_aware_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>15</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="locale_aware_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>-15</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="console.suggest_missing_package_subscriber"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.exception</argument>
        <argument type="collection">
          <argument type="service_closure" id="router_listener"/>
          <argument>onKernelException</argument>
        </argument>
        <argument>-64</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="session_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1000</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service_closure" id="maker.console_error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service_closure" id="maker.console_error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="controller.is_granted_attribute_listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>20</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.check_authenticator_credentials"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LoginSuccessEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.password_migrating"/>
          <argument>onLoginSuccess</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>debug.security.authorization.vote</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.security.voter.vote_listener"/>
          <argument>onVoterVote</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.security.firewall"/>
          <argument>configureLogoutUrlGenerator</argument>
        </argument>
        <argument>8</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.security.firewall"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>8</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service_closure" id="debug.security.firewall"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service_closure" id="sensio_framework_extra.controller.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service_closure" id="sensio_framework_extra.converter.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller</argument>
        <argument type="collection">
          <argument type="service_closure" id="sensio_framework_extra.cache.listener"/>
          <argument>onKernelController</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service_closure" id="sensio_framework_extra.cache.listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="sensio_framework_extra.security.listener"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.controller_arguments</argument>
        <argument type="collection">
          <argument type="service_closure" id="framework_extra_bundle.event.is_granted"/>
          <argument>onKernelControllerArguments</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.csrf_protection"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>512</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LogoutEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.logout.listener.csrf_token_clearing"/>
          <argument>onLogout</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="debug.controller_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableControllerResolver">
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.decorator" id="controller_resolver" inner="debug.controller_resolver.inner"/>
      <argument type="service" id="debug.controller_resolver.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="debug.argument_resolver" class="Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver">
      <tag name="container.decorator" id="argument_resolver" inner="debug.argument_resolver.inner"/>
      <argument type="service" id="debug.argument_resolver.inner"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id="argument_resolver.not_tagged_controller" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\NotTaggedControllerValueResolver">
      <tag name="controller.argument_value_resolver" priority="-200"/>
      <argument type="service" id=".service_locator.2MdOtvo"/>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.container"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.file"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.psr4"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Routing\Loader\GlobFileLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.container" class="Symfony\Component\Routing\Loader\ContainerLoader">
      <tag name="routing.loader"/>
      <argument type="service" id=".service_locator..6hZeC_"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.annotation" class="Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="annotations.cached_reader" on-invalid="null"/>
      <argument>dev</argument>
    </service>
    <service id="routing.loader.annotation.directory" class="Symfony\Component\Routing\Loader\AnnotationDirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="routing.loader.annotation.file" class="Symfony\Component\Routing\Loader\AnnotationFileLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="routing.loader.psr4" class="Symfony\Component\Routing\Loader\Psr4DirectoryLoader">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="routing.resolver"/>
      <argument type="collection">
        <argument key="utf8">true</argument>
      </argument>
      <argument type="collection"/>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router">
      <tag name="monolog.logger" channel="router"/>
      <tag name="container.service_subscriber" id="routing.loader"/>
      <argument type="service" id=".service_locator.PvoQzFT.router.default"/>
      <argument>kernel::loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/Users/test/Documents/YNOV/symfony/backend/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\CompiledUrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\CompiledUrlGeneratorDumper</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableCompiledUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\CompiledUrlMatcherDumper</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="parameter_bag" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>en</argument>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" constructor="fromUri">
      <argument></argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id=".service_locator.cUcW89y.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener">
      <tag name="monolog.logger" channel="request"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>/Users/test/Documents/YNOV/symfony/backend</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpPort"/>
        </service>
      </argument>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpsPort"/>
        </service>
      </argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument>null</argument>
    </service>
    <service id="annotations.reader" class="Doctrine\Common\Annotations\AnnotationReader">
      <call method="addGlobalIgnoredName">
        <argument>required</argument>
      </call>
    </service>
    <service id="annotations.cached_reader" class="Doctrine\Common\Annotations\PsrCachedReader">
      <tag name="annotations.cached_reader"/>
      <tag name="container.do_not_inline"/>
      <argument type="service" id="annotations.reader"/>
      <argument type="service">
        <service class="Symfony\Component\Cache\Adapter\ArrayAdapter"/>
      </argument>
      <argument>true</argument>
      <argument type="service_closure" id="annotations.cache_adapter"/>
    </service>
    <service id="annotations.filesystem_cache_adapter" class="Symfony\Component\Cache\Adapter\FilesystemAdapter">
      <argument></argument>
      <argument>0</argument>
      <argument type="abstract">Cache-Directory</argument>
    </service>
    <service id="annotations.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="annotations.reader"/>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/annotations.php</argument>
      <argument>#^Symfony\\(?:Component\\HttpKernel\\|Bundle\\FrameworkBundle\\Controller\\(?!.*Controller$))#</argument>
      <argument>true</argument>
    </service>
    <service id="annotations.cache_adapter" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" constructor="create">
      <tag name="container.hot_path"/>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/annotations.php</argument>
      <argument type="service" id="cache.annotations"/>
    </service>
    <service id="property_accessor" class="Symfony\Component\PropertyAccess\PropertyAccessor">
      <argument>3</argument>
      <argument>2</argument>
      <argument type="service" id="cache.property_access" on-invalid="ignore"/>
      <argument type="service" id="property_info.reflection_extractor" on-invalid="null"/>
      <argument type="service" id="property_info.reflection_extractor" on-invalid="null"/>
    </service>
    <service id="secrets.vault" class="Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault">
      <tag name="container.env_var_loader"/>
      <argument>/Users/test/Documents/YNOV/symfony/backend/config/secrets/%env(default:kernel.environment:APP_RUNTIME_ENV)%</argument>
      <argument type="service" id="secrets.decryption_key" on-invalid="ignore"/>
    </service>
    <service id="secrets.decryption_key" class="Symfony\Component\String\LazyString" constructor="fromCallable">
      <argument type="service" id="container.getenv"/>
      <argument>base64:default::SYMFONY_DECRYPTION_SECRET</argument>
    </service>
    <service id="secrets.local_vault" class="Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault">
      <argument>/Users/test/Documents/YNOV/symfony/backend/.env.dev.local</argument>
    </service>
    <service id="serializer" class="Symfony\Component\Serializer\Serializer">
      <argument type="collection">
        <argument type="service" id="serializer.denormalizer.unwrapping"/>
        <argument type="service" id="fos_rest.serializer.form_error_normalizer"/>
        <argument type="service" id="serializer.normalizer.problem"/>
        <argument type="service" id="serializer.normalizer.uid"/>
        <argument type="service" id="serializer.normalizer.datetime"/>
        <argument type="service" id="serializer.normalizer.constraint_violation_list"/>
        <argument type="service" id="serializer.normalizer.datetimezone"/>
        <argument type="service" id="serializer.normalizer.dateinterval"/>
        <argument type="service" id="serializer.normalizer.form_error"/>
        <argument type="service" id="serializer.normalizer.backed_enum"/>
        <argument type="service" id="serializer.normalizer.data_uri"/>
        <argument type="service" id="serializer.normalizer.json_serializable"/>
        <argument type="service" id="serializer.denormalizer.array"/>
        <argument type="service" id="serializer.normalizer.object"/>
      </argument>
      <argument type="collection">
        <argument type="service" id="serializer.encoder.xml"/>
        <argument type="service" id="serializer.encoder.json"/>
        <argument type="service" id="serializer.encoder.yaml"/>
        <argument type="service" id="serializer.encoder.csv"/>
      </argument>
    </service>
    <service id="serializer.mapping.class_discriminator_resolver" class="Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata">
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="serializer.normalizer.constraint_violation_list" class="Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer" autowire="true">
      <tag name="serializer.normalizer" priority="-915"/>
      <argument type="collection"/>
      <argument type="service" id="serializer.name_converter.metadata_aware"/>
    </service>
    <service id="serializer.normalizer.datetimezone" class="Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.dateinterval" class="Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.data_uri" class="Symfony\Component\Serializer\Normalizer\DataUriNormalizer">
      <tag name="serializer.normalizer" priority="-920"/>
      <argument>null</argument>
    </service>
    <service id="serializer.normalizer.datetime" class="Symfony\Component\Serializer\Normalizer\DateTimeNormalizer">
      <tag name="serializer.normalizer" priority="-910"/>
    </service>
    <service id="serializer.normalizer.json_serializable" class="Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer">
      <tag name="serializer.normalizer" priority="-950"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="serializer.normalizer.problem" class="Symfony\Component\Serializer\Normalizer\ProblemNormalizer">
      <tag name="serializer.normalizer" priority="-890"/>
      <argument key="0">true</argument>
      <argument key="translator">null</argument>
    </service>
    <service id="serializer.denormalizer.unwrapping" class="Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer">
      <tag name="serializer.normalizer" priority="1000"/>
      <argument type="service" id="property_accessor"/>
    </service>
    <service id="serializer.normalizer.uid" class="Symfony\Component\Serializer\Normalizer\UidNormalizer">
      <tag name="serializer.normalizer" priority="-890"/>
    </service>
    <service id="serializer.normalizer.form_error" class="Symfony\Component\Serializer\Normalizer\FormErrorNormalizer">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="serializer.normalizer.object" class="Symfony\Component\Serializer\Normalizer\ObjectNormalizer">
      <tag name="serializer.normalizer" priority="-1000"/>
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
      <argument type="service" id="serializer.name_converter.metadata_aware"/>
      <argument type="service" id="property_accessor"/>
      <argument type="service" id="property_info" on-invalid="ignore"/>
      <argument type="service" id="serializer.mapping.class_discriminator_resolver" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="serializer.normalizer.property" class="Symfony\Component\Serializer\Normalizer\PropertyNormalizer">
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
      <argument type="service" id="serializer.name_converter.metadata_aware"/>
      <argument type="service" id="property_info" on-invalid="ignore"/>
      <argument type="service" id="serializer.mapping.class_discriminator_resolver" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="serializer.denormalizer.array" class="Symfony\Component\Serializer\Normalizer\ArrayDenormalizer">
      <tag name="serializer.normalizer" priority="-990"/>
    </service>
    <service id="serializer.mapping.chain_loader" class="Symfony\Component\Serializer\Mapping\Loader\LoaderChain">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader">
            <argument type="service" id="annotations.cached_reader" on-invalid="null"/>
          </service>
        </argument>
      </argument>
    </service>
    <service id="serializer.mapping.class_metadata_factory" class="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory">
      <argument type="service" id="serializer.mapping.chain_loader"/>
    </service>
    <service id="serializer.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\SerializerCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader">
            <argument type="service" id="annotations.cached_reader" on-invalid="null"/>
          </service>
        </argument>
      </argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/serialization.php</argument>
    </service>
    <service id="serializer.mapping.cache.symfony" class="Psr\Cache\CacheItemPoolInterface">
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/serialization.php</argument>
      <argument type="service" id="cache.serializer"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="serializer.encoder.xml" class="Symfony\Component\Serializer\Encoder\XmlEncoder">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.encoder.json" class="Symfony\Component\Serializer\Encoder\JsonEncoder">
      <tag name="serializer.encoder"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="serializer.encoder.yaml" class="Symfony\Component\Serializer\Encoder\YamlEncoder">
      <tag name="serializer.encoder"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="serializer.encoder.csv" class="Symfony\Component\Serializer\Encoder\CsvEncoder">
      <tag name="serializer.encoder"/>
    </service>
    <service id="serializer.name_converter.camel_case_to_snake_case" class="Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter"/>
    <service id="serializer.name_converter.metadata_aware" class="Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter">
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="property_info.serializer_extractor" class="Symfony\Component\PropertyInfo\Extractor\SerializerExtractor">
      <tag name="property_info.list_extractor" priority="-999"/>
      <argument type="service" id="serializer.mapping.class_metadata_factory"/>
    </service>
    <service id="error_handler.error_renderer.serializer" class="Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer">
      <argument type="service" id="serializer"/>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer" method="getPreferredFormat"/>
        </service>
      </argument>
      <argument type="service" id="error_handler.error_renderer.html"/>
      <argument type="service">
        <service>
          <argument type="service" id="request_stack"/>
          <argument>true</argument>
          <factory class="Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer" method="isDebug"/>
        </service>
      </argument>
    </service>
    <service id="serializer.normalizer.backed_enum" class="Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer">
      <tag name="serializer.normalizer" priority="-915"/>
    </service>
    <service id="property_info" class="Symfony\Component\PropertyInfo\PropertyInfoExtractor">
      <argument type="iterator">
        <argument type="service" id="property_info.serializer_extractor"/>
        <argument type="service" id="property_info.reflection_extractor"/>
        <argument type="service" id="doctrine.orm.default_entity_manager.property_info_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="doctrine.orm.default_entity_manager.property_info_extractor"/>
        <argument type="service" id="property_info.phpstan_extractor"/>
        <argument type="service" id="property_info.php_doc_extractor"/>
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.php_doc_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="doctrine.orm.default_entity_manager.property_info_extractor"/>
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
      <argument type="iterator">
        <argument type="service" id="property_info.reflection_extractor"/>
      </argument>
    </service>
    <service id="property_info.reflection_extractor" class="Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor">
      <tag name="property_info.list_extractor" priority="-1000"/>
      <tag name="property_info.type_extractor" priority="-1002"/>
      <tag name="property_info.access_extractor" priority="-1000"/>
      <tag name="property_info.initializable_extractor" priority="-1000"/>
    </service>
    <service id="property_info.phpstan_extractor" class="Symfony\Component\PropertyInfo\Extractor\PhpStanExtractor">
      <tag name="property_info.type_extractor" priority="-1000"/>
    </service>
    <service id="property_info.php_doc_extractor" class="Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor">
      <tag name="property_info.description_extractor" priority="-1000"/>
      <tag name="property_info.type_extractor" priority="-1001"/>
    </service>
    <service id=".cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id=".cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter" constructor="createConnection">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
    </service>
    <service id="cache.property_access" class="Symfony\Component\Cache\Adapter\ArrayAdapter">
      <argument>0</argument>
      <argument>false</argument>
    </service>
    <service id="session.factory" class="Symfony\Component\HttpFoundation\Session\SessionFactory">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="session.storage.factory.native"/>
      <argument type="collection">
        <argument type="service" id="session_listener"/>
        <argument>onSessionUsage</argument>
      </argument>
    </service>
    <service id="session.storage.factory.native" class="Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorageFactory">
      <argument>%session.storage.options%</argument>
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.php_bridge" class="Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorageFactory">
      <argument type="service" id="session.handler.native"/>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
      <argument>true</argument>
    </service>
    <service id="session.storage.factory.mock_file" class="Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorageFactory">
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/sessions</argument>
      <argument>MOCKSESSID</argument>
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\MetadataBag">
          <argument>_sf2_meta</argument>
          <argument>0</argument>
        </service>
      </argument>
    </service>
    <service id="session.handler.native" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="SessionHandler"/>
      </argument>
    </service>
    <service id="session.handler.native_file" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler">
      <argument type="service">
        <service class="Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler">
          <argument>null</argument>
        </service>
      </argument>
    </service>
    <service id="session.abstract_handler" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\AbstractSessionHandler">
      <argument type="abstract">A string or a connection object</argument>
      <argument type="collection"/>
      <factory class="Symfony\Component\HttpFoundation\Session\Storage\Handler\SessionHandlerFactory" method="createHandler"/>
    </service>
    <service id="session_listener" class="Symfony\Component\HttpKernel\EventListener\SessionListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id=".service_locator.cXsfP3P"/>
      <argument>true</argument>
      <argument>%session.storage.options%</argument>
    </service>
    <service id="session.marshaller" class="Symfony\Component\HttpFoundation\Session\Storage\Handler\IdentityMarshaller"/>
    <service id="security.csrf.token_generator" class="Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator"/>
    <service id="security.csrf.token_storage" class="Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="security.csrf.token_manager" class="Symfony\Component\Security\Csrf\CsrfTokenManager">
      <argument type="service" id="security.csrf.token_generator"/>
      <argument type="service" id="security.csrf.token_storage"/>
      <argument type="service" id="request_stack" on-invalid="ignore"/>
    </service>
    <service id="twig.runtime.security_csrf" class="Symfony\Bridge\Twig\Extension\CsrfRuntime">
      <tag name="twig.runtime"/>
      <argument type="service" id="security.csrf.token_manager"/>
    </service>
    <service id="validator" class="Symfony\Component\Validator\Validator\ValidatorInterface">
      <factory service="validator.builder" method="getValidator"/>
    </service>
    <service id="validator.builder" class="Symfony\Component\Validator\ValidatorBuilder">
      <call method="setConstraintValidatorFactory">
        <argument type="service" id="validator.validator_factory"/>
      </call>
      <call method="setTranslationDomain">
        <argument>validators</argument>
      </call>
      <call method="enableAnnotationMapping">
        <argument>true</argument>
      </call>
      <call method="setDoctrineAnnotationReader">
        <argument type="service" id="annotations.cached_reader"/>
      </call>
      <call method="addMethodMapping">
        <argument>loadValidatorMetadata</argument>
      </call>
      <call method="addObjectInitializers">
        <argument type="collection">
          <argument type="service" id="doctrine.orm.validator_initializer"/>
        </argument>
      </call>
      <call method="addLoader">
        <argument type="service" id="validator.property_info_loader"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="doctrine.orm.default_entity_manager.validator_loader"/>
      </call>
      <factory class="Symfony\Component\Validator\Validation" method="createValidatorBuilder"/>
    </service>
    <service id="validator.mapping.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="validator.builder"/>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/validation.php</argument>
    </service>
    <service id="validator.mapping.cache.adapter" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" constructor="create">
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/validation.php</argument>
      <argument type="service" id="cache.validator"/>
    </service>
    <service id="validator.validator_factory" class="Symfony\Component\Validator\ContainerConstraintValidatorFactory">
      <argument type="service" id=".service_locator.F9PKc.7"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ExpressionLanguageSyntaxValidator" class="Symfony\Component\Validator\Constraints\ExpressionLanguageSyntaxValidator" abstract="true">
      <tag name="container.excluded" source="in &quot;config/validator.php&quot;"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\AllValidator" class="Symfony\Component\Validator\Constraints\AllValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\AtLeastOneOfValidator" class="Symfony\Component\Validator\Constraints\AtLeastOneOfValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\BicValidator" class="Symfony\Component\Validator\Constraints\BicValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\BlankValidator" class="Symfony\Component\Validator\Constraints\BlankValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CallbackValidator" class="Symfony\Component\Validator\Constraints\CallbackValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CardSchemeValidator" class="Symfony\Component\Validator\Constraints\CardSchemeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ChoiceValidator" class="Symfony\Component\Validator\Constraints\ChoiceValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CidrValidator" class="Symfony\Component\Validator\Constraints\CidrValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CollectionValidator" class="Symfony\Component\Validator\Constraints\CollectionValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CompoundValidator" class="Symfony\Component\Validator\Constraints\CompoundValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CountValidator" class="Symfony\Component\Validator\Constraints\CountValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CountryValidator" class="Symfony\Component\Validator\Constraints\CountryValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CssColorValidator" class="Symfony\Component\Validator\Constraints\CssColorValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\CurrencyValidator" class="Symfony\Component\Validator\Constraints\CurrencyValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\DateTimeValidator" class="Symfony\Component\Validator\Constraints\DateTimeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\DateValidator" class="Symfony\Component\Validator\Constraints\DateValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\DivisibleByValidator" class="Symfony\Component\Validator\Constraints\DivisibleByValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\EmailValidator" class="Symfony\Component\Validator\Constraints\EmailValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\EqualToValidator" class="Symfony\Component\Validator\Constraints\EqualToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ExpressionSyntaxValidator" class="Symfony\Component\Validator\Constraints\ExpressionSyntaxValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ExpressionValidator" class="Symfony\Component\Validator\Constraints\ExpressionValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\FileValidator" class="Symfony\Component\Validator\Constraints\FileValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\GreaterThanOrEqualValidator" class="Symfony\Component\Validator\Constraints\GreaterThanOrEqualValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\GreaterThanValidator" class="Symfony\Component\Validator\Constraints\GreaterThanValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\HostnameValidator" class="Symfony\Component\Validator\Constraints\HostnameValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IbanValidator" class="Symfony\Component\Validator\Constraints\IbanValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IdenticalToValidator" class="Symfony\Component\Validator\Constraints\IdenticalToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ImageValidator" class="Symfony\Component\Validator\Constraints\ImageValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IpValidator" class="Symfony\Component\Validator\Constraints\IpValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsFalseValidator" class="Symfony\Component\Validator\Constraints\IsFalseValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsNullValidator" class="Symfony\Component\Validator\Constraints\IsNullValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsTrueValidator" class="Symfony\Component\Validator\Constraints\IsTrueValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsbnValidator" class="Symfony\Component\Validator\Constraints\IsbnValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IsinValidator" class="Symfony\Component\Validator\Constraints\IsinValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\IssnValidator" class="Symfony\Component\Validator\Constraints\IssnValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\JsonValidator" class="Symfony\Component\Validator\Constraints\JsonValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LanguageValidator" class="Symfony\Component\Validator\Constraints\LanguageValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LengthValidator" class="Symfony\Component\Validator\Constraints\LengthValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LessThanOrEqualValidator" class="Symfony\Component\Validator\Constraints\LessThanOrEqualValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LessThanValidator" class="Symfony\Component\Validator\Constraints\LessThanValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LocaleValidator" class="Symfony\Component\Validator\Constraints\LocaleValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\LuhnValidator" class="Symfony\Component\Validator\Constraints\LuhnValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator" class="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotBlankValidator" class="Symfony\Component\Validator\Constraints\NotBlankValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" class="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotEqualToValidator" class="Symfony\Component\Validator\Constraints\NotEqualToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotIdenticalToValidator" class="Symfony\Component\Validator\Constraints\NotIdenticalToValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\NotNullValidator" class="Symfony\Component\Validator\Constraints\NotNullValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\PasswordStrengthValidator" class="Symfony\Component\Validator\Constraints\PasswordStrengthValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\RangeValidator" class="Symfony\Component\Validator\Constraints\RangeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\RegexValidator" class="Symfony\Component\Validator\Constraints\RegexValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\SequentiallyValidator" class="Symfony\Component\Validator\Constraints\SequentiallyValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\TimeValidator" class="Symfony\Component\Validator\Constraints\TimeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\TimezoneValidator" class="Symfony\Component\Validator\Constraints\TimezoneValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\TypeValidator" class="Symfony\Component\Validator\Constraints\TypeValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UlidValidator" class="Symfony\Component\Validator\Constraints\UlidValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UniqueValidator" class="Symfony\Component\Validator\Constraints\UniqueValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UrlValidator" class="Symfony\Component\Validator\Constraints\UrlValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\UuidValidator" class="Symfony\Component\Validator\Constraints\UuidValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\ValidValidator" class="Symfony\Component\Validator\Constraints\ValidValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="Symfony\Component\Validator\Constraints\WhenValidator" class="Symfony\Component\Validator\Constraints\WhenValidator" abstract="true">
      <tag name="container.excluded"/>
      <tag name="validator.constraint_validator"/>
    </service>
    <service id="validator.expression" class="Symfony\Component\Validator\Constraints\ExpressionValidator">
      <tag name="validator.constraint_validator" alias="validator.expression"/>
      <argument>null</argument>
    </service>
    <service id="cache.validator_expression_language" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>iRnAxom5Qj</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="validator.email" class="Symfony\Component\Validator\Constraints\EmailValidator">
      <tag name="validator.constraint_validator"/>
      <argument>html5</argument>
    </service>
    <service id="validator.not_compromised_password" class="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator">
      <tag name="validator.constraint_validator"/>
      <argument>null</argument>
      <argument>UTF-8</argument>
      <argument>true</argument>
      <argument>null</argument>
    </service>
    <service id="validator.when" class="Symfony\Component\Validator\Constraints\WhenValidator">
      <tag name="validator.constraint_validator"/>
      <argument>null</argument>
    </service>
    <service id="validator.no_suspicious_characters" class="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator">
      <tag name="validator.constraint_validator" alias="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator"/>
      <argument type="collection"/>
    </service>
    <service id="validator.property_info_loader" class="Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader">
      <tag name="validator.auto_mapper"/>
      <argument type="service" id="property_info"/>
      <argument type="service" id="property_info"/>
      <argument type="service" id="property_info"/>
      <argument>null</argument>
    </service>
    <service id="data_collector.doctrine" class="Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector">
      <tag name="data_collector" template="@Doctrine/Collector/db.html.twig" id="db" priority="250"/>
      <argument type="service" id="doctrine"/>
      <argument>true</argument>
      <argument type="service" id="doctrine.debug_data_holder" on-invalid="null"/>
    </service>
    <service id="doctrine.dbal.connection_factory" class="Doctrine\Bundle\DoctrineBundle\ConnectionFactory">
      <argument type="collection"/>
      <argument type="service" id="doctrine.dbal.connection_factory.dsn_parser"/>
    </service>
    <service id="doctrine.dbal.connection_factory.dsn_parser" class="Doctrine\DBAL\Tools\DsnParser">
      <argument type="collection">
        <argument key="db2">ibm_db2</argument>
        <argument key="mssql">pdo_sqlsrv</argument>
        <argument key="mysql">pdo_mysql</argument>
        <argument key="mysql2">pdo_mysql</argument>
        <argument key="postgres">pdo_pgsql</argument>
        <argument key="postgresql">pdo_pgsql</argument>
        <argument key="pgsql">pdo_pgsql</argument>
        <argument key="sqlite">pdo_sqlite</argument>
        <argument key="sqlite3">pdo_sqlite</argument>
      </argument>
    </service>
    <service id="doctrine.dbal.connection" class="Doctrine\DBAL\Connection" abstract="true">
      <factory service="doctrine.dbal.connection_factory" method="createConnection"/>
    </service>
    <service id="doctrine.dbal.connection.event_manager" class="Symfony\Bridge\Doctrine\ContainerAwareEventManager" abstract="true">
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine.dbal.connection.configuration" class="Doctrine\DBAL\Configuration" abstract="true"/>
    <service id="doctrine" class="Doctrine\Bundle\DoctrineBundle\Registry" public="true">
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="service_container"/>
      <argument>%doctrine.connections%</argument>
      <argument>%doctrine.entity_managers%</argument>
      <argument>default</argument>
      <argument>default</argument>
    </service>
    <service id="doctrine.twig.doctrine_extension" class="Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension">
      <tag name="twig.extension"/>
    </service>
    <service id="doctrine.dbal.schema_asset_filter_manager" class="Doctrine\Bundle\DoctrineBundle\Dbal\SchemaAssetsFilterManager" abstract="true"/>
    <service id="doctrine.dbal.well_known_schema_asset_filter" class="Doctrine\Bundle\DoctrineBundle\Dbal\BlacklistSchemaAssetFilter">
      <argument type="collection"/>
    </service>
    <service id="doctrine.database_create_command" class="Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand">
      <tag name="console.command" command="doctrine:database:create"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:database:create</argument>
      </call>
    </service>
    <service id="doctrine.database_drop_command" class="Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand">
      <tag name="console.command" command="doctrine:database:drop"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine"/>
      <call method="setName">
        <argument>doctrine:database:drop</argument>
      </call>
    </service>
    <service id="doctrine.query_sql_command" class="Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand">
      <tag name="console.command" command="doctrine:query:sql"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider" on-invalid="null"/>
      <call method="setName">
        <argument>doctrine:query:sql</argument>
      </call>
    </service>
    <service id="Doctrine\DBAL\Tools\Console\Command\RunSqlCommand" class="Doctrine\DBAL\Tools\Console\Command\RunSqlCommand">
      <tag name="console.command" command="dbal:run-sql"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider" on-invalid="null"/>
      <call method="setName">
        <argument>dbal:run-sql</argument>
      </call>
    </service>
    <service id="doctrine.dbal.default_schema_manager_factory" class="Doctrine\DBAL\Schema\DefaultSchemaManagerFactory"/>
    <service id="doctrine.dbal.legacy_schema_manager_factory" class="Doctrine\DBAL\Schema\LegacySchemaManagerFactory"/>
    <service id="doctrine.dbal.default_connection.configuration" class="Doctrine\DBAL\Configuration">
      <call method="setSchemaManagerFactory">
        <argument type="service" id="doctrine.dbal.legacy_schema_manager_factory"/>
      </call>
      <call method="setMiddlewares">
        <argument type="collection">
          <argument type="service">
            <service class="Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware">
              <argument type="service" id="doctrine.debug_data_holder"/>
              <argument type="service" id="debug.stopwatch" on-invalid="null"/>
              <call method="setConnectionName">
                <argument>default</argument>
              </call>
            </service>
          </argument>
        </argument>
      </call>
    </service>
    <service id="doctrine.dbal.default_connection.event_manager" class="Symfony\Bridge\Doctrine\ContainerAwareEventManager">
      <argument type="service" id=".service_locator.VHsrTPK"/>
      <argument type="collection">
        <argument type="collection">
          <argument type="collection">
            <argument>postGenerateSchema</argument>
          </argument>
          <argument>doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>postGenerateSchema</argument>
          </argument>
          <argument>doctrine.orm.listeners.doctrine_token_provider_schema_listener</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>postGenerateSchema</argument>
          </argument>
          <argument>doctrine.orm.listeners.pdo_session_handler_schema_listener</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>postGenerateSchema</argument>
          </argument>
          <argument>doctrine.orm.listeners.lock_store_schema_listener</argument>
        </argument>
        <argument type="collection">
          <argument type="collection">
            <argument>loadClassMetadata</argument>
          </argument>
          <argument>doctrine.orm.default_listeners.attach_entity_listeners</argument>
        </argument>
      </argument>
    </service>
    <service id="doctrine.dbal.default_connection" class="Doctrine\DBAL\Connection" public="true">
      <argument type="collection">
        <argument key="url">%env(resolve:DATABASE_URL)%</argument>
        <argument key="driver">pdo_mysql</argument>
        <argument key="host">localhost</argument>
        <argument key="port">null</argument>
        <argument key="user">root</argument>
        <argument key="password">null</argument>
        <argument key="driverOptions" type="collection"/>
        <argument key="defaultTableOptions" type="collection"/>
      </argument>
      <argument type="service" id="doctrine.dbal.default_connection.configuration"/>
      <argument type="service" id="doctrine.dbal.default_connection.event_manager"/>
      <argument type="collection"/>
      <factory service="doctrine.dbal.connection_factory" method="createConnection"/>
    </service>
    <service id="Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider" class="Doctrine\Bundle\DoctrineBundle\Dbal\ManagerRegistryAwareConnectionProvider">
      <argument type="service">
        <service class="Doctrine\Bundle\DoctrineBundle\Registry" public="true">
          <tag name="kernel.reset" method="reset"/>
          <argument type="service" id="service_container"/>
          <argument>%doctrine.connections%</argument>
          <argument>%doctrine.entity_managers%</argument>
          <argument>default</argument>
          <argument>default</argument>
        </service>
      </argument>
    </service>
    <service id="doctrine.debug_data_holder" class="Doctrine\Bundle\DoctrineBundle\Middleware\BacktraceDebugDataHolder">
      <tag name="kernel.reset" method="reset"/>
      <argument type="collection">
        <argument>default</argument>
      </argument>
    </service>
    <service id="doctrine.dbal.debug_middleware" class="Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware" abstract="true">
      <tag name="doctrine.middleware" connection="default"/>
      <argument type="service" id="doctrine.debug_data_holder"/>
      <argument type="service" id="debug.stopwatch" on-invalid="null"/>
    </service>
    <service id=".1_ServiceLocator~9uMl7_3" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.proxy_cache_warmer" class="Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="form.type_guesser.doctrine" class="Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser">
      <tag name="form.type_guesser"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="form.type.entity" class="Symfony\Bridge\Doctrine\Form\Type\EntityType">
      <tag name="form.type" alias="entity"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.configuration" class="Doctrine\ORM\Configuration" abstract="true"/>
    <service id="doctrine.orm.entity_manager.abstract" class="Doctrine\ORM\EntityManager" lazy="true" abstract="true"/>
    <service id="doctrine.orm.container_repository_factory" class="Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory">
      <argument type="service" id=".service_locator.yQHUXzX"/>
    </service>
    <service id="doctrine.orm.manager_configurator.abstract" class="Doctrine\Bundle\DoctrineBundle\ManagerConfigurator" abstract="true">
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.validator.unique" class="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator">
      <tag name="validator.constraint_validator" alias="doctrine.orm.validator.unique"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.validator_initializer" class="Symfony\Bridge\Doctrine\Validator\DoctrineInitializer">
      <tag name="validator.initializer"/>
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.security.user.provider" class="Symfony\Bridge\Doctrine\Security\User\EntityUserProvider" abstract="true">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.listeners.resolve_target_entity" class="Doctrine\ORM\Tools\ResolveTargetEntityListener"/>
    <service id="doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener" class="Symfony\Bridge\Doctrine\SchemaListener\DoctrineDbalCacheAdapterSchemaListener">
      <tag name="doctrine.event_listener" event="postGenerateSchema"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.listeners.doctrine_token_provider_schema_listener" class="Symfony\Bridge\Doctrine\SchemaListener\RememberMeTokenProviderDoctrineSchemaListener">
      <tag name="doctrine.event_listener" event="postGenerateSchema"/>
      <argument type="tagged_iterator" tag="security.remember_me_handler"/>
    </service>
    <service id="doctrine.orm.listeners.pdo_session_handler_schema_listener" class="Symfony\Bridge\Doctrine\SchemaListener\PdoSessionHandlerSchemaListener">
      <tag name="doctrine.event_listener" event="postGenerateSchema"/>
      <argument type="service" id="session.handler.native"/>
    </service>
    <service id="doctrine.orm.listeners.lock_store_schema_listener" class="Symfony\Bridge\Doctrine\SchemaListener\LockStoreSchemaListener">
      <tag name="doctrine.event_listener" event="postGenerateSchema"/>
      <argument type="tagged_iterator" tag="lock.store"/>
    </service>
    <service id="doctrine.orm.naming_strategy.default" class="Doctrine\ORM\Mapping\DefaultNamingStrategy"/>
    <service id="doctrine.orm.naming_strategy.underscore" class="Doctrine\ORM\Mapping\UnderscoreNamingStrategy"/>
    <service id="doctrine.orm.naming_strategy.underscore_number_aware" class="Doctrine\ORM\Mapping\UnderscoreNamingStrategy">
      <argument>0</argument>
      <argument>true</argument>
    </service>
    <service id="doctrine.orm.quote_strategy.default" class="Doctrine\ORM\Mapping\DefaultQuoteStrategy"/>
    <service id="doctrine.orm.quote_strategy.ansi" class="Doctrine\ORM\Mapping\AnsiQuoteStrategy"/>
    <service id="doctrine.ulid_generator" class="Symfony\Bridge\Doctrine\IdGenerator\UlidGenerator">
      <tag name="doctrine.id_generator"/>
      <argument>null</argument>
    </service>
    <service id="doctrine.uuid_generator" class="Symfony\Bridge\Doctrine\IdGenerator\UuidGenerator">
      <tag name="doctrine.id_generator"/>
      <argument>null</argument>
    </service>
    <service id="doctrine.orm.command.entity_manager_provider" class="Doctrine\Bundle\DoctrineBundle\Orm\ManagerRegistryAwareEntityManagerProvider">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.orm.entity_value_resolver" class="Symfony\Bridge\Doctrine\ArgumentResolver\EntityValueResolver">
      <tag name="Symfony\Bridge\Doctrine\ArgumentResolver\EntityValueResolver" priority="110">controller.argument_value_resolver</tag>
      <argument type="service" id="doctrine"/>
      <argument>null</argument>
    </service>
    <service id="doctrine.cache_clear_metadata_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\MetadataCommand">
      <tag name="console.command" command="doctrine:cache:clear-metadata"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-metadata</argument>
      </call>
    </service>
    <service id="doctrine.cache_clear_query_cache_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\QueryCommand">
      <tag name="console.command" command="doctrine:cache:clear-query"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-query</argument>
      </call>
    </service>
    <service id="doctrine.cache_clear_result_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\ResultCommand">
      <tag name="console.command" command="doctrine:cache:clear-result"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-result</argument>
      </call>
    </service>
    <service id="doctrine.cache_collection_region_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\CollectionRegionCommand">
      <tag name="console.command" command="doctrine:cache:clear-collection-region"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-collection-region</argument>
      </call>
    </service>
    <service id="doctrine.mapping_convert_command" class="Doctrine\ORM\Tools\Console\Command\ConvertMappingCommand">
      <tag name="console.command" command="doctrine:mapping:convert"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:mapping:convert</argument>
      </call>
    </service>
    <service id="doctrine.schema_create_command" class="Doctrine\ORM\Tools\Console\Command\SchemaTool\CreateCommand">
      <tag name="console.command" command="doctrine:schema:create"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:schema:create</argument>
      </call>
    </service>
    <service id="doctrine.schema_drop_command" class="Doctrine\ORM\Tools\Console\Command\SchemaTool\DropCommand">
      <tag name="console.command" command="doctrine:schema:drop"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:schema:drop</argument>
      </call>
    </service>
    <service id="doctrine.ensure_production_settings_command" class="Doctrine\ORM\Tools\Console\Command\EnsureProductionSettingsCommand">
      <tag name="console.command" command="doctrine:ensure-production-settings"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:ensure-production-settings</argument>
      </call>
    </service>
    <service id="doctrine.clear_entity_region_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\EntityRegionCommand">
      <tag name="console.command" command="doctrine:cache:clear-entity-region"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-entity-region</argument>
      </call>
    </service>
    <service id="doctrine.mapping_info_command" class="Doctrine\ORM\Tools\Console\Command\InfoCommand">
      <tag name="console.command" command="doctrine:mapping:info"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:mapping:info</argument>
      </call>
    </service>
    <service id="doctrine.clear_query_region_command" class="Doctrine\ORM\Tools\Console\Command\ClearCache\QueryRegionCommand">
      <tag name="console.command" command="doctrine:cache:clear-query-region"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:cache:clear-query-region</argument>
      </call>
    </service>
    <service id="doctrine.query_dql_command" class="Doctrine\ORM\Tools\Console\Command\RunDqlCommand">
      <tag name="console.command" command="doctrine:query:dql"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:query:dql</argument>
      </call>
    </service>
    <service id="doctrine.schema_update_command" class="Doctrine\ORM\Tools\Console\Command\SchemaTool\UpdateCommand">
      <tag name="console.command" command="doctrine:schema:update"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:schema:update</argument>
      </call>
    </service>
    <service id="doctrine.schema_validate_command" class="Doctrine\ORM\Tools\Console\Command\ValidateSchemaCommand">
      <tag name="console.command" command="doctrine:schema:validate"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.orm.command.entity_manager_provider"/>
      <call method="setName">
        <argument>doctrine:schema:validate</argument>
      </call>
    </service>
    <service id="doctrine.mapping_import_command" class="Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand">
      <tag name="console.command" command="doctrine:mapping:import"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine"/>
      <argument>%kernel.bundles%</argument>
      <call method="setName">
        <argument>doctrine:mapping:import</argument>
      </call>
    </service>
    <service id="doctrine.orm.default_configuration" class="Doctrine\ORM\Configuration">
      <tag name="doctrine.orm.configuration"/>
      <call method="setEntityNamespaces">
        <argument type="collection">
          <argument key="App">App\Entity</argument>
        </argument>
      </call>
      <call method="setMetadataCache">
        <argument type="service" id="cache.doctrine.orm.default.metadata"/>
      </call>
      <call method="setQueryCache">
        <argument type="service" id="cache.doctrine.orm.default.query"/>
      </call>
      <call method="setResultCache">
        <argument type="service" id="cache.doctrine.orm.default.result"/>
      </call>
      <call method="setMetadataDriverImpl">
        <argument type="service" id=".doctrine.orm.default_metadata_driver"/>
      </call>
      <call method="setProxyDir">
        <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/doctrine/orm/Proxies</argument>
      </call>
      <call method="setProxyNamespace">
        <argument>Proxies</argument>
      </call>
      <call method="setAutoGenerateProxyClasses">
        <argument>true</argument>
      </call>
      <call method="setSchemaIgnoreClasses">
        <argument type="collection"/>
      </call>
      <call method="setClassMetadataFactoryName">
        <argument>Doctrine\Bundle\DoctrineBundle\Mapping\ClassMetadataFactory</argument>
      </call>
      <call method="setDefaultRepositoryClassName">
        <argument>Doctrine\ORM\EntityRepository</argument>
      </call>
      <call method="setNamingStrategy">
        <argument type="service" id="doctrine.orm.naming_strategy.underscore_number_aware"/>
      </call>
      <call method="setQuoteStrategy">
        <argument type="service" id="doctrine.orm.quote_strategy.default"/>
      </call>
      <call method="setEntityListenerResolver">
        <argument type="service" id="doctrine.orm.default_entity_listener_resolver"/>
      </call>
      <call method="setLazyGhostObjectEnabled">
        <argument>true</argument>
      </call>
      <call method="setRepositoryFactory">
        <argument type="service" id="doctrine.orm.container_repository_factory"/>
      </call>
    </service>
    <service id="doctrine.orm.default_attribute_metadata_driver" class="Doctrine\ORM\Mapping\Driver\AttributeDriver">
      <argument type="collection">
        <argument>/Users/test/Documents/YNOV/symfony/backend/src/Entity</argument>
      </argument>
      <argument>true</argument>
    </service>
    <service id="cache.doctrine.orm.default.metadata" class="Symfony\Component\Cache\Adapter\ArrayAdapter"/>
    <service id="cache.doctrine.orm.default.result" class="Symfony\Component\Cache\Adapter\ArrayAdapter">
      <tag name="cache.pool"/>
    </service>
    <service id="cache.doctrine.orm.default.query" class="Symfony\Component\Cache\Adapter\ArrayAdapter">
      <tag name="cache.pool"/>
    </service>
    <service id="doctrine.orm.default_entity_listener_resolver" class="Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver">
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine.orm.default_listeners.attach_entity_listeners" class="Doctrine\ORM\Tools\AttachEntityListenersListener">
      <tag name="doctrine.event_listener" event="loadClassMetadata"/>
    </service>
    <service id="doctrine.orm.default_manager_configurator" class="Doctrine\Bundle\DoctrineBundle\ManagerConfigurator">
      <argument type="collection"/>
      <argument type="collection"/>
    </service>
    <service id="doctrine.orm.default_entity_manager" class="Doctrine\ORM\EntityManager" public="true" lazy="true">
      <tag name="container.preload" class="Doctrine\ORM\Proxy\Autoloader"/>
      <argument type="service" id="doctrine.dbal.default_connection"/>
      <argument type="service" id="doctrine.orm.default_configuration"/>
      <argument type="service" id="doctrine.dbal.default_connection.event_manager"/>
      <configurator service="doctrine.orm.default_manager_configurator" method="configure"/>
    </service>
    <service id="doctrine.orm.default_entity_manager.property_info_extractor" class="Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor">
      <tag name="property_info.list_extractor" priority="-1001"/>
      <tag name="property_info.type_extractor" priority="-999"/>
      <tag name="property_info.access_extractor" priority="-999"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
    </service>
    <service id="doctrine.orm.default_entity_manager.validator_loader" class="Symfony\Bridge\Doctrine\Validator\DoctrineLoader">
      <tag name="validator.auto_mapper" priority="-100"/>
      <argument type="service" id="doctrine.orm.default_entity_manager"/>
      <argument>null</argument>
    </service>
    <service id="doctrine.migrations.dependency_factory" class="Doctrine\Migrations\DependencyFactory" constructor="fromEntityManager">
      <argument type="service" id="doctrine.migrations.configuration_loader"/>
      <argument type="service" id="doctrine.migrations.entity_manager_registry_loader"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <call method="setDefinition">
        <argument>Doctrine\Migrations\Version\MigrationFactory</argument>
        <argument type="service_closure" id="doctrine.migrations.container_aware_migrations_factory"/>
      </call>
    </service>
    <service id="doctrine.migrations.configuration_loader" class="Doctrine\Migrations\Configuration\Migration\ExistingConfiguration">
      <argument type="service" id="doctrine.migrations.configuration"/>
    </service>
    <service id="doctrine.migrations.connection_loader" class="Doctrine\Migrations\Configuration\Connection\ExistingConnection"/>
    <service id="doctrine.migrations.em_loader" class="Doctrine\Migrations\Configuration\EntityManager\ExistingEntityManager"/>
    <service id="doctrine.migrations.entity_manager_registry_loader" class="Doctrine\Migrations\Configuration\EntityManager\ManagerRegistryEntityManager" constructor="withSimpleDefault">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.migrations.connection_registry_loader" class="Doctrine\Migrations\Configuration\Connection\ConnectionRegistryConnection" constructor="withSimpleDefault">
      <argument type="service" id="doctrine"/>
    </service>
    <service id="doctrine.migrations.configuration" class="Doctrine\Migrations\Configuration\Configuration">
      <call method="addMigrationsDirectory">
        <argument>DoctrineMigrations</argument>
        <argument>/Users/test/Documents/YNOV/symfony/backend/migrations</argument>
      </call>
      <call method="setAllOrNothing">
        <argument>false</argument>
      </call>
      <call method="setCheckDatabasePlatform">
        <argument>true</argument>
      </call>
      <call method="setTransactional">
        <argument>true</argument>
      </call>
      <call method="setMetadataStorageConfiguration">
        <argument type="service" id="doctrine.migrations.storage.table_storage"/>
      </call>
    </service>
    <service id="doctrine.migrations.container_aware_migrations_factory" class="Doctrine\Bundle\MigrationsBundle\MigrationsFactory\ContainerAwareMigrationFactory">
      <tag name="container.decorator" id="doctrine.migrations.migrations_factory" inner="doctrine.migrations.container_aware_migrations_factory.inner"/>
      <argument type="service" id="doctrine.migrations.container_aware_migrations_factory.inner"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="doctrine_migrations.diff_command" class="Doctrine\Migrations\Tools\Console\Command\DiffCommand">
      <tag name="console.command" command="doctrine:migrations:diff"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:diff</argument>
      <call method="setName">
        <argument>doctrine:migrations:diff</argument>
      </call>
    </service>
    <service id="doctrine_migrations.sync_metadata_command" class="Doctrine\Migrations\Tools\Console\Command\SyncMetadataCommand">
      <tag name="console.command" command="doctrine:migrations:sync-metadata-storage"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:sync-metadata-storage</argument>
      <call method="setName">
        <argument>doctrine:migrations:sync-metadata-storage</argument>
      </call>
    </service>
    <service id="doctrine_migrations.versions_command" class="Doctrine\Migrations\Tools\Console\Command\ListCommand">
      <tag name="console.command" command="doctrine:migrations:list"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:versions</argument>
      <call method="setName">
        <argument>doctrine:migrations:list</argument>
      </call>
    </service>
    <service id="doctrine_migrations.current_command" class="Doctrine\Migrations\Tools\Console\Command\CurrentCommand">
      <tag name="console.command" command="doctrine:migrations:current"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:current</argument>
      <call method="setName">
        <argument>doctrine:migrations:current</argument>
      </call>
    </service>
    <service id="doctrine_migrations.dump_schema_command" class="Doctrine\Migrations\Tools\Console\Command\DumpSchemaCommand">
      <tag name="console.command" command="doctrine:migrations:dump-schema"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:dump-schema</argument>
      <call method="setName">
        <argument>doctrine:migrations:dump-schema</argument>
      </call>
    </service>
    <service id="doctrine_migrations.execute_command" class="Doctrine\Migrations\Tools\Console\Command\ExecuteCommand">
      <tag name="console.command" command="doctrine:migrations:execute"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:execute</argument>
      <call method="setName">
        <argument>doctrine:migrations:execute</argument>
      </call>
    </service>
    <service id="doctrine_migrations.generate_command" class="Doctrine\Migrations\Tools\Console\Command\GenerateCommand">
      <tag name="console.command" command="doctrine:migrations:generate"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:generate</argument>
      <call method="setName">
        <argument>doctrine:migrations:generate</argument>
      </call>
    </service>
    <service id="doctrine_migrations.latest_command" class="Doctrine\Migrations\Tools\Console\Command\LatestCommand">
      <tag name="console.command" command="doctrine:migrations:latest"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:latest</argument>
      <call method="setName">
        <argument>doctrine:migrations:latest</argument>
      </call>
    </service>
    <service id="doctrine_migrations.migrate_command" class="Doctrine\Migrations\Tools\Console\Command\MigrateCommand">
      <tag name="console.command" command="doctrine:migrations:migrate"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:migrate</argument>
      <call method="setName">
        <argument>doctrine:migrations:migrate</argument>
      </call>
    </service>
    <service id="doctrine_migrations.rollup_command" class="Doctrine\Migrations\Tools\Console\Command\RollupCommand">
      <tag name="console.command" command="doctrine:migrations:rollup"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:rollup</argument>
      <call method="setName">
        <argument>doctrine:migrations:rollup</argument>
      </call>
    </service>
    <service id="doctrine_migrations.status_command" class="Doctrine\Migrations\Tools\Console\Command\StatusCommand">
      <tag name="console.command" command="doctrine:migrations:status"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:status</argument>
      <call method="setName">
        <argument>doctrine:migrations:status</argument>
      </call>
    </service>
    <service id="doctrine_migrations.up_to_date_command" class="Doctrine\Migrations\Tools\Console\Command\UpToDateCommand">
      <tag name="console.command" command="doctrine:migrations:up-to-date"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:up-to-date</argument>
      <call method="setName">
        <argument>doctrine:migrations:up-to-date</argument>
      </call>
    </service>
    <service id="doctrine_migrations.version_command" class="Doctrine\Migrations\Tools\Console\Command\VersionCommand">
      <tag name="console.command" command="doctrine:migrations:version"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.migrations.dependency_factory"/>
      <argument>doctrine:migrations:version</argument>
      <call method="setName">
        <argument>doctrine:migrations:version</argument>
      </call>
    </service>
    <service id="doctrine.migrations.storage.table_storage" class="Doctrine\Migrations\Metadata\Storage\TableMetadataStorageConfiguration"/>
    <service id="maker.file_manager" class="Symfony\Bundle\MakerBundle\FileManager">
      <argument type="service" id="filesystem"/>
      <argument type="service" id="maker.autoloader_util"/>
      <argument type="service" id="maker.file_link_formatter"/>
      <argument>/Users/test/Documents/YNOV/symfony/backend</argument>
      <argument>null</argument>
    </service>
    <service id="maker.autoloader_finder" class="Symfony\Bundle\MakerBundle\Util\ComposerAutoloaderFinder">
      <argument>App</argument>
    </service>
    <service id="maker.autoloader_util" class="Symfony\Bundle\MakerBundle\Util\AutoloaderUtil">
      <argument type="service" id="maker.autoloader_finder"/>
    </service>
    <service id="maker.file_link_formatter" class="Symfony\Bundle\MakerBundle\Util\MakerFileLinkFormatter">
      <argument type="service" id="debug.file_link_formatter" on-invalid="ignore"/>
    </service>
    <service id="maker.event_registry" class="Symfony\Bundle\MakerBundle\EventRegistry">
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="maker.console_error_listener" class="Symfony\Bundle\MakerBundle\Event\ConsoleErrorSubscriber">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.no_preload"/>
    </service>
    <service id="maker.doctrine_helper" class="Symfony\Bundle\MakerBundle\Doctrine\DoctrineHelper">
      <argument>App\Entity</argument>
      <argument type="service" id="doctrine" on-invalid="ignore"/>
      <argument type="collection">
        <argument key="default" type="collection">
          <argument type="collection">
            <argument>App\Entity</argument>
            <argument type="service" id="doctrine.orm.default_attribute_metadata_driver"/>
          </argument>
        </argument>
      </argument>
    </service>
    <service id="maker.template_linter" class="Symfony\Bundle\MakerBundle\Util\TemplateLinter">
      <argument>%env(default::string:MAKER_PHP_CS_FIXER_BINARY_PATH)%</argument>
      <argument>%env(default::string:MAKER_PHP_CS_FIXER_CONFIG_PATH)%</argument>
    </service>
    <service id="maker.auto_command.abstract" class="Symfony\Bundle\MakerBundle\Command\MakerCommand" abstract="true">
      <argument></argument>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
    </service>
    <service id="maker.generator" class="Symfony\Bundle\MakerBundle\Generator">
      <argument type="service" id="maker.file_manager"/>
      <argument>App</argument>
      <argument>null</argument>
      <argument type="service" id="maker.template_component_generator"/>
    </service>
    <service id="maker.entity_class_generator" class="Symfony\Bundle\MakerBundle\Doctrine\EntityClassGenerator">
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.user_class_builder" class="Symfony\Bundle\MakerBundle\Security\UserClassBuilder"/>
    <service id="maker.security_config_updater" class="Symfony\Bundle\MakerBundle\Security\SecurityConfigUpdater"/>
    <service id="maker.renderer.form_type_renderer" class="Symfony\Bundle\MakerBundle\Renderer\FormTypeRenderer">
      <argument type="service" id="maker.generator"/>
    </service>
    <service id="maker.security_controller_builder" class="Symfony\Bundle\MakerBundle\Security\SecurityControllerBuilder"/>
    <service id="maker.php_compat_util" class="Symfony\Bundle\MakerBundle\Util\PhpCompatUtil">
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.template_component_generator" class="Symfony\Bundle\MakerBundle\Util\TemplateComponentGenerator"/>
    <service id="maker.maker.make_authenticator" class="Symfony\Bundle\MakerBundle\Maker\MakeAuthenticator">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.security_controller_builder"/>
    </service>
    <service id="maker.maker.make_command" class="Symfony\Bundle\MakerBundle\Maker\MakeCommand">
      <tag name="maker.command"/>
      <argument type="service" id="maker.php_compat_util"/>
    </service>
    <service id="maker.maker.make_twig_component" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigComponent">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeController">
      <tag name="maker.command"/>
      <argument type="service" id="maker.php_compat_util"/>
    </service>
    <service id="maker.maker.make_crud" class="Symfony\Bundle\MakerBundle\Maker\MakeCrud">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_docker_database" class="Symfony\Bundle\MakerBundle\Maker\MakeDockerDatabase">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_entity" class="Symfony\Bundle\MakerBundle\Maker\MakeEntity">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument>null</argument>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.entity_class_generator"/>
      <argument type="service" id="maker.php_compat_util"/>
    </service>
    <service id="maker.maker.make_fixtures" class="Symfony\Bundle\MakerBundle\Maker\MakeFixtures">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form" class="Symfony\Bundle\MakerBundle\Maker\MakeForm">
      <tag name="maker.command"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
    </service>
    <service id="maker.maker.make_functional_test" class="Symfony\Bundle\MakerBundle\Maker\MakeFunctionalTest">
      <tag name="maker.command"/>
      <deprecated package="symfony/maker-bundle" version="1.29">The "%service_id%" service is deprecated, use "maker.maker.make_test" instead.</deprecated>
    </service>
    <service id="maker.maker.make_message" class="Symfony\Bundle\MakerBundle\Maker\MakeMessage">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
    </service>
    <service id="maker.maker.make_messenger_middleware" class="Symfony\Bundle\MakerBundle\Maker\MakeMessengerMiddleware">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_registration_form" class="Symfony\Bundle\MakerBundle\Maker\MakeRegistrationForm">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.renderer.form_type_renderer"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="maker.maker.make_reset_password" class="Symfony\Bundle\MakerBundle\Maker\MakeResetPassword">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.doctrine_helper"/>
      <argument type="service" id="maker.entity_class_generator"/>
    </service>
    <service id="maker.maker.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerEncoder">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Maker\MakeSerializerNormalizer">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_subscriber" class="Symfony\Bundle\MakerBundle\Maker\MakeSubscriber">
      <tag name="maker.command"/>
      <argument type="service" id="maker.event_registry"/>
    </service>
    <service id="maker.maker.make_twig_extension" class="Symfony\Bundle\MakerBundle\Maker\MakeTwigExtension">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_test" class="Symfony\Bundle\MakerBundle\Maker\MakeTest">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_unit_test" class="Symfony\Bundle\MakerBundle\Maker\MakeUnitTest">
      <tag name="maker.command"/>
      <deprecated package="symfony/maker-bundle" version="1.29">The "%service_id%" service is deprecated, use "maker.maker.make_test" instead.</deprecated>
    </service>
    <service id="maker.maker.make_validator" class="Symfony\Bundle\MakerBundle\Maker\MakeValidator">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_voter" class="Symfony\Bundle\MakerBundle\Maker\MakeVoter">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_user" class="Symfony\Bundle\MakerBundle\Maker\MakeUser">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.user_class_builder"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.entity_class_generator"/>
      <argument type="service" id="maker.doctrine_helper"/>
    </service>
    <service id="maker.maker.make_migration" class="Symfony\Bundle\MakerBundle\Maker\MakeMigration">
      <tag name="maker.command"/>
      <argument>/Users/test/Documents/YNOV/symfony/backend</argument>
      <argument type="service" id="maker.file_link_formatter"/>
    </service>
    <service id="maker.maker.make_stimulus_controller" class="Symfony\Bundle\MakerBundle\Maker\MakeStimulusController">
      <tag name="maker.command"/>
    </service>
    <service id="maker.maker.make_form_login" class="Symfony\Bundle\MakerBundle\Maker\Security\MakeFormLogin">
      <tag name="maker.command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.security_config_updater"/>
      <argument type="service" id="maker.security_controller_builder"/>
    </service>
    <service id="jms_serializer.event_dispatcher" class="JMS\SerializerBundle\Debug\TraceableEventDispatcher">
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="jms_serializer.event_dispatcher.service_locator"/>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.stopwatch_subscriber</argument>
          <argument>onPreSerialize</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>null</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.traceable_runs_listener</argument>
          <argument>saveRunInfo</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>null</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.doctrine_proxy_subscriber</argument>
          <argument>onPreSerializeTypedProxy</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>Doctrine\Persistence\Proxy</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.doctrine_proxy_subscriber</argument>
          <argument>onPreSerializeTypedProxy</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>Doctrine\Common\Persistence\Proxy</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.doctrine_proxy_subscriber</argument>
          <argument>onPreSerialize</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>Doctrine\ORM\PersistentCollection</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.doctrine_proxy_subscriber</argument>
          <argument>onPreSerialize</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>Doctrine\ODM\MongoDB\PersistentCollection</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.doctrine_proxy_subscriber</argument>
          <argument>onPreSerialize</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>Doctrine\ODM\PHPCR\PersistentCollection</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.doctrine_proxy_subscriber</argument>
          <argument>onPreSerialize</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>Doctrine\Persistence\Proxy</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.doctrine_proxy_subscriber</argument>
          <argument>onPreSerialize</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>Doctrine\Common\Persistence\Proxy</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.doctrine_proxy_subscriber</argument>
          <argument>onPreSerialize</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>ProxyManager\Proxy\LazyLoadingInterface</argument>
      </call>
      <call method="addListener">
        <argument>serializer.pre_deserialize</argument>
        <argument type="collection">
          <argument>jms_serializer.traceable_runs_listener</argument>
          <argument>saveRunInfo</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>null</argument>
      </call>
      <call method="addListener">
        <argument>serializer.post_serialize</argument>
        <argument type="collection">
          <argument>jms_serializer.stopwatch_subscriber</argument>
          <argument>onPostSerialize</argument>
        </argument>
        <argument>null</argument>
        <argument>null</argument>
        <argument>null</argument>
      </call>
    </service>
    <service id="jms_serializer.event_dispatcher.service_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument type="collection">
        <argument key="jms_serializer.stopwatch_subscriber" type="service_closure" id="jms_serializer.stopwatch_subscriber"/>
        <argument key="jms_serializer.traceable_runs_listener" type="service_closure" id="jms_serializer.traceable_runs_listener"/>
        <argument key="jms_serializer.doctrine_proxy_subscriber" type="service_closure" id="jms_serializer.doctrine_proxy_subscriber"/>
      </argument>
    </service>
    <service id="jms_serializer.doctrine_proxy_subscriber" class="JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber">
      <tag name="jms_serializer.event_subscriber"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument>true</argument>
      <argument>false</argument>
    </service>
    <service id="jms_serializer.stopwatch_subscriber" class="JMS\SerializerBundle\Serializer\StopwatchEventSubscriber">
      <tag name="jms_serializer.event_subscriber"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="debug.stopwatch"/>
      <argument>jms_serializer.default</argument>
    </service>
    <service id="jms_serializer.handler_registry.service_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument type="collection">
        <argument key="jms_serializer.array_collection_handler" type="service_closure" id="jms_serializer.array_collection_handler"/>
        <argument key="jms_serializer.constraint_violation_handler" type="service_closure" id="jms_serializer.constraint_violation_handler"/>
        <argument key="jms_serializer.datetime_handler" type="service_closure" id="jms_serializer.datetime_handler"/>
        <argument key="jms_serializer.iterator_handler" type="service_closure" id="jms_serializer.iterator_handler"/>
        <argument key="fos_rest.serializer.form_error_handler" type="service_closure" id="fos_rest.serializer.form_error_handler"/>
      </argument>
    </service>
    <service id="jms_serializer.array_collection_handler" class="JMS\Serializer\Handler\ArrayCollectionHandler">
      <tag name="jms_serializer.subscribing_handler"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument>false</argument>
    </service>
    <service id="jms_serializer.constraint_violation_handler" class="JMS\Serializer\Handler\ConstraintViolationHandler">
      <tag name="jms_serializer.subscribing_handler"/>
      <tag name="default">jms_serializer.instance</tag>
    </service>
    <service id="jms_serializer.datetime_handler" class="JMS\Serializer\Handler\DateHandler">
      <tag name="jms_serializer.subscribing_handler"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument>Y-m-d\TH:i:sP</argument>
      <argument>UTC</argument>
      <argument>true</argument>
    </service>
    <service id="jms_serializer.iterator_handler" class="JMS\Serializer\Handler\IteratorHandler">
      <tag name="jms_serializer.subscribing_handler"/>
      <tag name="default">jms_serializer.instance</tag>
    </service>
    <service id="jms_serializer.type_parser" class="JMS\Serializer\Type\Parser">
      <tag name="jms_serializer.instance_global"/>
    </service>
    <service id="jms_serializer.metadata.yaml_driver" class="JMS\Serializer\Metadata\Driver\YamlDriver">
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="jms_serializer.metadata.traceable_file_locator"/>
      <argument type="service" id="jms_serializer.serialized_name_annotation_strategy"/>
      <argument type="service" id="jms_serializer.type_parser" on-invalid="null"/>
      <argument>null</argument>
    </service>
    <service id="jms_serializer.metadata.xml_driver" class="JMS\Serializer\Metadata\Driver\XmlDriver">
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="jms_serializer.metadata.traceable_file_locator"/>
      <argument type="service" id="jms_serializer.serialized_name_annotation_strategy"/>
      <argument type="service" id="jms_serializer.type_parser" on-invalid="null"/>
      <argument>null</argument>
    </service>
    <service id="jms_serializer.metadata.annotation_driver" class="JMS\Serializer\Metadata\Driver\AnnotationDriver">
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="jms_serializer.metadata.annotation_and_attributes_reader"/>
      <argument type="service" id="jms_serializer.serialized_name_annotation_strategy"/>
      <argument type="service" id="jms_serializer.type_parser" on-invalid="null"/>
      <argument>null</argument>
    </service>
    <service id="jms_serializer.metadata.doctrine_type_driver" class="JMS\Serializer\Metadata\Driver\DoctrineTypeDriver">
      <argument type="service" id="jms_serializer.metadata.doctrine_type_driver.inner"/>
      <argument type="service" id="doctrine"/>
      <argument type="service" id="jms_serializer.type_parser"/>
    </service>
    <service id="jms_serializer.metadata.typed_properties_driver" class="JMS\Serializer\Metadata\Driver\TypedPropertiesDriver">
      <tag name="default">jms_serializer.instance</tag>
      <tag name="container.decorator" id="jms_serializer.metadata_driver" inner="jms_serializer.metadata.doctrine_type_driver.inner"/>
      <argument type="service" id="jms_serializer.metadata.doctrine_type_driver"/>
      <argument type="service" id="jms_serializer.type_parser" on-invalid="null"/>
    </service>
    <service id="jms_serializer.metadata.service_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument type="collection">
        <argument key="metadata_driver" type="service_closure" id="jms_serializer.metadata.typed_properties_driver"/>
      </argument>
    </service>
    <service id="jms_serializer.metadata.lazy_loading_driver" class="Metadata\Driver\LazyLoadingDriver">
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="jms_serializer.metadata.service_locator"/>
      <argument>metadata_driver</argument>
    </service>
    <service id="jms_serializer.metadata.cache.file_cache" class="Metadata\Cache\FileCache">
      <tag name="default">jms_serializer.instance</tag>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/jms_serializer_default</argument>
    </service>
    <service id="jms_serializer.version_exclusion_strategy" class="JMS\Serializer\Exclusion\VersionExclusionStrategy" abstract="true">
      <tag name="default">jms_serializer.instance</tag>
    </service>
    <service id="jms_serializer.camel_case_naming_strategy" class="JMS\Serializer\Naming\CamelCaseNamingStrategy">
      <tag name="default">jms_serializer.instance</tag>
      <argument>_</argument>
      <argument>true</argument>
    </service>
    <service id="jms_serializer.identical_property_naming_strategy" class="JMS\Serializer\Naming\IdenticalPropertyNamingStrategy">
      <tag name="default">jms_serializer.instance</tag>
    </service>
    <service id="jms_serializer.serialized_name_annotation_strategy" class="JMS\Serializer\Naming\SerializedNameAnnotationStrategy">
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="jms_serializer.camel_case_naming_strategy"/>
    </service>
    <service id="jms_serializer.doctrine_object_constructor" class="JMS\Serializer\Construction\DoctrineObjectConstructor">
      <tag name="default">jms_serializer.instance</tag>
      <tag name="container.decorator" id="jms_serializer.object_constructor" inner="jms_serializer.doctrine_object_constructor.inner"/>
      <argument type="service" id="doctrine" on-invalid="ignore"/>
      <argument type="service" id="jms_serializer.doctrine_object_constructor.inner"/>
      <argument type="string">null</argument>
    </service>
    <service id="jms_serializer.doctrine_phpcr_object_constructor" class="JMS\Serializer\Construction\DoctrineObjectConstructor">
      <tag name="default">jms_serializer.instance</tag>
      <argument>null</argument>
      <argument type="service" id="jms_serializer.doctrine_object_constructor"/>
    </service>
    <service id="jms_serializer.serializer" class="JMS\Serializer\Serializer">
      <tag name="default">jms_serializer.instance</tag>
      <tag name="default">jms_serializer.serializer</tag>
      <argument type="service" id="jms_serializer.traceable_metadata_factory"/>
      <argument type="collection">
        <argument key="2" type="service" id="jms_serializer.deserialization_graph_navigator_factory"/>
        <argument key="1" type="service" id="jms_serializer.serialization_graph_navigator_factory"/>
      </argument>
      <argument type="collection">
        <argument key="json" type="service" id="jms_serializer.json_serialization_visitor"/>
        <argument key="xml" type="service" id="jms_serializer.xml_serialization_visitor"/>
      </argument>
      <argument type="collection">
        <argument key="json" type="service" id="jms_serializer.json_deserialization_visitor"/>
        <argument key="xml" type="service" id="jms_serializer.xml_deserialization_visitor"/>
      </argument>
      <argument type="service" id="jms_serializer.configured_serialization_context_factory"/>
      <argument type="service" id="jms_serializer.configured_deserialization_context_factory"/>
      <argument type="service" id="jms_serializer.type_parser" on-invalid="null"/>
    </service>
    <service id="jms_serializer.deserialization_graph_navigator_factory" class="JMS\Serializer\GraphNavigator\Factory\DeserializationGraphNavigatorFactory">
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="jms_serializer.traceable_metadata_factory"/>
      <argument type="service" id="jms_serializer.traceable_handler_registry"/>
      <argument type="service" id="jms_serializer.doctrine_object_constructor"/>
      <argument type="service" id="jms_serializer.accessor_strategy.default"/>
      <argument type="service" id="jms_serializer.event_dispatcher"/>
      <argument>null</argument>
    </service>
    <service id="jms_serializer.serialization_graph_navigator_factory" class="JMS\Serializer\GraphNavigator\Factory\SerializationGraphNavigatorFactory">
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="jms_serializer.traceable_metadata_factory"/>
      <argument type="service" id="jms_serializer.traceable_handler_registry"/>
      <argument type="service" id="jms_serializer.accessor_strategy.default"/>
      <argument type="service" id="jms_serializer.event_dispatcher"/>
      <argument>null</argument>
    </service>
    <service id="jms_serializer.expression_language" class="Symfony\Component\ExpressionLanguage\ExpressionLanguage">
      <tag name="jms_serializer.instance_global"/>
      <call method="registerProvider">
        <argument type="service" id="jms_serializer.expression_language.function_provider"/>
      </call>
    </service>
    <service id="jms_serializer.expression_language.function_provider" class="JMS\SerializerBundle\ExpressionLanguage\BasicSerializerFunctionsProvider">
      <tag name="jms.expression.function_provider"/>
      <tag name="default">jms_serializer.instance</tag>
    </service>
    <service id="jms_serializer.accessor_strategy.default" class="JMS\Serializer\Accessor\DefaultAccessorStrategy">
      <tag name="default">jms_serializer.instance</tag>
      <argument>null</argument>
    </service>
    <service id="jms_serializer.json_serialization_visitor" class="JMS\Serializer\Visitor\Factory\JsonSerializationVisitorFactory">
      <tag name="jms_serializer.serialization_visitor" format="json"/>
      <tag name="default">jms_serializer.instance</tag>
      <call method="setOptions">
        <argument>1216</argument>
      </call>
    </service>
    <service id="jms_serializer.json_deserialization_visitor" class="JMS\Serializer\Visitor\Factory\JsonDeserializationVisitorFactory">
      <tag name="jms_serializer.deserialization_visitor" format="json"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument>false</argument>
      <call method="setOptions">
        <argument>0</argument>
      </call>
    </service>
    <service id="jms_serializer.xml_serialization_visitor" class="JMS\Serializer\Visitor\Factory\XmlSerializationVisitorFactory">
      <tag name="jms_serializer.serialization_visitor" format="xml"/>
      <tag name="default">jms_serializer.instance</tag>
      <call method="setFormatOutput">
        <argument>true</argument>
      </call>
    </service>
    <service id="jms_serializer.xml_deserialization_visitor" class="JMS\Serializer\Visitor\Factory\XmlDeserializationVisitorFactory">
      <tag name="jms_serializer.deserialization_visitor" format="xml"/>
      <tag name="default">jms_serializer.instance</tag>
    </service>
    <service id="jms_serializer.cache.cache_clearer" class="JMS\SerializerBundle\Cache\CacheClearer">
      <tag name="kernel.cache_clearer"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="jms_serializer.metadata.cache.file_cache"/>
    </service>
    <service id="jms_serializer.configured_serialization_context_factory" class="JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory">
      <tag name="default">jms_serializer.instance</tag>
    </service>
    <service id="jms_serializer.configured_deserialization_context_factory" class="JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory">
      <tag name="default">jms_serializer.instance</tag>
    </service>
    <service id="jms_serializer.data_collector" class="JMS\SerializerBundle\Debug\DataCollector">
      <tag name="jms_serializer.profiler"/>
      <tag name="data_collector" id="jms_serializer" template="@JMSSerializer/Collector/panel.html.twig"/>
      <tag name="default">jms_serializer.instance</tag>
      <argument>default</argument>
      <argument type="collection"/>
      <argument type="service" id="jms_serializer.event_dispatcher"/>
      <argument type="service" id="jms_serializer.traceable_handler_registry"/>
      <argument type="service" id="jms_serializer.traceable_metadata_factory"/>
      <argument type="service" id="jms_serializer.metadata.traceable_file_locator"/>
      <argument type="service" id="jms_serializer.traceable_runs_listener"/>
    </service>
    <service id="jms_serializer.traceable_runs_listener" class="JMS\SerializerBundle\Debug\RunsListener">
      <tag name="jms_serializer.event_listener" event="serializer.pre_serialize" method="saveRunInfo"/>
      <tag name="jms_serializer.event_listener" event="serializer.pre_deserialize" method="saveRunInfo"/>
      <tag name="jms_serializer.profiler"/>
      <tag name="default">jms_serializer.instance</tag>
    </service>
    <service id="jms_serializer.traceable_metadata_factory" class="JMS\SerializerBundle\Debug\TraceableMetadataFactory">
      <tag name="default">jms_serializer.instance</tag>
      <tag name="jms_serializer.profiler"/>
      <tag name="container.decorator" id="jms_serializer.metadata_factory" inner="jms_serializer.traceable_metadata_factory.inner"/>
      <argument type="service" id="jms_serializer.traceable_metadata_factory.inner"/>
    </service>
    <service id="jms_serializer.traceable_handler_registry" class="JMS\SerializerBundle\Debug\TraceableHandlerRegistry">
      <tag name="default">jms_serializer.instance</tag>
      <tag name="jms_serializer.profiler"/>
      <tag name="container.decorator" id="jms_serializer.handler_registry" inner="jms_serializer.traceable_handler_registry.inner"/>
      <argument type="service" id="jms_serializer.traceable_handler_registry.inner"/>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>ArrayCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>ArrayCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Doctrine\Common\Collections\ArrayCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Doctrine\Common\Collections\ArrayCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Doctrine\ORM\PersistentCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Doctrine\ORM\PersistentCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Doctrine\ODM\MongoDB\PersistentCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Doctrine\ODM\MongoDB\PersistentCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Doctrine\ODM\PHPCR\PersistentCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Doctrine\ODM\PHPCR\PersistentCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>serializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Validator\ConstraintViolationList</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.constraint_violation_handler</argument>
          <argument>serializeListToxml</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Validator\ConstraintViolationList</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.constraint_violation_handler</argument>
          <argument>serializeListTojson</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Validator\ConstraintViolation</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.constraint_violation_handler</argument>
          <argument>serializeViolationToxml</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Validator\ConstraintViolation</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.constraint_violation_handler</argument>
          <argument>serializeViolationTojson</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>DateTime</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>serializeDateTime</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>DateTime</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>serializeDateTime</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>DateTimeImmutable</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>serializeDateTimeImmutable</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>DateTimeImmutable</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>serializeDateTimeImmutable</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>DateInterval</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>serializeDateInterval</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>DateInterval</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>serializeDateInterval</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>DateTimeInterface</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>serializeDateTimeInterface</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>DateTimeInterface</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>serializeDateTimeInterface</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Iterator</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>serializeIterable</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Iterator</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>serializeIterable</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>ArrayIterator</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>serializeIterable</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>ArrayIterator</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>serializeIterable</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Generator</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>serializeIterable</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Generator</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>serializeIterable</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Form\Form</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>fos_rest.serializer.form_error_handler</argument>
          <argument>serializeFormToxml</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Form\Form</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>fos_rest.serializer.form_error_handler</argument>
          <argument>serializeFormTojson</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Form\FormInterface</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>fos_rest.serializer.form_error_handler</argument>
          <argument>serializeFormToXml</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Form\FormInterface</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>fos_rest.serializer.form_error_handler</argument>
          <argument>serializeFormToJson</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Form\FormError</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>fos_rest.serializer.form_error_handler</argument>
          <argument>serializeFormErrorToxml</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>1</argument>
        <argument>Symfony\Component\Form\FormError</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>fos_rest.serializer.form_error_handler</argument>
          <argument>serializeFormErrorTojson</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>ArrayCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>ArrayCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Doctrine\Common\Collections\ArrayCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Doctrine\Common\Collections\ArrayCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Doctrine\ORM\PersistentCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Doctrine\ORM\PersistentCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Doctrine\ODM\MongoDB\PersistentCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Doctrine\ODM\MongoDB\PersistentCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Doctrine\ODM\PHPCR\PersistentCollection</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Doctrine\ODM\PHPCR\PersistentCollection</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.array_collection_handler</argument>
          <argument>deserializeCollection</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>DateTime</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>deserializeDateTimeFromjson</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>DateTime</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>deserializeDateTimeFromxml</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>DateTimeImmutable</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>deserializeDateTimeImmutableFromjson</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>DateTimeImmutable</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>deserializeDateTimeImmutableFromxml</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>DateInterval</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>deserializeDateIntervalFromjson</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>DateInterval</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>deserializeDateIntervalFromxml</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>DateTimeInterface</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>deserializeDateTimeFromJson</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>DateTimeInterface</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.datetime_handler</argument>
          <argument>deserializeDateTimeFromXml</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Iterator</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>deserializeIterator</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Iterator</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>deserializeIterator</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>ArrayIterator</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>deserializeIterator</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>ArrayIterator</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>deserializeIterator</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Generator</argument>
        <argument>json</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>deserializeGenerator</argument>
        </argument>
      </call>
      <call method="registerHandler">
        <argument>2</argument>
        <argument>Generator</argument>
        <argument>xml</argument>
        <argument type="collection">
          <argument>jms_serializer.iterator_handler</argument>
          <argument>deserializeGenerator</argument>
        </argument>
      </call>
    </service>
    <service id="jms_serializer.metadata.traceable_file_locator" class="JMS\SerializerBundle\Debug\TraceableFileLocator">
      <tag name="default">jms_serializer.instance</tag>
      <tag name="container.decorator" id="jms_serializer.metadata.file_locator" inner="jms_serializer.metadata.traceable_file_locator.inner"/>
      <argument type="service" id="jms_serializer.metadata.traceable_file_locator.inner"/>
    </service>
    <service id="jms_serializer.metadata.annotation_and_attributes_reader" class="JMS\Serializer\Metadata\Driver\AttributeDriver\AttributeReader">
      <tag name="default">jms_serializer.instance</tag>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="fos_rest.view_handler.default" class="FOS\RestBundle\View\ViewHandler" constructor="create">
      <tag name="kernel.reset" method="reset"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="fos_rest.serializer.jms"/>
      <argument type="service" id="request_stack"/>
      <argument type="collection">
        <argument key="json">false</argument>
        <argument key="xml">false</argument>
      </argument>
      <argument>400</argument>
      <argument>204</argument>
      <argument>false</argument>
      <argument type="collection">
        <argument key="serializeNullStrategy">false</argument>
      </argument>
    </service>
    <service id="fos_rest.view_handler.jsonp" class="FOS\RestBundle\View\JsonpHandler">
      <argument></argument>
    </service>
    <service id="fos_rest.request.param_fetcher" class="FOS\RestBundle\Request\ParamFetcher">
      <argument type="service" id="service_container"/>
      <argument type="service" id="fos_rest.request.param_fetcher.reader"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="validator" on-invalid="null"/>
    </service>
    <service id="fos_rest.request.param_fetcher.reader" class="FOS\RestBundle\Request\ParamReader">
      <argument type="service" id="annotations.cached_reader" on-invalid="null"/>
    </service>
    <service id="fos_rest.serializer.jms" class="FOS\RestBundle\Serializer\JMSSerializerAdapter">
      <argument type="service" id="jms_serializer.serializer"/>
      <argument type="service" id="jms_serializer.configured_serialization_context_factory"/>
      <argument type="service" id="jms_serializer.configured_deserialization_context_factory"/>
    </service>
    <service id="fos_rest.serializer.symfony" class="FOS\RestBundle\Serializer\SymfonySerializerAdapter">
      <argument type="service" id="serializer"/>
    </service>
    <service id="fos_rest.serializer.form_error_normalizer" class="FOS\RestBundle\Serializer\Normalizer\FormErrorNormalizer">
      <tag name="serializer.normalizer" priority="-10"/>
    </service>
    <service id="fos_rest.format_listener" class="FOS\RestBundle\EventListener\FormatListener">
      <tag name="kernel.event_listener" event="kernel.request" method="onKernelRequest" priority="34"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="fos_rest.format_negotiator"/>
    </service>
    <service id="fos_rest.format_negotiator" class="FOS\RestBundle\Negotiation\FormatNegotiator">
      <argument type="service" id="request_stack"/>
      <call method="add">
        <argument type="service" id="fos_rest.request_matcher.2364365e6bb6bfd5cadeda231e59db9139fadac2b673beb794ba3c0068839a899dc3c386"/>
        <argument type="collection">
          <argument key="prefer_extension" type="string">2.0</argument>
          <argument key="fallback_format">json</argument>
          <argument key="priorities" type="collection">
            <argument>json</argument>
            <argument>html</argument>
          </argument>
          <argument key="methods">null</argument>
          <argument key="attributes" type="collection"/>
          <argument key="stop">false</argument>
        </argument>
      </call>
    </service>
    <service id="doctrine.fixtures_load_command" class="Doctrine\Bundle\FixturesBundle\Command\LoadDataFixturesDoctrineCommand">
      <tag name="console.command" command="doctrine:fixtures:load"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="doctrine.fixtures.loader"/>
      <argument type="service" id="doctrine"/>
      <argument type="collection">
        <argument key="default" type="service" id="doctrine.fixtures.purger.orm_purger_factory"/>
      </argument>
      <call method="setName">
        <argument>doctrine:fixtures:load</argument>
      </call>
    </service>
    <service id="doctrine.fixtures.loader" class="Doctrine\Bundle\FixturesBundle\Loader\SymfonyFixturesLoader">
      <argument type="service" id="service_container"/>
      <call method="addFixtures">
        <argument type="collection">
          <argument type="collection">
            <argument key="fixture" type="service" id="App\DataFixtures\AppFixtures"/>
            <argument key="groups" type="collection"/>
          </argument>
        </argument>
      </call>
    </service>
    <service id="doctrine.fixtures.purger.orm_purger_factory" class="Doctrine\Bundle\FixturesBundle\Purger\ORMPurgerFactory">
      <tag name="doctrine.fixtures.purger_factory" alias="default"/>
    </service>
    <service id="security.authorization_checker" class="Symfony\Component\Security\Core\Authorization\AuthorizationChecker">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument>false</argument>
      <argument>false</argument>
    </service>
    <service id="security.token_storage" class="Symfony\Component\Security\Core\Authentication\Token\Storage\UsageTrackingTokenStorage">
      <tag name="kernel.reset" method="disableUsageTracking"/>
      <tag name="kernel.reset" method="setToken"/>
      <argument type="service" id="security.untracked_token_storage"/>
      <argument type="service" id=".service_locator.LcVn9Hr"/>
    </service>
    <service id="security.untracked_token_storage" class="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage"/>
    <service id="security.helper" class="Symfony\Bundle\SecurityBundle\Security">
      <argument type="service" id=".service_locator.LrCXAmX"/>
      <argument type="collection">
        <argument key="login" type="service" id=".service_locator.df1HHDL"/>
        <argument key="api" type="service" id=".service_locator.5y4U6aa"/>
        <argument key="dev">null</argument>
        <argument key="main">null</argument>
      </argument>
    </service>
    <service id="security.user_value_resolver" class="Symfony\Component\Security\Http\Controller\UserValueResolver">
      <tag priority="120" name="Symfony\Component\Security\Http\Controller\UserValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id="security.token_storage"/>
    </service>
    <service id="security.security_token_value_resolver" class="Symfony\Component\Security\Http\Controller\SecurityTokenValueResolver">
      <tag priority="120" name="Symfony\Component\Security\Http\Controller\SecurityTokenValueResolver">controller.argument_value_resolver</tag>
      <argument type="service" id="security.token_storage"/>
    </service>
    <service id="security.authentication.trust_resolver" class="Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver"/>
    <service id="security.authentication.session_strategy" class="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy">
      <argument>migrate</argument>
      <argument type="service" id="security.csrf.token_storage" on-invalid="ignore"/>
    </service>
    <service id="security.authentication.session_strategy_noop" class="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy">
      <argument>none</argument>
    </service>
    <service id="security.user_checker" class="Symfony\Component\Security\Core\User\InMemoryUserChecker"/>
    <service id="security.authentication_utils" class="Symfony\Component\Security\Http\Authentication\AuthenticationUtils">
      <argument type="service" id="request_stack"/>
    </service>
    <service id="security.role_hierarchy" class="Symfony\Component\Security\Core\Role\RoleHierarchy">
      <argument type="collection"/>
    </service>
    <service id="security.access.simple_role_voter" class="Symfony\Component\Security\Core\Authorization\Voter\RoleVoter">
      <tag name="security.voter" priority="245"/>
    </service>
    <service id="security.access.authenticated_voter" class="Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter">
      <tag name="security.voter" priority="250"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
    </service>
    <service id="security.impersonate_url_generator" class="Symfony\Component\Security\Http\Impersonate\ImpersonateUrlGenerator">
      <argument type="service" id="request_stack"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="security.token_storage"/>
    </service>
    <service id="security.firewall.map" class="Symfony\Bundle\SecurityBundle\Security\FirewallMap">
      <argument type="service" id=".service_locator.dsdSIIc"/>
      <argument type="iterator">
        <argument key="security.firewall.map.context.login" type="service" id=".security.request_matcher.0QxrXJt"/>
        <argument key="security.firewall.map.context.api" type="service" id=".security.request_matcher.vhy2oy3"/>
        <argument key="security.firewall.map.context.dev" type="service" id=".security.request_matcher.kLbKLHa"/>
        <argument key="security.firewall.map.context.main">null</argument>
      </argument>
    </service>
    <service id="security.firewall.context" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext" abstract="true">
      <argument type="collection"/>
      <argument type="service" id="security.exception_listener"/>
      <argument type="abstract">LogoutListener</argument>
      <argument type="abstract">FirewallConfig</argument>
    </service>
    <service id="security.firewall.lazy_context" class="Symfony\Bundle\SecurityBundle\Security\LazyFirewallContext" abstract="true">
      <argument type="collection"/>
      <argument type="service" id="security.exception_listener"/>
      <argument type="abstract">LogoutListener</argument>
      <argument type="abstract">FirewallConfig</argument>
      <argument type="service" id="security.untracked_token_storage"/>
    </service>
    <service id="security.firewall.config" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig" abstract="true">
      <argument type="abstract">name</argument>
      <argument type="abstract">user_checker</argument>
      <argument type="abstract">request_matcher</argument>
      <argument>false</argument>
      <argument>false</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="security.logout_url_generator" class="Symfony\Component\Security\Http\Logout\LogoutUrlGenerator">
      <argument type="service" id="request_stack" on-invalid="null"/>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="security.token_storage" on-invalid="null"/>
    </service>
    <service id="security.user.provider.missing" class="Symfony\Component\Security\Core\User\MissingUserProvider" abstract="true">
      <argument type="abstract">firewall</argument>
    </service>
    <service id="security.user.provider.in_memory" class="Symfony\Component\Security\Core\User\InMemoryUserProvider" abstract="true"/>
    <service id="security.user.provider.ldap" class="Symfony\Component\Ldap\Security\LdapUserProvider" abstract="true">
      <argument type="abstract">security.ldap.ldap</argument>
      <argument type="abstract">base dn</argument>
      <argument type="abstract">search dn</argument>
      <argument type="abstract">search password</argument>
      <argument type="abstract">default_roles</argument>
      <argument type="abstract">uid key</argument>
      <argument type="abstract">filter</argument>
      <argument type="abstract">password_attribute</argument>
      <argument type="abstract">extra_fields (email etc)</argument>
    </service>
    <service id="security.user.provider.chain" class="Symfony\Component\Security\Core\User\ChainUserProvider" abstract="true"/>
    <service id="security.http_utils" class="Symfony\Component\Security\Http\HttpUtils">
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument>{^https?://%%s$}i</argument>
      <argument>{^https://%%s$}i</argument>
    </service>
    <service id="security.validator.user_password" class="Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator">
      <tag name="validator.constraint_validator" alias="security.validator.user_password"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.password_hasher_factory"/>
    </service>
    <service id="cache.security_expression_language" class="Symfony\Component\Cache\Adapter\AdapterInterface">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>nNB7W5IqVz</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="controller.is_granted_attribute_listener" class="Symfony\Component\Security\Http\EventListener\IsGrantedAttributeListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="security.authorization_checker"/>
      <argument>null</argument>
    </service>
    <service id="cache.security_is_granted_attribute_expression_language" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <tag name="kernel.reset" method="reset"/>
      <argument>da1D5I6lwL</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/test/Documents/YNOV/symfony/backend/var/cache/dev/pools/system</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="security.password_hasher_factory" class="Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactory">
      <argument type="collection">
        <argument key="App\Entity\User" type="collection">
          <argument key="algorithm">auto</argument>
          <argument key="migrate_from" type="collection"/>
          <argument key="hash_algorithm">sha512</argument>
          <argument key="key_length">40</argument>
          <argument key="ignore_case">false</argument>
          <argument key="encode_as_base64">true</argument>
          <argument key="iterations">5000</argument>
          <argument key="cost">null</argument>
          <argument key="memory_cost">null</argument>
          <argument key="time_cost">null</argument>
        </argument>
        <argument key="Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface" type="collection">
          <argument key="algorithm">auto</argument>
          <argument key="cost">15</argument>
          <argument key="migrate_from" type="collection"/>
          <argument key="hash_algorithm">sha512</argument>
          <argument key="key_length">40</argument>
          <argument key="ignore_case">false</argument>
          <argument key="encode_as_base64">true</argument>
          <argument key="iterations">5000</argument>
          <argument key="memory_cost">null</argument>
          <argument key="time_cost">null</argument>
        </argument>
      </argument>
    </service>
    <service id="security.user_password_hasher" class="Symfony\Component\PasswordHasher\Hasher\UserPasswordHasher">
      <argument type="service" id="security.password_hasher_factory"/>
    </service>
    <service id="security.channel_listener" class="Symfony\Component\Security\Http\Firewall\ChannelListener">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.access_map"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpPort"/>
        </service>
      </argument>
      <argument type="service">
        <service class="int">
          <factory service="router.request_context" method="getHttpsPort"/>
        </service>
      </argument>
    </service>
    <service id="security.access_map" class="Symfony\Component\Security\Http\AccessMap">
      <call method="add">
        <argument type="service" id=".security.request_matcher.6M.XeUm"/>
        <argument type="collection">
          <argument>PUBLIC_ACCESS</argument>
        </argument>
        <argument>null</argument>
      </call>
      <call method="add">
        <argument type="service" id=".security.request_matcher.Bs7fT.P"/>
        <argument type="collection">
          <argument>PUBLIC_ACCESS</argument>
        </argument>
        <argument>null</argument>
      </call>
      <call method="add">
        <argument type="service" id=".security.request_matcher.gjnNpJn"/>
        <argument type="collection">
          <argument>IS_AUTHENTICATED_FULLY</argument>
        </argument>
        <argument>null</argument>
      </call>
    </service>
    <service id="security.context_listener" class="Symfony\Component\Security\Http\Firewall\ContextListener">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.untracked_token_storage"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      </argument>
      <argument type="abstract">Provider Key</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="collection">
        <argument type="service" id="security.token_storage"/>
        <argument>enableUsageTracking</argument>
      </argument>
    </service>
    <service id="security.logout_listener" class="Symfony\Component\Security\Http\Firewall\LogoutListener" abstract="true">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">event dispatcher</argument>
      <argument type="collection"/>
    </service>
    <service id="security.logout.listener.session" class="Symfony\Component\Security\Http\EventListener\SessionLogoutListener" abstract="true"/>
    <service id="security.logout.listener.clear_site_data" class="Symfony\Component\Security\Http\EventListener\ClearSiteDataLogoutListener" abstract="true"/>
    <service id="security.logout.listener.cookie_clearing" class="Symfony\Component\Security\Http\EventListener\CookieClearingLogoutListener" abstract="true"/>
    <service id="security.logout.listener.default" class="Symfony\Component\Security\Http\EventListener\DefaultLogoutListener" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">target url</argument>
    </service>
    <service id="security.authentication.listener.abstract" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument type="service" id="security.authentication.session_strategy"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">Provider-shared Key</argument>
      <argument type="service" id="security.authentication.success_handler"/>
      <argument type="service" id="security.authentication.failure_handler"/>
      <argument type="collection"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
    </service>
    <service id="security.authentication.custom_success_handler" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler" abstract="true">
      <argument type="abstract">The custom success handler service</argument>
      <argument type="collection"/>
      <argument type="abstract">Provider-shared Key</argument>
    </service>
    <service id="security.authentication.success_handler" class="Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="collection"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="security.authentication.custom_failure_handler" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler" abstract="true">
      <argument type="abstract">The custom failure handler service</argument>
      <argument type="collection"/>
    </service>
    <service id="security.authentication.failure_handler" class="Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="collection"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="security.exception_listener" class="Symfony\Component\Security\Http\Firewall\ExceptionListener" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">Provider-shared Key</argument>
      <argument type="service" id="security.authentication.entry_point" on-invalid="null"/>
      <argument>null</argument>
      <argument type="service" id="security.access.denied_handler" on-invalid="null"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.authentication.switchuser_listener" class="Symfony\Component\Security\Http\Firewall\SwitchUserListener" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="abstract">User Provider</argument>
      <argument type="abstract">User Checker</argument>
      <argument type="abstract">Provider Key</argument>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>_switch_user</argument>
      <argument>ROLE_ALLOWED_TO_SWITCH</argument>
      <argument type="service" id="debug.event_dispatcher" on-invalid="null"/>
      <argument>false</argument>
      <argument type="service" id="router.default" on-invalid="null"/>
      <argument type="abstract">Target Route</argument>
    </service>
    <service id="security.access_listener" class="Symfony\Component\Security\Http\Firewall\AccessListener">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="security.access_map"/>
      <argument>false</argument>
    </service>
    <service id="security.firewall.event_dispatcher_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <argument type="collection">
        <argument key="login" type="service_closure" id="debug.security.event_dispatcher.login"/>
        <argument key="api" type="service_closure" id="debug.security.event_dispatcher.api"/>
        <argument key="main" type="service_closure" id="debug.security.event_dispatcher.main"/>
      </argument>
    </service>
    <service id="security.authenticator.manager" class="Symfony\Component\Security\Http\Authentication\AuthenticatorManager" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="abstract">authenticators</argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="abstract">provider key</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
      <argument>true</argument>
      <argument type="abstract">required badges</argument>
    </service>
    <service id="security.authenticator.managers_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <argument type="collection">
        <argument key="login" type="service_closure" id="security.authenticator.manager.login"/>
        <argument key="api" type="service_closure" id="security.authenticator.manager.api"/>
        <argument key="main" type="service_closure" id="security.authenticator.manager.main"/>
      </argument>
    </service>
    <service id="security.user_authenticator" class="Symfony\Bundle\SecurityBundle\Security\UserAuthenticator">
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="security.authenticator.managers_locator"/>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="security.firewall.authenticator" class="Symfony\Component\Security\Http\Firewall\AuthenticatorManagerListener" abstract="true">
      <argument type="abstract">authenticator manager</argument>
    </service>
    <service id="security.listener.check_authenticator_credentials" class="Symfony\Component\Security\Http\EventListener\CheckCredentialsListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="security.password_hasher_factory"/>
    </service>
    <service id="security.listener.user_provider" class="Symfony\Component\Security\Http\EventListener\UserProviderListener">
      <tag name="kernel.event_listener" event="Symfony\Component\Security\Http\Event\CheckPassportEvent" priority="1024" method="checkPassport"/>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
    </service>
    <service id="security.listener.user_provider.abstract" class="Symfony\Component\Security\Http\EventListener\UserProviderListener" abstract="true">
      <argument type="abstract">user provider</argument>
    </service>
    <service id="security.listener.password_migrating" class="Symfony\Component\Security\Http\EventListener\PasswordMigratingListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="security.password_hasher_factory"/>
    </service>
    <service id="security.listener.user_checker" class="Symfony\Component\Security\Http\EventListener\UserCheckerListener" abstract="true">
      <argument type="abstract">user checker</argument>
    </service>
    <service id="security.listener.session" class="Symfony\Component\Security\Http\EventListener\SessionStrategyListener" abstract="true">
      <argument type="service" id="security.authentication.session_strategy"/>
    </service>
    <service id="security.listener.login_throttling" class="Symfony\Component\Security\Http\EventListener\LoginThrottlingListener" abstract="true">
      <argument type="service" id="request_stack"/>
      <argument type="abstract">request rate limiter</argument>
    </service>
    <service id="security.authenticator.http_basic" class="Symfony\Component\Security\Http\Authenticator\HttpBasicAuthenticator" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="abstract">realm name</argument>
      <argument type="abstract">user provider</argument>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="security.authenticator.form_login" class="Symfony\Component\Security\Http\Authenticator\FormLoginAuthenticator" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">user provider</argument>
      <argument type="abstract">authentication success handler</argument>
      <argument type="abstract">authentication failure handler</argument>
      <argument type="abstract">options</argument>
    </service>
    <service id="security.authenticator.json_login" class="Symfony\Component\Security\Http\Authenticator\JsonLoginAuthenticator" abstract="true">
      <argument type="service" id="security.http_utils"/>
      <argument type="abstract">user provider</argument>
      <argument type="abstract">authentication success handler</argument>
      <argument type="abstract">authentication failure handler</argument>
      <argument type="abstract">options</argument>
      <argument type="service" id="property_accessor" on-invalid="null"/>
      <call method="setTranslator">
        <argument type="service" id="translator" on-invalid="ignore"/>
      </call>
    </service>
    <service id="security.authenticator.x509" class="Symfony\Component\Security\Http\Authenticator\X509Authenticator" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="abstract">user provider</argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="abstract">firewall name</argument>
      <argument type="abstract">user key</argument>
      <argument type="abstract">credentials key</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="abstract">credentials user identifier</argument>
    </service>
    <service id="security.authenticator.remote_user" class="Symfony\Component\Security\Http\Authenticator\RemoteUserAuthenticator" abstract="true">
      <tag name="monolog.logger" channel="security"/>
      <argument type="abstract">user provider</argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="abstract">firewall name</argument>
      <argument type="abstract">user key</argument>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="security.access_token_extractor.header" class="Symfony\Component\Security\Http\AccessToken\HeaderAccessTokenExtractor"/>
    <service id="security.access_token_extractor.query_string" class="Symfony\Component\Security\Http\AccessToken\QueryAccessTokenExtractor"/>
    <service id="security.access_token_extractor.request_body" class="Symfony\Component\Security\Http\AccessToken\FormEncodedBodyExtractor"/>
    <service id="security.authenticator.access_token" class="Symfony\Component\Security\Http\Authenticator\AccessTokenAuthenticator" abstract="true">
      <argument type="abstract">access token handler</argument>
      <argument type="abstract">access token extractor</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="security.authenticator.access_token.chain_extractor" class="Symfony\Component\Security\Http\AccessToken\ChainAccessTokenExtractor" abstract="true">
      <argument type="abstract">access token extractors</argument>
    </service>
    <service id="security.access_token_handler.oidc_user_info.http_client" class="Symfony\Contracts\HttpClient\HttpClientInterface" abstract="true">
      <argument type="abstract">http client options</argument>
      <factory service="http_client" method="withOptions"/>
    </service>
    <service id="security.access_token_handler.oidc_user_info" class="Symfony\Component\Security\Http\AccessToken\Oidc\OidcUserInfoTokenHandler" abstract="true">
      <argument type="abstract">http client</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="abstract">claim</argument>
    </service>
    <service id="security.access_token_handler.oidc" class="Symfony\Component\Security\Http\AccessToken\Oidc\OidcTokenHandler" abstract="true">
      <argument type="abstract">signature algorithm</argument>
      <argument type="abstract">signature key</argument>
      <argument type="abstract">audience</argument>
      <argument type="abstract">issuers</argument>
      <argument>sub</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service" id="clock"/>
    </service>
    <service id="security.access_token_handler.oidc.jwk" class="Jose\Component\Core\JWK" constructor="createFromJson" abstract="true">
      <argument type="abstract">signature key</argument>
    </service>
    <service id="security.access_token_handler.oidc.signature" class="Jose\Component\Core\Algorithm" abstract="true">
      <argument type="abstract">signature algorithm</argument>
      <factory class="Symfony\Bundle\SecurityBundle\DependencyInjection\Security\Factory\SignatureAlgorithmFactory" method="create"/>
    </service>
    <service id="security.access_token_handler.oidc.signature.ES256" class="Jose\Component\Signature\Algorithm\ES256">
      <argument>ES256</argument>
      <factory class="Symfony\Bundle\SecurityBundle\DependencyInjection\Security\Factory\SignatureAlgorithmFactory" method="create"/>
    </service>
    <service id="security.access_token_handler.oidc.signature.ES384" class="Jose\Component\Signature\Algorithm\ES384">
      <argument>ES384</argument>
      <factory class="Symfony\Bundle\SecurityBundle\DependencyInjection\Security\Factory\SignatureAlgorithmFactory" method="create"/>
    </service>
    <service id="security.access_token_handler.oidc.signature.ES512" class="Jose\Component\Signature\Algorithm\ES512">
      <argument>ES512</argument>
      <factory class="Symfony\Bundle\SecurityBundle\DependencyInjection\Security\Factory\SignatureAlgorithmFactory" method="create"/>
    </service>
    <service id="data_collector.security" class="Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector">
      <tag name="data_collector" template="@Security/Collector/security.html.twig" id="security" priority="270"/>
      <argument type="service" id="security.untracked_token_storage"/>
      <argument type="service" id="security.role_hierarchy"/>
      <argument type="service" id="security.logout_url_generator"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="debug.security.firewall" on-invalid="null"/>
    </service>
    <service id="debug.security.access.decision_manager" class="Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager">
      <tag name="container.decorator" id="security.access.decision_manager" inner="debug.security.access.decision_manager.inner"/>
      <argument type="service" id="debug.security.access.decision_manager.inner"/>
    </service>
    <service id="debug.security.voter.vote_listener" class="Symfony\Bundle\SecurityBundle\EventListener\VoteListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="debug.security.access.decision_manager"/>
    </service>
    <service id="debug.security.firewall" class="Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="security.firewall.map"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="security.logout_url_generator"/>
    </service>
    <service id="security.command.debug_firewall" class="Symfony\Bundle\SecurityBundle\Command\DebugFirewallCommand">
      <tag name="console.command" command="debug:firewall"/>
      <tag name="container.no_preload"/>
      <argument>%security.firewalls%</argument>
      <argument type="service" id=".service_locator.dsdSIIc"/>
      <argument type="service" id=".service_locator.Oannbdp"/>
      <argument type="collection">
        <argument key="login" type="collection">
          <argument type="service" id="security.authenticator.json_login.login"/>
        </argument>
        <argument key="api" type="collection">
          <argument type="service" id="security.authenticator.jwt.api"/>
        </argument>
        <argument key="main" type="collection"/>
      </argument>
      <argument>false</argument>
      <call method="setName">
        <argument>debug:firewall</argument>
      </call>
      <call method="setDescription">
        <argument>Display information about your security firewall(s)</argument>
      </call>
    </service>
    <service id="security.user.provider.concrete.app_user_provider" class="Symfony\Bridge\Doctrine\Security\User\EntityUserProvider">
      <argument type="service" id="doctrine"/>
      <argument>App\Entity\User</argument>
      <argument>username</argument>
      <argument>null</argument>
    </service>
    <service id="security.firewall.map.config.login" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig">
      <argument>login</argument>
      <argument>security.user_checker</argument>
      <argument>.security.request_matcher.0QxrXJt</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>security.user.provider.concrete.app_user_provider</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection">
        <argument>json_login</argument>
      </argument>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id=".security.request_matcher.lyVOED." class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/api/login</argument>
    </service>
    <service id=".security.request_matcher.0QxrXJt" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.lyVOED."/>
      </argument>
    </service>
    <service id="security.user_checker.chain.login" class="Symfony\Component\Security\Core\User\ChainUserChecker">
      <argument type="tagged_iterator" tag="security.user_checker.login"/>
    </service>
    <service id="security.authenticator.json_login.login" class="Symfony\Component\Security\Http\Authenticator\JsonLoginAuthenticator">
      <argument type="service" id="security.http_utils"/>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      <argument type="service" id="security.authentication.success_handler.login.json_login"/>
      <argument type="service" id="security.authentication.failure_handler.login.json_login"/>
      <argument type="collection">
        <argument key="check_path">/api/login_check</argument>
        <argument key="use_forward">false</argument>
        <argument key="require_previous_session">false</argument>
        <argument key="login_path">/login</argument>
        <argument key="username_path">username</argument>
        <argument key="password_path">password</argument>
      </argument>
      <argument type="service" id="property_accessor" on-invalid="null"/>
    </service>
    <service id="security.authentication.success_handler.login.json_login" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler">
      <argument type="service">
        <service class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler">
          <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
          <argument type="service" id="debug.event_dispatcher"/>
          <argument type="collection"/>
          <argument>true</argument>
        </service>
      </argument>
      <argument type="collection"/>
      <argument>login</argument>
    </service>
    <service id="security.authentication.failure_handler.login.json_login" class="Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler">
      <argument type="service">
        <service class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler">
          <argument type="service" id="debug.event_dispatcher"/>
          <argument>null</argument>
        </service>
      </argument>
      <argument type="collection"/>
    </service>
    <service id="security.authenticator.manager.login" class="Symfony\Component\Security\Http\Authentication\AuthenticatorManager">
      <tag name="monolog.logger" channel="security"/>
      <argument type="collection">
        <argument type="service" id="security.authenticator.json_login.login"/>
      </argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.event_dispatcher.login"/>
      <argument>login</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="debug.security.firewall.authenticator.login" class="Symfony\Component\Security\Http\Authenticator\Debug\TraceableAuthenticatorManagerListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="security.firewall.authenticator.login" inner="debug.security.firewall.authenticator.login.inner"/>
      <argument type="service" id="debug.security.firewall.authenticator.login.inner"/>
    </service>
    <service id="security.listener.user_checker.login" class="Symfony\Component\Security\Http\EventListener\UserCheckerListener">
      <tag name="kernel.event_subscriber" dispatcher="debug.security.event_dispatcher.login"/>
      <argument type="service" id="security.user_checker"/>
    </service>
    <service id="security.exception_listener.login" class="Symfony\Component\Security\Http\Firewall\ExceptionListener">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument>login</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
    </service>
    <service id=".service_locator.df1HHDL" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.authenticator.json_login.login" type="service_closure" id="security.authenticator.json_login.login"/>
      </argument>
    </service>
    <service id="security.firewall.map.context.login" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext">
      <argument type="iterator">
        <argument type="service" id="security.channel_listener"/>
        <argument type="service" id="debug.security.firewall.authenticator.login"/>
        <argument type="service" id="security.access_listener"/>
      </argument>
      <argument type="service" id="security.exception_listener.login"/>
      <argument>null</argument>
      <argument type="service" id="security.firewall.map.config.login"/>
    </service>
    <service id="security.firewall.map.config.api" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig">
      <argument>api</argument>
      <argument>security.user_checker</argument>
      <argument>.security.request_matcher.vhy2oy3</argument>
      <argument>true</argument>
      <argument>true</argument>
      <argument>security.user.provider.concrete.app_user_provider</argument>
      <argument>null</argument>
      <argument>security.authenticator.jwt.api</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection">
        <argument>jwt</argument>
      </argument>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id=".security.request_matcher.AMZT15Y" class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/api</argument>
    </service>
    <service id=".security.request_matcher.vhy2oy3" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.AMZT15Y"/>
      </argument>
    </service>
    <service id="security.user_checker.chain.api" class="Symfony\Component\Security\Core\User\ChainUserChecker">
      <argument type="tagged_iterator" tag="security.user_checker.api"/>
    </service>
    <service id="security.authenticator.jwt.api" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Authenticator\JWTAuthenticator">
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="lexik_jwt_authentication.extractor.chain_extractor"/>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      <argument>null</argument>
    </service>
    <service id="security.authenticator.manager.api" class="Symfony\Component\Security\Http\Authentication\AuthenticatorManager">
      <tag name="monolog.logger" channel="security"/>
      <argument type="collection">
        <argument type="service" id="security.authenticator.jwt.api"/>
      </argument>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.event_dispatcher.api"/>
      <argument>api</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="debug.security.firewall.authenticator.api" class="Symfony\Component\Security\Http\Authenticator\Debug\TraceableAuthenticatorManagerListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="security.firewall.authenticator.api" inner="debug.security.firewall.authenticator.api.inner"/>
      <argument type="service" id="debug.security.firewall.authenticator.api.inner"/>
    </service>
    <service id="security.listener.user_checker.api" class="Symfony\Component\Security\Http\EventListener\UserCheckerListener">
      <tag name="kernel.event_subscriber" dispatcher="debug.security.event_dispatcher.api"/>
      <argument type="service" id="security.user_checker"/>
    </service>
    <service id="security.exception_listener.api" class="Symfony\Component\Security\Http\Firewall\ExceptionListener">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument>api</argument>
      <argument type="service" id="security.authenticator.jwt.api"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
    </service>
    <service id=".service_locator.5y4U6aa" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.authenticator.jwt.api" type="service_closure" id="security.authenticator.jwt.api"/>
      </argument>
    </service>
    <service id="security.firewall.map.context.api" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext">
      <argument type="iterator">
        <argument type="service" id="security.channel_listener"/>
        <argument type="service" id="debug.security.firewall.authenticator.api"/>
        <argument type="service" id="security.access_listener"/>
      </argument>
      <argument type="service" id="security.exception_listener.api"/>
      <argument>null</argument>
      <argument type="service" id="security.firewall.map.config.api"/>
    </service>
    <service id="security.firewall.map.config.dev" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig">
      <argument>dev</argument>
      <argument>security.user_checker</argument>
      <argument>.security.request_matcher.kLbKLHa</argument>
      <argument>false</argument>
      <argument>false</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id=".security.request_matcher.q1UFWmc" class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/(_(profiler|wdt)|css|images|js)/</argument>
    </service>
    <service id=".security.request_matcher.kLbKLHa" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.q1UFWmc"/>
      </argument>
    </service>
    <service id="security.firewall.map.context.dev" class="Symfony\Bundle\SecurityBundle\Security\FirewallContext">
      <argument type="iterator"/>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="security.firewall.map.config.dev"/>
    </service>
    <service id="security.firewall.map.config.main" class="Symfony\Bundle\SecurityBundle\Security\FirewallConfig">
      <argument>main</argument>
      <argument>security.user_checker</argument>
      <argument>null</argument>
      <argument>true</argument>
      <argument>false</argument>
      <argument>security.user.provider.concrete.app_user_provider</argument>
      <argument>main</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="collection"/>
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="security.listener.main.user_provider" class="Symfony\Component\Security\Http\EventListener\UserProviderListener">
      <tag name="kernel.event_listener" dispatcher="debug.security.event_dispatcher.main" event="Symfony\Component\Security\Http\Event\CheckPassportEvent" priority="2048" method="checkPassport"/>
      <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
    </service>
    <service id="security.user_checker.chain.main" class="Symfony\Component\Security\Core\User\ChainUserChecker">
      <argument type="tagged_iterator" tag="security.user_checker.main"/>
    </service>
    <service id="security.context_listener.0" class="Symfony\Component\Security\Http\Firewall\ContextListener">
      <tag name="kernel.event_listener" event="kernel.response" method="onKernelResponse"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="security.untracked_token_storage"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      </argument>
      <argument>main</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service" id="debug.security.event_dispatcher.main"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="collection">
        <argument type="service" id="security.token_storage"/>
        <argument>enableUsageTracking</argument>
      </argument>
    </service>
    <service id="security.listener.session.main" class="Symfony\Component\Security\Http\EventListener\SessionStrategyListener">
      <tag name="kernel.event_subscriber" dispatcher="debug.security.event_dispatcher.main"/>
      <argument type="service" id="security.authentication.session_strategy"/>
    </service>
    <service id="security.authenticator.manager.main" class="Symfony\Component\Security\Http\Authentication\AuthenticatorManager">
      <tag name="monolog.logger" channel="security"/>
      <argument type="collection"/>
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="debug.security.event_dispatcher.main"/>
      <argument>main</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>true</argument>
      <argument>true</argument>
      <argument type="collection"/>
    </service>
    <service id="debug.security.firewall.authenticator.main" class="Symfony\Component\Security\Http\Authenticator\Debug\TraceableAuthenticatorManagerListener">
      <tag name="kernel.reset" method="reset"/>
      <tag name="container.decorator" id="security.firewall.authenticator.main" inner="debug.security.firewall.authenticator.main.inner"/>
      <argument type="service" id="debug.security.firewall.authenticator.main.inner"/>
    </service>
    <service id="security.listener.user_checker.main" class="Symfony\Component\Security\Http\EventListener\UserCheckerListener">
      <tag name="kernel.event_subscriber" dispatcher="debug.security.event_dispatcher.main"/>
      <argument type="service" id="security.user_checker"/>
    </service>
    <service id="security.exception_listener.main" class="Symfony\Component\Security\Http\Firewall\ExceptionListener">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.trust_resolver"/>
      <argument type="service" id="security.http_utils"/>
      <argument>main</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>false</argument>
    </service>
    <service id="security.firewall.map.context.main" class="Symfony\Bundle\SecurityBundle\Security\LazyFirewallContext">
      <argument type="iterator">
        <argument type="service" id="security.channel_listener"/>
        <argument type="service" id="security.context_listener.0"/>
        <argument type="service" id="debug.security.firewall.authenticator.main"/>
        <argument type="service" id="security.access_listener"/>
      </argument>
      <argument type="service" id="security.exception_listener.main"/>
      <argument>null</argument>
      <argument type="service" id="security.firewall.map.config.main"/>
      <argument type="service" id="security.untracked_token_storage"/>
    </service>
    <service id=".service_locator.dsdSIIc" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="security.firewall.map.context.api" type="service_closure" id="security.firewall.map.context.api"/>
        <argument key="security.firewall.map.context.dev" type="service_closure" id="security.firewall.map.context.dev"/>
        <argument key="security.firewall.map.context.login" type="service_closure" id="security.firewall.map.context.login"/>
        <argument key="security.firewall.map.context.main" type="service_closure" id="security.firewall.map.context.main"/>
      </argument>
    </service>
    <service id=".security.request_matcher.EHwIQxq" class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
      <argument>^/api/register</argument>
    </service>
    <service id=".security.request_matcher.6M.XeUm" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.EHwIQxq"/>
      </argument>
    </service>
    <service id=".security.request_matcher.Bs7fT.P" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.lyVOED."/>
      </argument>
    </service>
    <service id=".security.request_matcher.gjnNpJn" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service" id=".security.request_matcher.AMZT15Y"/>
      </argument>
    </service>
    <service id="security.command.user_password_hash" class="Symfony\Component\PasswordHasher\Command\UserPasswordHashCommand">
      <tag name="console.command"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="security.password_hasher_factory"/>
      <argument type="collection">
        <argument>App\Entity\User</argument>
        <argument>Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface</argument>
      </argument>
      <call method="setName">
        <argument>security:hash-password</argument>
      </call>
      <call method="setDescription">
        <argument>Hash a user password</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.security.authentication.provider" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Authentication\Provider\JWTProvider">
      <argument></argument>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>username</argument>
      <call method="setUserIdentityField">
        <argument>username</argument>
      </call>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.0">The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
    </service>
    <service id="lexik_jwt_authentication.security.authentication.listener" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Firewall\JWTListener">
      <argument type="service" id="security.token_storage"/>
      <argument type="service" id="security.authentication.manager"/>
      <argument></argument>
      <call method="setDispatcher">
        <argument type="service" id="debug.event_dispatcher"/>
      </call>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.0">The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
    </service>
    <service id="lexik_jwt_authentication.security.authentication.entry_point" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\EntryPoint\JWTEntryPoint">
      <deprecated package="lexik/jwt-authentication-bundle" version="2.0">The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
    </service>
    <service id="lexik_jwt_authentication.key_loader.openssl" class="Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\OpenSSLKeyLoader">
      <argument></argument>
      <argument></argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
      <argument type="collection"/>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.5">The "%service_id%" service is deprecated since version 2.5 and will be removed in 3.0. Use lexik_jwt_authentication.key_loader.raw instead.</deprecated>
    </service>
    <service id="lexik_jwt_authentication.jws_provider.default" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\DefaultJWSProvider">
      <argument type="service" id="lexik_jwt_authentication.key_loader.raw"/>
      <argument>openssl</argument>
      <argument>RS256</argument>
      <argument>3600</argument>
      <argument>0</argument>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.5">The "%service_id%" is deprecated since version 2.5 and will be removed in 5.0, use "lexik_jwt_authentication.jws_provider.lcobucci" instead.</deprecated>
    </service>
    <service id="lexik_jwt_authentication.jwt_manager" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTManager" public="true">
      <argument type="service" id="lexik_jwt_authentication.encoder.lcobucci"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>username</argument>
      <call method="setUserIdentityField">
        <argument>username</argument>
        <argument>false</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.key_loader.abstract" abstract="true">
      <argument></argument>
      <argument></argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
      <argument type="collection"/>
    </service>
    <service id="lexik_jwt_authentication.key_loader.raw" class="Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\RawKeyLoader">
      <argument>%env(resolve:JWT_SECRET_KEY)%</argument>
      <argument>%env(resolve:JWT_PUBLIC_KEY)%</argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
      <argument type="collection"/>
    </service>
    <service id="lexik_jwt_authentication.encoder.default" class="Lexik\Bundle\JWTAuthenticationBundle\Encoder\DefaultEncoder">
      <argument type="service" id="lexik_jwt_authentication.jws_provider.default"/>
    </service>
    <service id="lexik_jwt_authentication.encoder.lcobucci" class="Lexik\Bundle\JWTAuthenticationBundle\Encoder\LcobucciJWTEncoder">
      <argument type="service" id="lexik_jwt_authentication.jws_provider.lcobucci"/>
    </service>
    <service id="lexik_jwt_authentication.jws_provider.lcobucci" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\LcobucciJWSProvider">
      <argument type="service" id="lexik_jwt_authentication.key_loader.raw"/>
      <argument>openssl</argument>
      <argument>RS256</argument>
      <argument>3600</argument>
      <argument>0</argument>
      <argument>false</argument>
    </service>
    <service id="lexik_jwt_authentication.handler.authentication_success" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="collection"/>
      <argument>true</argument>
    </service>
    <service id="lexik_jwt_authentication.handler.authentication_failure" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler">
      <tag name="monolog.logger" channel="security"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument>null</argument>
    </service>
    <service id="lexik_jwt_authentication.security.jwt_authenticator" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Authenticator\JWTAuthenticator" abstract="true">
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="lexik_jwt_authentication.extractor.chain_extractor"/>
      <argument></argument>
      <argument type="service" id="translator" on-invalid="null"/>
    </service>
    <service id="lexik_jwt_authentication.extractor.chain_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\ChainTokenExtractor">
      <argument type="collection">
        <argument type="service" id="lexik_jwt_authentication.extractor.authorization_header_extractor"/>
      </argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.authorization_header_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor">
      <argument>Bearer</argument>
      <argument>Authorization</argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.query_parameter_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\QueryParameterTokenExtractor">
      <argument></argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.cookie_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\CookieTokenExtractor">
      <argument></argument>
    </service>
    <service id="lexik_jwt_authentication.extractor.split_cookie_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\SplitCookieExtractor">
      <argument></argument>
    </service>
    <service id="lexik_jwt_authentication.security.jwt_user_provider" class="Lexik\Bundle\JWTAuthenticationBundle\Security\User\JWTUserProvider">
      <argument></argument>
    </service>
    <service id=".1_TokenStorage~APMMb_c" class="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage"/>
    <service id="lexik_jwt_authentication.security.guard.jwt_token_authenticator" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator">
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="service" id="debug.event_dispatcher"/>
      <argument type="service" id="lexik_jwt_authentication.extractor.chain_extractor"/>
      <argument type="service" id=".1_TokenStorage~APMMb_c"/>
      <argument>null</argument>
      <deprecated package="lexik/jwt-authentication-bundle" version="2.7">The "%service_id%" service is deprecated and will be removed in 3.0, use the new "jwt" authenticator instead.</deprecated>
    </service>
    <service id="lexik_jwt_authentication.check_config_command" class="Lexik\Bundle\JWTAuthenticationBundle\Command\CheckConfigCommand">
      <tag name="console.command" command="lexik:jwt:check-config"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="lexik_jwt_authentication.key_loader.raw"/>
      <argument>RS256</argument>
      <call method="setName">
        <argument>lexik:jwt:check-config</argument>
      </call>
      <call method="setDescription">
        <argument>Checks that the bundle is properly configured.</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.generate_token_command" class="Lexik\Bundle\JWTAuthenticationBundle\Command\GenerateTokenCommand" public="true">
      <tag name="console.command" command="lexik:jwt:generate-token"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
      <argument type="iterator">
        <argument type="service" id="security.user.provider.concrete.app_user_provider"/>
      </argument>
      <call method="setName">
        <argument>lexik:jwt:generate-token</argument>
      </call>
      <call method="setDescription">
        <argument>Generates a JWT token for a given user.</argument>
      </call>
    </service>
    <service id="lexik_jwt_authentication.generate_keypair_command" class="Lexik\Bundle\JWTAuthenticationBundle\Command\GenerateKeyPairCommand">
      <tag name="console.command" command="lexik:jwt:generate-keypair"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="filesystem"/>
      <argument>%env(resolve:JWT_SECRET_KEY)%</argument>
      <argument>%env(resolve:JWT_PUBLIC_KEY)%</argument>
      <argument>%env(JWT_PASSPHRASE)%</argument>
      <argument>RS256</argument>
      <call method="setName">
        <argument>lexik:jwt:generate-keypair</argument>
      </call>
      <call method="setDescription">
        <argument>Generate public/private keys for use in your application.</argument>
      </call>
    </service>
    <service id="sensio_framework_extra.controller.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="sensio_framework_extra.converter.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="sensio_framework_extra.converter.manager"/>
      <argument>true</argument>
    </service>
    <service id="sensio_framework_extra.converter.manager" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager">
      <call method="add">
        <argument type="service" id="sensio_framework_extra.converter.doctrine.orm"/>
        <argument>0</argument>
        <argument>doctrine.orm</argument>
      </call>
      <call method="add">
        <argument type="service" id="framework_extra_bundle.date_time_param_converter"/>
        <argument>0</argument>
        <argument>datetime</argument>
      </call>
    </service>
    <service id="sensio_framework_extra.converter.doctrine.orm" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter">
      <tag name="request.param_converter" converter="doctrine.orm"/>
      <argument type="service" id="doctrine" on-invalid="ignore"/>
      <argument>null</argument>
    </service>
    <service id="framework_extra_bundle.date_time_param_converter" class="Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter">
      <tag name="request.param_converter" converter="datetime"/>
    </service>
    <service id="sensio_framework_extra.view.guesser" class="Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser">
      <argument type="service" id="kernel"/>
    </service>
    <service id="sensio_framework_extra.cache.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="sensio_framework_extra.security.listener" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="framework_extra_bundle.argument_name_convertor"/>
      <argument>null</argument>
      <argument type="service" id="security.authentication.trust_resolver" on-invalid="null"/>
      <argument type="service" id="security.role_hierarchy" on-invalid="null"/>
      <argument type="service" id="security.token_storage" on-invalid="null"/>
      <argument type="service" id="security.authorization_checker" on-invalid="null"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="framework_extra_bundle.event.is_granted" class="Sensio\Bundle\FrameworkExtraBundle\EventListener\IsGrantedListener">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="framework_extra_bundle.argument_name_convertor"/>
      <argument type="service" id="security.authorization_checker" on-invalid="null"/>
    </service>
    <service id="framework_extra_bundle.argument_name_convertor" class="Sensio\Bundle\FrameworkExtraBundle\Request\ArgumentNameConverter">
      <argument type="service" id="argument_metadata_factory"/>
    </service>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\BookController" class="App\Controller\BookController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\BookController" class="App\Controller\BookController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\BookController" class="App\Controller\BookController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\ConversationController" class="App\Controller\ConversationController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\ConversationController" class="App\Controller\ConversationController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\ConversationController" class="App\Controller\ConversationController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\DashboardController" class="App\Controller\DashboardController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\DashboardController" class="App\Controller\DashboardController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\DashboardController" class="App\Controller\DashboardController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\MessageController" class="App\Controller\MessageController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\MessageController" class="App\Controller\MessageController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\MessageController" class="App\Controller\MessageController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\ProjectController" class="App\Controller\ProjectController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\ProjectController" class="App\Controller\ProjectController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\ProjectController" class="App\Controller\ProjectController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\PublicationController" class="App\Controller\PublicationController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\PublicationController" class="App\Controller\PublicationController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\PublicationController" class="App\Controller\PublicationController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\RegistrationController" class="App\Controller\RegistrationController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\RegistrationController" class="App\Controller\RegistrationController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\RegistrationController" class="App\Controller\RegistrationController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Contracts\Service\ServiceSubscriberInterface.0.App\Controller\StripeController" class="App\Controller\StripeController" autowire="true" abstract="true"/>
    <service id=".instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\StripeController" class="App\Controller\StripeController" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Controller\StripeController" class="App\Controller\StripeController" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\FixturesBundle\ORMFixtureInterface.0.App\DataFixtures\AppFixtures" class="App\DataFixtures\AppFixtures" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\DataFixtures\AppFixtures" class="App\DataFixtures\AppFixtures" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Symfony\Component\EventDispatcher\EventSubscriberInterface.0.App\EventSubscriber\ExceptionSubscriber" class="App\EventSubscriber\ExceptionSubscriber" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\EventSubscriber\ExceptionSubscriber" class="App\EventSubscriber\ExceptionSubscriber" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\BookRepository" class="App\Repository\BookRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\BookRepository" class="App\Repository\BookRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\CategoryRepository" class="App\Repository\CategoryRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\CategoryRepository" class="App\Repository\CategoryRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ConversationRepository" class="App\Repository\ConversationRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ConversationRepository" class="App\Repository\ConversationRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\MessageRepository" class="App\Repository\MessageRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\MessageRepository" class="App\Repository\MessageRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\ProjectRepository" class="App\Repository\ProjectRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\ProjectRepository" class="App\Repository\ProjectRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\PublicationRepository" class="App\Repository\PublicationRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\PublicationRepository" class="App\Repository\PublicationRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".instanceof.Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepositoryInterface.0.App\Repository\UserRepository" class="App\Repository\UserRepository" autowire="true" abstract="true"/>
    <service id=".abstract.instanceof.App\Repository\UserRepository" class="App\Repository\UserRepository" autowire="true" autoconfigure="true" abstract="true"/>
    <service id=".service_locator.7nzbL4K" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="base64" type="service_closure" id="container.env_var_processor"/>
        <argument key="bool" type="service_closure" id="container.env_var_processor"/>
        <argument key="const" type="service_closure" id="container.env_var_processor"/>
        <argument key="csv" type="service_closure" id="container.env_var_processor"/>
        <argument key="default" type="service_closure" id="container.env_var_processor"/>
        <argument key="enum" type="service_closure" id="container.env_var_processor"/>
        <argument key="file" type="service_closure" id="container.env_var_processor"/>
        <argument key="float" type="service_closure" id="container.env_var_processor"/>
        <argument key="int" type="service_closure" id="container.env_var_processor"/>
        <argument key="json" type="service_closure" id="container.env_var_processor"/>
        <argument key="key" type="service_closure" id="container.env_var_processor"/>
        <argument key="not" type="service_closure" id="container.env_var_processor"/>
        <argument key="query_string" type="service_closure" id="container.env_var_processor"/>
        <argument key="require" type="service_closure" id="container.env_var_processor"/>
        <argument key="resolve" type="service_closure" id="container.env_var_processor"/>
        <argument key="shuffle" type="service_closure" id="container.env_var_processor"/>
        <argument key="string" type="service_closure" id="container.env_var_processor"/>
        <argument key="trim" type="service_closure" id="container.env_var_processor"/>
        <argument key="url" type="service_closure" id="container.env_var_processor"/>
      </argument>
    </service>
    <service id="maker.auto_command.make_auth" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:auth" description="Creates a Guard authenticator of different flavors"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_authenticator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:auth</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a Guard authenticator of different flavors</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_command" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:command" description="Creates a new console command class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_command"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:command</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new console command class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_component" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:twig-component" description="Creates a twig (or live) component"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_twig_component"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:twig-component</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a twig (or live) component</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:controller" description="Creates a new controller class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:controller</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new controller class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_crud" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:crud" description="Creates CRUD for Doctrine entity class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_crud"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:crud</argument>
      </call>
      <call method="setDescription">
        <argument>Creates CRUD for Doctrine entity class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_docker_database" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:docker:database" description="Adds a database container to your docker-compose.yaml file"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_docker_database"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:docker:database</argument>
      </call>
      <call method="setDescription">
        <argument>Adds a database container to your docker-compose.yaml file</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_entity" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:entity" description="Creates or updates a Doctrine entity class, and optionally an API Platform resource"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_entity"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:entity</argument>
      </call>
      <call method="setDescription">
        <argument>Creates or updates a Doctrine entity class, and optionally an API Platform resource</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_fixtures" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:fixtures" description="Creates a new class to load Doctrine fixtures"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_fixtures"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:fixtures</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new class to load Doctrine fixtures</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:form" description="Creates a new form class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:form</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new form class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_message" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:message" description="Creates a new message and handler"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_message"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:message</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new message and handler</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_messenger_middleware" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:messenger-middleware" description="Creates a new messenger middleware"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_messenger_middleware"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:messenger-middleware</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new messenger middleware</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_registration_form" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:registration-form" description="Creates a new registration form system"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_registration_form"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:registration-form</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new registration form system</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_reset_password" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:reset-password" description="Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_reset_password"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:reset-password</argument>
      </call>
      <call method="setDescription">
        <argument>Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_encoder" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:serializer:encoder" description="Creates a new serializer encoder class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_serializer_encoder"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:serializer:encoder</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new serializer encoder class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_serializer_normalizer" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:serializer:normalizer" description="Creates a new serializer normalizer class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_serializer_normalizer"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:serializer:normalizer</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new serializer normalizer class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_subscriber" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:subscriber" description="Creates a new event subscriber class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_subscriber"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:subscriber</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new event subscriber class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_twig_extension" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:twig-extension" description="Creates a new Twig extension with its runtime class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_twig_extension"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:twig-extension</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new Twig extension with its runtime class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_test" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:test" description="Creates a new test class"/>
      <tag name="console.command" command="make:unit-test" description="Deprecated alias of &quot;make:test&quot;"/>
      <tag name="console.command" command="make:functional-test" description="Deprecated alias of &quot;make:test&quot;"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_test"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:test</argument>
      </call>
      <call method="setAliases">
        <argument type="collection">
          <argument>make:unit-test</argument>
          <argument>make:functional-test</argument>
        </argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new test class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_validator" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:validator" description="Creates a new validator and constraint class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_validator"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:validator</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new validator and constraint class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_voter" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:voter" description="Creates a new security voter class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_voter"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:voter</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new security voter class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_user" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:user" description="Creates a new security user class"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_user"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:user</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new security user class</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_migration" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:migration" description="Creates a new migration based on database changes"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_migration"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:migration</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new migration based on database changes</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_stimulus_controller" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:stimulus-controller" description="Creates a new Stimulus controller"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_stimulus_controller"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:stimulus-controller</argument>
      </call>
      <call method="setDescription">
        <argument>Creates a new Stimulus controller</argument>
      </call>
    </service>
    <service id="maker.auto_command.make_security_form_login" class="Symfony\Bundle\MakerBundle\Command\MakerCommand">
      <tag name="console.command" command="make:security:form-login" description="Generate the code needed for the form_login authenticator"/>
      <tag name="container.no_preload"/>
      <argument type="service" id="maker.maker.make_form_login"/>
      <argument type="service" id="maker.file_manager"/>
      <argument type="service" id="maker.generator"/>
      <argument type="service" id="maker.template_linter"/>
      <call method="setName">
        <argument>make:security:form-login</argument>
      </call>
      <call method="setDescription">
        <argument>Generate the code needed for the form_login authenticator</argument>
      </call>
    </service>
    <service id=".service_locator.y4_Zrx." class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="loader" type="service_closure" id=".errored..service_locator.y4_Zrx..Symfony\Component\Config\Loader\LoaderInterface"/>
      </argument>
    </service>
    <service id=".service_locator.msKV3CX" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="bookRepository" type="service_closure" id="App\Repository\BookRepository"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.2PcGlAo" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="book" type="service_closure" id=".errored..service_locator.2PcGlAo.App\Entity\Book"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.hZCPxtQ" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="categoryRepository" type="service_closure" id="App\Repository\CategoryRepository"/>
        <argument key="entityManager" type="service_closure" id="doctrine.orm.default_entity_manager"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.G7dnWNX" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="book" type="service_closure" id=".errored..service_locator.G7dnWNX.App\Entity\Book"/>
        <argument key="bookRepository" type="service_closure" id="App\Repository\BookRepository"/>
        <argument key="entityManager" type="service_closure" id="doctrine.orm.default_entity_manager"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.o6sN0hZ" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="doctrine" type="service_closure" id="doctrine"/>
      </argument>
    </service>
    <service id=".service_locator.eaWM4aR" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="circularReferenceHandler" type="service_closure" id="App\Serializer\CircularReferenceHandler"/>
        <argument key="conversationRepository" type="service_closure" id="App\Repository\ConversationRepository"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.wi2Ekjr" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="conversationRepository" type="service_closure" id="App\Repository\ConversationRepository"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.OCnFGBG" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="conversation" type="service_closure" id=".errored..service_locator.OCnFGBG.App\Entity\Conversation"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.iYW9vWf" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="doctrine" type="service_closure" id="doctrine"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.VIKQ0FW" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="publicationRepository" type="service_closure" id="App\Repository\PublicationRepository"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.YFlO83_" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="publication" type="service_closure" id=".errored..service_locator.YFlO83_.App\Entity\Publication"/>
        <argument key="publicationRepository" type="service_closure" id="App\Repository\PublicationRepository"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.ljsIQCe" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="bookRepository" type="service_closure" id="App\Repository\BookRepository"/>
        <argument key="entityManager" type="service_closure" id="doctrine.orm.default_entity_manager"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
        <argument key="userRepository" type="service_closure" id="App\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.LWeIwFr" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="entityManager" type="service_closure" id="doctrine.orm.default_entity_manager"/>
        <argument key="publication" type="service_closure" id=".errored..service_locator.LWeIwFr.App\Entity\Publication"/>
        <argument key="publicationRepository" type="service_closure" id="App\Repository\PublicationRepository"/>
        <argument key="serializer" type="service_closure" id="serializer"/>
      </argument>
    </service>
    <service id=".service_locator.n.7.wCW" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="entityManager" type="service_closure" id="doctrine.orm.default_entity_manager"/>
        <argument key="publication" type="service_closure" id=".errored..service_locator.n.7.wCW.App\Entity\Publication"/>
      </argument>
    </service>
    <service id=".service_locator.dTaHD7m" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="doctrine" type="service_closure" id="doctrine"/>
        <argument key="passwordHasher" type="service_closure" id="security.user_password_hasher"/>
      </argument>
    </service>
    <service id=".service_locator.2MdOtvo" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Controller\BookController::addBook" type="service_closure" id=".service_locator.hZCPxtQ"/>
        <argument key="App\Controller\BookController::deleteBook" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\BookController::getAll" type="service_closure" id=".service_locator.msKV3CX"/>
        <argument key="App\Controller\BookController::getBook" type="service_closure" id=".service_locator.2PcGlAo"/>
        <argument key="App\Controller\BookController::updateBook" type="service_closure" id=".service_locator.G7dnWNX"/>
        <argument key="App\Controller\ConversationController::create" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\ConversationController::findConversations" type="service_closure" id=".service_locator.wi2Ekjr"/>
        <argument key="App\Controller\ConversationController::index" type="service_closure" id=".service_locator.eaWM4aR"/>
        <argument key="App\Controller\MessageController::create" type="service_closure" id=".service_locator.iYW9vWf"/>
        <argument key="App\Controller\MessageController::get" type="service_closure" id=".service_locator.OCnFGBG"/>
        <argument key="App\Controller\ProjectController::create" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\ProjectController::delete" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\ProjectController::index" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\ProjectController::show" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\PublicationController::addPublication" type="service_closure" id=".service_locator.ljsIQCe"/>
        <argument key="App\Controller\PublicationController::deletePublication" type="service_closure" id=".service_locator.n.7.wCW"/>
        <argument key="App\Controller\PublicationController::getAll" type="service_closure" id=".service_locator.VIKQ0FW"/>
        <argument key="App\Controller\PublicationController::getPublication" type="service_closure" id=".service_locator.YFlO83_"/>
        <argument key="App\Controller\PublicationController::getPublicationsByUser" type="service_closure" id=".service_locator.VIKQ0FW"/>
        <argument key="App\Controller\PublicationController::updatePublication" type="service_closure" id=".service_locator.LWeIwFr"/>
        <argument key="App\Controller\RegistrationController::index" type="service_closure" id=".service_locator.dTaHD7m"/>
        <argument key="App\Kernel::loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="App\Kernel::registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel::loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel::registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="App\Controller\BookController:addBook" type="service_closure" id=".service_locator.hZCPxtQ"/>
        <argument key="App\Controller\BookController:deleteBook" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\BookController:getAll" type="service_closure" id=".service_locator.msKV3CX"/>
        <argument key="App\Controller\BookController:getBook" type="service_closure" id=".service_locator.2PcGlAo"/>
        <argument key="App\Controller\BookController:updateBook" type="service_closure" id=".service_locator.G7dnWNX"/>
        <argument key="App\Controller\ConversationController:create" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\ConversationController:findConversations" type="service_closure" id=".service_locator.wi2Ekjr"/>
        <argument key="App\Controller\ConversationController:index" type="service_closure" id=".service_locator.eaWM4aR"/>
        <argument key="App\Controller\MessageController:create" type="service_closure" id=".service_locator.iYW9vWf"/>
        <argument key="App\Controller\MessageController:get" type="service_closure" id=".service_locator.OCnFGBG"/>
        <argument key="App\Controller\ProjectController:create" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\ProjectController:delete" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\ProjectController:index" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\ProjectController:show" type="service_closure" id=".service_locator.o6sN0hZ"/>
        <argument key="App\Controller\PublicationController:addPublication" type="service_closure" id=".service_locator.ljsIQCe"/>
        <argument key="App\Controller\PublicationController:deletePublication" type="service_closure" id=".service_locator.n.7.wCW"/>
        <argument key="App\Controller\PublicationController:getAll" type="service_closure" id=".service_locator.VIKQ0FW"/>
        <argument key="App\Controller\PublicationController:getPublication" type="service_closure" id=".service_locator.YFlO83_"/>
        <argument key="App\Controller\PublicationController:getPublicationsByUser" type="service_closure" id=".service_locator.VIKQ0FW"/>
        <argument key="App\Controller\PublicationController:updatePublication" type="service_closure" id=".service_locator.LWeIwFr"/>
        <argument key="App\Controller\RegistrationController:index" type="service_closure" id=".service_locator.dTaHD7m"/>
        <argument key="kernel:loadRoutes" type="service_closure" id=".service_locator.y4_Zrx."/>
        <argument key="kernel:registerContainerConfiguration" type="service_closure" id=".service_locator.y4_Zrx."/>
      </argument>
    </service>
    <service id=".service_locator.F9PKc.7" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator" type="service_closure" id="doctrine.orm.validator.unique"/>
        <argument key="Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator" type="service_closure" id="security.validator.user_password"/>
        <argument key="Symfony\Component\Validator\Constraints\EmailValidator" type="service_closure" id="validator.email"/>
        <argument key="Symfony\Component\Validator\Constraints\ExpressionValidator" type="service_closure" id="validator.expression"/>
        <argument key="Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator" type="service_closure" id="validator.no_suspicious_characters"/>
        <argument key="Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator" type="service_closure" id="validator.not_compromised_password"/>
        <argument key="Symfony\Component\Validator\Constraints\WhenValidator" type="service_closure" id="validator.when"/>
        <argument key="doctrine.orm.validator.unique" type="service_closure" id="doctrine.orm.validator.unique"/>
        <argument key="security.validator.user_password" type="service_closure" id="security.validator.user_password"/>
        <argument key="validator.expression" type="service_closure" id="validator.expression"/>
      </argument>
    </service>
    <service id=".service_locator.lLv4pWF" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service_closure" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id=".debug.value_resolver.security.user_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="security.user_value_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.security.security_token_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="security.security_token_value_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.doctrine.orm.entity_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="doctrine.orm.entity_value_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.backed_enum_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.backed_enum_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.datetime" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.datetime"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.request_attribute"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.request"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.session"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.service"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.default"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.variadic"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.not_tagged_controller" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.not_tagged_controller"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.request_payload" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.request_payload"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".debug.value_resolver.argument_resolver.query_parameter_value_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver">
      <argument type="service" id="argument_resolver.query_parameter_value_resolver"/>
      <argument type="service" id="debug.stopwatch"/>
    </service>
    <service id=".service_locator.VHsrTPK" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="doctrine.orm.default_listeners.attach_entity_listeners" type="service_closure" id="doctrine.orm.default_listeners.attach_entity_listeners"/>
        <argument key="doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener" type="service_closure" id="doctrine.orm.listeners.doctrine_dbal_cache_adapter_schema_listener"/>
        <argument key="doctrine.orm.listeners.doctrine_token_provider_schema_listener" type="service_closure" id="doctrine.orm.listeners.doctrine_token_provider_schema_listener"/>
        <argument key="doctrine.orm.listeners.lock_store_schema_listener" type="service_closure" id="doctrine.orm.listeners.lock_store_schema_listener"/>
        <argument key="doctrine.orm.listeners.pdo_session_handler_schema_listener" type="service_closure" id="doctrine.orm.listeners.pdo_session_handler_schema_listener"/>
      </argument>
    </service>
    <service id=".service_locator.yQHUXzX" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="App\Repository\BookRepository" type="service_closure" id="App\Repository\BookRepository"/>
        <argument key="App\Repository\CategoryRepository" type="service_closure" id="App\Repository\CategoryRepository"/>
        <argument key="App\Repository\ConversationRepository" type="service_closure" id="App\Repository\ConversationRepository"/>
        <argument key="App\Repository\MessageRepository" type="service_closure" id="App\Repository\MessageRepository"/>
        <argument key="App\Repository\ProjectRepository" type="service_closure" id="App\Repository\ProjectRepository"/>
        <argument key="App\Repository\PublicationRepository" type="service_closure" id="App\Repository\PublicationRepository"/>
        <argument key="App\Repository\UserRepository" type="service_closure" id="App\Repository\UserRepository"/>
      </argument>
    </service>
    <service id=".service_locator.KLVvNIq" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="doctrine.ulid_generator" type="service_closure" id="doctrine.ulid_generator"/>
        <argument key="doctrine.uuid_generator" type="service_closure" id="doctrine.uuid_generator"/>
      </argument>
    </service>
    <service id=".doctrine.orm.default_metadata_driver" class="Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver">
      <tag name="container.decorator" id="doctrine.orm.default_metadata_driver" inner=".doctrine.orm.default_metadata_driver.inner"/>
      <argument type="service" id=".doctrine.orm.default_metadata_driver.inner"/>
      <argument type="service" id=".service_locator.KLVvNIq"/>
    </service>
    <service id="doctrine.dbal.debug_middleware.default" class="Doctrine\Bundle\DoctrineBundle\Middleware\DebugMiddleware">
      <argument type="service" id="doctrine.debug_data_holder"/>
      <argument type="service" id="debug.stopwatch" on-invalid="null"/>
      <call method="setConnectionName">
        <argument>default</argument>
      </call>
    </service>
    <service id="fos_rest.request_matcher.2364365e6bb6bfd5cadeda231e59db9139fadac2b673beb794ba3c0068839a899dc3c386" class="Symfony\Component\HttpFoundation\ChainRequestMatcher">
      <argument type="collection">
        <argument type="service">
          <service class="Symfony\Component\HttpFoundation\RequestMatcher\PathRequestMatcher">
            <argument>^/api</argument>
          </service>
        </argument>
      </argument>
    </service>
    <service id="fos_rest.serializer.form_error_handler" class="FOS\RestBundle\Serializer\Normalizer\FormErrorHandler">
      <tag name="jms_serializer.subscribing_handler"/>
      <tag name="default">jms_serializer.instance</tag>
      <tag name="container.decorator" id="jms_serializer.form_error_handler" inner="fos_rest.serializer.form_error_handler.inner"/>
      <argument type="service" id="fos_rest.serializer.form_error_handler.inner"/>
    </service>
    <service id=".debug.security.voter.security.access.authenticated_voter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="security.access.authenticated_voter"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id=".debug.security.voter.security.access.simple_role_voter" class="Symfony\Component\Security\Core\Authorization\Voter\TraceableVoter">
      <argument type="service" id="security.access.simple_role_voter"/>
      <argument type="service" id="debug.event_dispatcher"/>
    </service>
    <service id="security.listener.csrf_protection" class="Symfony\Component\Security\Http\EventListener\CsrfProtectionListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="security.csrf.token_manager"/>
    </service>
    <service id="security.logout.listener.csrf_token_clearing" class="Symfony\Component\Security\Http\EventListener\CsrfTokenClearingLogoutListener">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="security.csrf.token_storage"/>
    </service>
    <service id="security.ldap_locator" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <argument type="collection"/>
    </service>
    <service id="logger" class="Symfony\Component\HttpKernel\Log\Logger">
      <argument>null</argument>
      <argument>null</argument>
      <argument>null</argument>
      <argument type="service" id="request_stack"/>
    </service>
    <service id="debug.security.event_dispatcher.login" class="Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher">
      <tag name="security.event_dispatcher.login">event_dispatcher.dispatcher</tag>
      <tag name="container.decorator" id="security.event_dispatcher.login" inner="debug.security.event_dispatcher.login.inner"/>
      <argument type="service" id="debug.security.event_dispatcher.login.inner"/>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.login"/>
          <argument>preCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>security.authentication.success</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.login"/>
          <argument>postCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>1024</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.check_authenticator_credentials"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LoginSuccessEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.password_migrating"/>
          <argument>onLoginSuccess</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.csrf_protection"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>512</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LogoutEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.logout.listener.csrf_token_clearing"/>
          <argument>onLogout</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="debug.security.event_dispatcher.api" class="Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher">
      <tag name="security.event_dispatcher.api">event_dispatcher.dispatcher</tag>
      <tag name="container.decorator" id="security.event_dispatcher.api" inner="debug.security.event_dispatcher.api.inner"/>
      <argument type="service" id="debug.security.event_dispatcher.api.inner"/>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.api"/>
          <argument>preCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>security.authentication.success</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.api"/>
          <argument>postCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>1024</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.check_authenticator_credentials"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LoginSuccessEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.password_migrating"/>
          <argument>onLoginSuccess</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.csrf_protection"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>512</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LogoutEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.logout.listener.csrf_token_clearing"/>
          <argument>onLogout</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="debug.security.event_dispatcher.main" class="Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher">
      <tag name="security.event_dispatcher.main">event_dispatcher.dispatcher</tag>
      <tag name="container.decorator" id="security.event_dispatcher.main" inner="debug.security.event_dispatcher.main.inner"/>
      <argument type="service" id="debug.security.event_dispatcher.main.inner"/>
      <argument type="service" id="debug.stopwatch"/>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument type="service" id="request_stack" on-invalid="null"/>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.main.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LoginSuccessEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.session.main"/>
          <argument>onSuccessfulLogin</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.main"/>
          <argument>preCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>security.authentication.success</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_checker.main"/>
          <argument>postCheckCredentials</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.user_provider"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>1024</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.check_authenticator_credentials"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LoginSuccessEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.password_migrating"/>
          <argument>onLoginSuccess</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\CheckPassportEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.listener.csrf_protection"/>
          <argument>checkPassport</argument>
        </argument>
        <argument>512</argument>
      </call>
      <call method="addListener">
        <argument>Symfony\Component\Security\Http\Event\LogoutEvent</argument>
        <argument type="collection">
          <argument type="service_closure" id="security.logout.listener.csrf_token_clearing"/>
          <argument>onLogout</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id=".service_locator.O2p6Lk7" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="http_kernel" type="service_closure" id="http_kernel" on-invalid="ignore"/>
        <argument key="parameter_bag" type="service_closure" id="parameter_bag" on-invalid="ignore"/>
        <argument key="request_stack" type="service_closure" id="request_stack" on-invalid="ignore"/>
        <argument key="router" type="service_closure" id="router.default" on-invalid="ignore"/>
        <argument key="security.authorization_checker" type="service_closure" id="security.authorization_checker" on-invalid="ignore"/>
        <argument key="security.csrf.token_manager" type="service_closure" id="security.csrf.token_manager" on-invalid="ignore"/>
        <argument key="security.token_storage" type="service_closure" id="security.token_storage" on-invalid="ignore"/>
        <argument key="serializer" type="service_closure" id="serializer" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\BookController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\BookController"/>
      <argument>App\Controller\BookController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\ConversationController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\ConversationController"/>
      <argument>App\Controller\ConversationController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\DashboardController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\DashboardController"/>
      <argument>App\Controller\DashboardController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\MessageController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\MessageController"/>
      <argument>App\Controller\MessageController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\ProjectController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\ProjectController"/>
      <argument>App\Controller\ProjectController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\PublicationController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\PublicationController"/>
      <argument>App\Controller\PublicationController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\RegistrationController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\RegistrationController"/>
      <argument>App\Controller\RegistrationController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.O2p6Lk7.App\Controller\StripeController" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="App\Controller\StripeController"/>
      <argument>App\Controller\StripeController</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.O2p6Lk7" method="withContext"/>
    </service>
    <service id=".service_locator.PvoQzFT" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="routing.loader" type="service_closure" id="routing.loader"/>
      </argument>
    </service>
    <service id=".service_locator.PvoQzFT.router.default" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.default"/>
      <argument>router.default</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.PvoQzFT" method="withContext"/>
    </service>
    <service id=".service_locator.cUcW89y" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service_closure" id="router.default"/>
      </argument>
    </service>
    <service id=".service_locator.cUcW89y.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator_context" id="router.cache_warmer"/>
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service=".service_locator.cUcW89y" method="withContext"/>
    </service>
    <service id=".service_locator.oR77BOj" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="Symfony\Bridge\Doctrine\ArgumentResolver\EntityValueResolver" type="service_closure" id=".debug.value_resolver.doctrine.orm.entity_value_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.backed_enum_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.datetime"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.default"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.query_parameter_value_resolver"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.request_attribute"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.request_payload"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.request"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.service"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.session"/>
        <argument key="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" type="service_closure" id=".debug.value_resolver.argument_resolver.variadic"/>
        <argument key="Symfony\Component\Security\Http\Controller\SecurityTokenValueResolver" type="service_closure" id=".debug.value_resolver.security.security_token_value_resolver"/>
        <argument key="Symfony\Component\Security\Http\Controller\UserValueResolver" type="service_closure" id=".debug.value_resolver.security.user_value_resolver"/>
        <argument key="argument_resolver.not_tagged_controller" type="service_closure" id=".debug.value_resolver.argument_resolver.not_tagged_controller"/>
      </argument>
    </service>
    <service id=".service_locator.XXv1IfR" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="reverse_container" type="service_closure" id="reverse_container" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id=".service_locator.Xbsa8iG" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id=".service_locator.NBUFN6A" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="cache.app" type="service_closure" id="cache.app.taggable"/>
      </argument>
    </service>
    <service id=".service_locator.Oannbdp" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="event_dispatcher" type="service_closure" id="debug.event_dispatcher"/>
        <argument key="security.event_dispatcher.api" type="service_closure" id="debug.security.event_dispatcher.api"/>
        <argument key="security.event_dispatcher.login" type="service_closure" id="debug.security.event_dispatcher.login"/>
        <argument key="security.event_dispatcher.main" type="service_closure" id="debug.security.event_dispatcher.main"/>
      </argument>
    </service>
    <service id=".service_locator..6hZeC_" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="kernel" type="service_closure" id="kernel"/>
      </argument>
    </service>
    <service id=".service_locator.cXsfP3P" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="logger" type="service_closure" id="logger" on-invalid="ignore"/>
        <argument key="session_factory" type="service_closure" id="session.factory" on-invalid="ignore"/>
      </argument>
    </service>
    <service id=".service_locator.LcVn9Hr" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="request_stack" type="service_closure" id="request_stack"/>
      </argument>
    </service>
    <service id=".service_locator.LrCXAmX" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="request_stack" type="service_closure" id="request_stack"/>
        <argument key="security.authenticator.managers_locator" type="service_closure" id="security.authenticator.managers_locator" on-invalid="ignore"/>
        <argument key="security.authorization_checker" type="service_closure" id="security.authorization_checker"/>
        <argument key="security.csrf.token_manager" type="service_closure" id="security.csrf.token_manager" on-invalid="ignore"/>
        <argument key="security.firewall.event_dispatcher_locator" type="service_closure" id="security.firewall.event_dispatcher_locator"/>
        <argument key="security.firewall.map" type="service_closure" id="security.firewall.map"/>
        <argument key="security.token_storage" type="service_closure" id="security.token_storage"/>
        <argument key="security.user_checker" type="service_closure" id="security.user_checker"/>
      </argument>
    </service>
    <service id="debug.event_dispatcher.inner" class="Symfony\Component\EventDispatcher\EventDispatcher"/>
    <service id="debug.controller_resolver.inner" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver">
      <argument type="service" id="service_container"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
    </service>
    <service id="debug.argument_resolver.inner" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id=".debug.value_resolver.security.user_value_resolver"/>
        <argument type="service" id=".debug.value_resolver.security.security_token_value_resolver"/>
        <argument type="service" id=".debug.value_resolver.doctrine.orm.entity_value_resolver"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.backed_enum_resolver"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.datetime"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.request_attribute"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.request"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.session"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.service"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.default"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.variadic"/>
        <argument type="service" id=".debug.value_resolver.argument_resolver.not_tagged_controller"/>
      </argument>
      <argument type="service" id=".service_locator.oR77BOj"/>
    </service>
    <service id="doctrine.migrations.container_aware_migrations_factory.inner" class="Doctrine\Migrations\Version\MigrationFactory">
      <factory service="doctrine.migrations.dependency_factory" method="getMigrationFactory"/>
    </service>
    <service id="jms_serializer.metadata.doctrine_type_driver.inner" class="Metadata\Driver\DriverChain">
      <argument type="collection">
        <argument type="service" id="jms_serializer.metadata.yaml_driver"/>
        <argument type="service" id="jms_serializer.metadata.xml_driver"/>
        <argument type="service" id="jms_serializer.metadata.annotation_driver"/>
      </argument>
    </service>
    <service id="jms_serializer.doctrine_object_constructor.inner" class="JMS\Serializer\Construction\UnserializeObjectConstructor"/>
    <service id="debug.security.access.decision_manager.inner" class="Symfony\Component\Security\Core\Authorization\AccessDecisionManager">
      <argument type="iterator">
        <argument type="service" id=".debug.security.voter.security.access.authenticated_voter"/>
        <argument type="service" id=".debug.security.voter.security.access.simple_role_voter"/>
      </argument>
      <argument type="service">
        <service class="Symfony\Component\Security\Core\Authorization\Strategy\AffirmativeStrategy">
          <argument>false</argument>
        </service>
      </argument>
    </service>
    <service id="debug.security.firewall.authenticator.login.inner" class="Symfony\Component\Security\Http\Firewall\AuthenticatorManagerListener">
      <argument type="service" id="security.authenticator.manager.login"/>
    </service>
    <service id="debug.security.firewall.authenticator.api.inner" class="Symfony\Component\Security\Http\Firewall\AuthenticatorManagerListener">
      <argument type="service" id="security.authenticator.manager.api"/>
    </service>
    <service id="debug.security.firewall.authenticator.main.inner" class="Symfony\Component\Security\Http\Firewall\AuthenticatorManagerListener">
      <argument type="service" id="security.authenticator.manager.main"/>
    </service>
    <service id=".doctrine.orm.default_metadata_driver.inner" class="Doctrine\Persistence\Mapping\Driver\MappingDriverChain">
      <call method="addDriver">
        <argument type="service" id="doctrine.orm.default_attribute_metadata_driver"/>
        <argument>App\Entity</argument>
      </call>
    </service>
    <service id="fos_rest.serializer.form_error_handler.inner" class="JMS\Serializer\Handler\FormErrorHandler">
      <argument>null</argument>
      <argument>validators</argument>
    </service>
    <service id="debug.security.event_dispatcher.login.inner" class="Symfony\Component\EventDispatcher\EventDispatcher"/>
    <service id="debug.security.event_dispatcher.api.inner" class="Symfony\Component\EventDispatcher\EventDispatcher"/>
    <service id="debug.security.event_dispatcher.main.inner" class="Symfony\Component\EventDispatcher\EventDispatcher"/>
    <service id="jms_serializer.traceable_metadata_factory.inner" class="Metadata\MetadataFactory">
      <argument type="service" id="jms_serializer.metadata.lazy_loading_driver"/>
      <argument>Metadata\ClassHierarchyMetadata</argument>
      <argument>true</argument>
      <call method="setCache">
        <argument type="service" id="jms_serializer.metadata.cache.file_cache" on-invalid="ignore"/>
      </call>
      <call method="setIncludeInterfaces">
        <argument>false</argument>
      </call>
    </service>
    <service id="jms_serializer.traceable_handler_registry.inner" class="JMS\Serializer\Handler\LazyHandlerRegistry">
      <argument type="service" id="jms_serializer.handler_registry.service_locator"/>
    </service>
    <service id="jms_serializer.metadata.traceable_file_locator.inner" class="Metadata\Driver\FileLocator">
      <argument type="collection"/>
    </service>
    <service id=".errored..service_locator.y4_Zrx..Symfony\Component\Config\Loader\LoaderInterface" class="Symfony\Component\Config\Loader\LoaderInterface">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.y4_Zrx.&quot;: it needs an instance of &quot;Symfony\Component\Config\Loader\LoaderInterface&quot; but this type has been excluded from autowiring."/>
    </service>
    <service id=".errored..service_locator.2PcGlAo.App\Entity\Book" class="App\Entity\Book">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.2PcGlAo&quot;: it needs an instance of &quot;App\Entity\Book&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.G7dnWNX.App\Entity\Book" class="App\Entity\Book">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.G7dnWNX&quot;: it needs an instance of &quot;App\Entity\Book&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.OCnFGBG.App\Entity\Conversation" class="App\Entity\Conversation">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.OCnFGBG&quot;: it needs an instance of &quot;App\Entity\Conversation&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.YFlO83_.App\Entity\Publication" class="App\Entity\Publication">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.YFlO83_&quot;: it needs an instance of &quot;App\Entity\Publication&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.LWeIwFr.App\Entity\Publication" class="App\Entity\Publication">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.LWeIwFr&quot;: it needs an instance of &quot;App\Entity\Publication&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".errored..service_locator.n.7.wCW.App\Entity\Publication" class="App\Entity\Publication">
      <tag name="container.error" message="Cannot autowire service &quot;.service_locator.n.7.wCW&quot;: it needs an instance of &quot;App\Entity\Publication&quot; but this type has been excluded in &quot;config/services.yaml&quot;."/>
    </service>
    <service id=".console.command.about.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>about</argument>
      <argument type="collection"/>
      <argument>Display information about the current project</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.about"/>
    </service>
    <service id=".console.command.assets_install.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>assets:install</argument>
      <argument type="collection"/>
      <argument>Install bundle's web assets under a public directory</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.assets_install"/>
    </service>
    <service id=".console.command.cache_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:clear</argument>
      <argument type="collection"/>
      <argument>Clear the cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_clear"/>
    </service>
    <service id=".console.command.cache_pool_clear.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:clear</argument>
      <argument type="collection"/>
      <argument>Clear cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_clear"/>
    </service>
    <service id=".console.command.cache_pool_prune.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:prune</argument>
      <argument type="collection"/>
      <argument>Prune cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_prune"/>
    </service>
    <service id=".console.command.cache_pool_invalidate_tags.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:invalidate-tags</argument>
      <argument type="collection"/>
      <argument>Invalidate cache tags for all or a specific pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_invalidate_tags"/>
    </service>
    <service id=".console.command.cache_pool_delete.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:delete</argument>
      <argument type="collection"/>
      <argument>Delete an item from a cache pool</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_delete"/>
    </service>
    <service id=".console.command.cache_pool_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:pool:list</argument>
      <argument type="collection"/>
      <argument>List available cache pools</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_pool_list"/>
    </service>
    <service id=".console.command.cache_warmup.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>cache:warmup</argument>
      <argument type="collection"/>
      <argument>Warm up an empty cache</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.cache_warmup"/>
    </service>
    <service id=".console.command.config_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:config</argument>
      <argument type="collection"/>
      <argument>Dump the current configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_debug"/>
    </service>
    <service id=".console.command.config_dump_reference.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>config:dump-reference</argument>
      <argument type="collection"/>
      <argument>Dump the default configuration for an extension</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.config_dump_reference"/>
    </service>
    <service id=".console.command.container_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:container</argument>
      <argument type="collection"/>
      <argument>Display current services for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_debug"/>
    </service>
    <service id=".console.command.container_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:container</argument>
      <argument type="collection"/>
      <argument>Ensure that arguments injected into services match type declarations</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.container_lint"/>
    </service>
    <service id=".console.command.debug_autowiring.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:autowiring</argument>
      <argument type="collection"/>
      <argument>List classes/interfaces you can use for autowiring</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.debug_autowiring"/>
    </service>
    <service id=".console.command.dotenv_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:dotenv</argument>
      <argument type="collection"/>
      <argument>Lists all dotenv files with variables and values</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.dotenv_debug"/>
    </service>
    <service id=".console.command.event_dispatcher_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:event-dispatcher</argument>
      <argument type="collection"/>
      <argument>Display configured listeners for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.event_dispatcher_debug"/>
    </service>
    <service id=".console.command.router_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:router</argument>
      <argument type="collection"/>
      <argument>Display current routes for an application</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_debug"/>
    </service>
    <service id=".console.command.router_match.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>router:match</argument>
      <argument type="collection"/>
      <argument>Help debug routes by simulating a path info match</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.router_match"/>
    </service>
    <service id=".console.command.serializer_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:serializer</argument>
      <argument type="collection"/>
      <argument>Display serialization information for classes</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.serializer_debug"/>
    </service>
    <service id=".console.command.validator_debug.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:validator</argument>
      <argument type="collection"/>
      <argument>Display validation constraints for classes</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.validator_debug"/>
    </service>
    <service id=".console.command.yaml_lint.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lint:yaml</argument>
      <argument type="collection"/>
      <argument>Lint a YAML file and outputs encountered errors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.yaml_lint"/>
    </service>
    <service id=".console.command.secrets_set.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:set</argument>
      <argument type="collection"/>
      <argument>Set a secret in the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_set"/>
    </service>
    <service id=".console.command.secrets_remove.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:remove</argument>
      <argument type="collection"/>
      <argument>Remove a secret from the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_remove"/>
    </service>
    <service id=".console.command.secrets_generate_key.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:generate-keys</argument>
      <argument type="collection"/>
      <argument>Generate new encryption keys</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_generate_key"/>
    </service>
    <service id=".console.command.secrets_list.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:list</argument>
      <argument type="collection"/>
      <argument>List all secrets</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_list"/>
    </service>
    <service id=".console.command.secrets_decrypt_to_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:decrypt-to-local</argument>
      <argument type="collection"/>
      <argument>Decrypt all secrets and stores them in the local vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_decrypt_to_local"/>
    </service>
    <service id=".console.command.secrets_encrypt_from_local.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>secrets:encrypt-from-local</argument>
      <argument type="collection"/>
      <argument>Encrypt all local secrets to the vault</argument>
      <argument>false</argument>
      <argument type="service_closure" id="console.command.secrets_encrypt_from_local"/>
    </service>
    <service id=".security.command.debug_firewall.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>debug:firewall</argument>
      <argument type="collection"/>
      <argument>Display information about your security firewall(s)</argument>
      <argument>false</argument>
      <argument type="service_closure" id="security.command.debug_firewall"/>
    </service>
    <service id=".security.command.user_password_hash.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>security:hash-password</argument>
      <argument type="collection"/>
      <argument>Hash a user password</argument>
      <argument>false</argument>
      <argument type="service_closure" id="security.command.user_password_hash"/>
    </service>
    <service id=".lexik_jwt_authentication.check_config_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lexik:jwt:check-config</argument>
      <argument type="collection"/>
      <argument>Checks that the bundle is properly configured.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="lexik_jwt_authentication.check_config_command"/>
    </service>
    <service id=".lexik_jwt_authentication.generate_token_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lexik:jwt:generate-token</argument>
      <argument type="collection"/>
      <argument>Generates a JWT token for a given user.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="lexik_jwt_authentication.generate_token_command"/>
    </service>
    <service id=".lexik_jwt_authentication.generate_keypair_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>lexik:jwt:generate-keypair</argument>
      <argument type="collection"/>
      <argument>Generate public/private keys for use in your application.</argument>
      <argument>false</argument>
      <argument type="service_closure" id="lexik_jwt_authentication.generate_keypair_command"/>
    </service>
    <service id=".maker.auto_command.make_auth.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:auth</argument>
      <argument type="collection"/>
      <argument>Creates a Guard authenticator of different flavors</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_auth"/>
    </service>
    <service id=".maker.auto_command.make_command.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:command</argument>
      <argument type="collection"/>
      <argument>Creates a new console command class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_command"/>
    </service>
    <service id=".maker.auto_command.make_twig_component.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:twig-component</argument>
      <argument type="collection"/>
      <argument>Creates a twig (or live) component</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_twig_component"/>
    </service>
    <service id=".maker.auto_command.make_controller.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:controller</argument>
      <argument type="collection"/>
      <argument>Creates a new controller class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_controller"/>
    </service>
    <service id=".maker.auto_command.make_crud.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:crud</argument>
      <argument type="collection"/>
      <argument>Creates CRUD for Doctrine entity class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_crud"/>
    </service>
    <service id=".maker.auto_command.make_docker_database.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:docker:database</argument>
      <argument type="collection"/>
      <argument>Adds a database container to your docker-compose.yaml file</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_docker_database"/>
    </service>
    <service id=".maker.auto_command.make_entity.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:entity</argument>
      <argument type="collection"/>
      <argument>Creates or updates a Doctrine entity class, and optionally an API Platform resource</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_entity"/>
    </service>
    <service id=".maker.auto_command.make_fixtures.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:fixtures</argument>
      <argument type="collection"/>
      <argument>Creates a new class to load Doctrine fixtures</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_fixtures"/>
    </service>
    <service id=".maker.auto_command.make_form.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:form</argument>
      <argument type="collection"/>
      <argument>Creates a new form class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_form"/>
    </service>
    <service id=".maker.auto_command.make_message.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:message</argument>
      <argument type="collection"/>
      <argument>Creates a new message and handler</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_message"/>
    </service>
    <service id=".maker.auto_command.make_messenger_middleware.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:messenger-middleware</argument>
      <argument type="collection"/>
      <argument>Creates a new messenger middleware</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_messenger_middleware"/>
    </service>
    <service id=".maker.auto_command.make_registration_form.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:registration-form</argument>
      <argument type="collection"/>
      <argument>Creates a new registration form system</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_registration_form"/>
    </service>
    <service id=".maker.auto_command.make_reset_password.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:reset-password</argument>
      <argument type="collection"/>
      <argument>Create controller, entity, and repositories for use with symfonycasts/reset-password-bundle</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_reset_password"/>
    </service>
    <service id=".maker.auto_command.make_serializer_encoder.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:serializer:encoder</argument>
      <argument type="collection"/>
      <argument>Creates a new serializer encoder class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_serializer_encoder"/>
    </service>
    <service id=".maker.auto_command.make_serializer_normalizer.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:serializer:normalizer</argument>
      <argument type="collection"/>
      <argument>Creates a new serializer normalizer class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_serializer_normalizer"/>
    </service>
    <service id=".maker.auto_command.make_subscriber.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:subscriber</argument>
      <argument type="collection"/>
      <argument>Creates a new event subscriber class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_subscriber"/>
    </service>
    <service id=".maker.auto_command.make_twig_extension.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:twig-extension</argument>
      <argument type="collection"/>
      <argument>Creates a new Twig extension with its runtime class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_twig_extension"/>
    </service>
    <service id=".maker.auto_command.make_test.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:test</argument>
      <argument type="collection">
        <argument>make:unit-test</argument>
        <argument>make:functional-test</argument>
      </argument>
      <argument>Creates a new test class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_test"/>
    </service>
    <service id=".maker.auto_command.make_validator.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:validator</argument>
      <argument type="collection"/>
      <argument>Creates a new validator and constraint class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_validator"/>
    </service>
    <service id=".maker.auto_command.make_voter.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:voter</argument>
      <argument type="collection"/>
      <argument>Creates a new security voter class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_voter"/>
    </service>
    <service id=".maker.auto_command.make_user.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:user</argument>
      <argument type="collection"/>
      <argument>Creates a new security user class</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_user"/>
    </service>
    <service id=".maker.auto_command.make_migration.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:migration</argument>
      <argument type="collection"/>
      <argument>Creates a new migration based on database changes</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_migration"/>
    </service>
    <service id=".maker.auto_command.make_stimulus_controller.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:stimulus-controller</argument>
      <argument type="collection"/>
      <argument>Creates a new Stimulus controller</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_stimulus_controller"/>
    </service>
    <service id=".maker.auto_command.make_security_form_login.lazy" class="Symfony\Component\Console\Command\LazyCommand">
      <argument>make:security:form-login</argument>
      <argument type="collection"/>
      <argument>Generate the code needed for the form_login authenticator</argument>
      <argument>false</argument>
      <argument type="service_closure" id="maker.auto_command.make_security_form_login"/>
    </service>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <tag name="container.no_preload"/>
      <argument type="service" id=".service_locator.2.Nrb8T"/>
      <argument type="collection">
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:pool:invalidate-tags">console.command.cache_pool_invalidate_tags</argument>
        <argument key="cache:pool:delete">console.command.cache_pool_delete</argument>
        <argument key="cache:pool:list">console.command.cache_pool_list</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="lint:container">console.command.container_lint</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:dotenv">console.command.dotenv_debug</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="debug:serializer">console.command.serializer_debug</argument>
        <argument key="debug:validator">console.command.validator_debug</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
        <argument key="secrets:set">console.command.secrets_set</argument>
        <argument key="secrets:remove">console.command.secrets_remove</argument>
        <argument key="secrets:generate-keys">console.command.secrets_generate_key</argument>
        <argument key="secrets:list">console.command.secrets_list</argument>
        <argument key="secrets:decrypt-to-local">console.command.secrets_decrypt_to_local</argument>
        <argument key="secrets:encrypt-from-local">console.command.secrets_encrypt_from_local</argument>
        <argument key="doctrine:database:create">doctrine.database_create_command</argument>
        <argument key="doctrine:database:drop">doctrine.database_drop_command</argument>
        <argument key="doctrine:query:sql">doctrine.query_sql_command</argument>
        <argument key="dbal:run-sql">Doctrine\DBAL\Tools\Console\Command\RunSqlCommand</argument>
        <argument key="doctrine:cache:clear-metadata">doctrine.cache_clear_metadata_command</argument>
        <argument key="doctrine:cache:clear-query">doctrine.cache_clear_query_cache_command</argument>
        <argument key="doctrine:cache:clear-result">doctrine.cache_clear_result_command</argument>
        <argument key="doctrine:cache:clear-collection-region">doctrine.cache_collection_region_command</argument>
        <argument key="doctrine:mapping:convert">doctrine.mapping_convert_command</argument>
        <argument key="doctrine:schema:create">doctrine.schema_create_command</argument>
        <argument key="doctrine:schema:drop">doctrine.schema_drop_command</argument>
        <argument key="doctrine:ensure-production-settings">doctrine.ensure_production_settings_command</argument>
        <argument key="doctrine:cache:clear-entity-region">doctrine.clear_entity_region_command</argument>
        <argument key="doctrine:mapping:info">doctrine.mapping_info_command</argument>
        <argument key="doctrine:cache:clear-query-region">doctrine.clear_query_region_command</argument>
        <argument key="doctrine:query:dql">doctrine.query_dql_command</argument>
        <argument key="doctrine:schema:update">doctrine.schema_update_command</argument>
        <argument key="doctrine:schema:validate">doctrine.schema_validate_command</argument>
        <argument key="doctrine:mapping:import">doctrine.mapping_import_command</argument>
        <argument key="doctrine:migrations:diff">doctrine_migrations.diff_command</argument>
        <argument key="doctrine:migrations:sync-metadata-storage">doctrine_migrations.sync_metadata_command</argument>
        <argument key="doctrine:migrations:list">doctrine_migrations.versions_command</argument>
        <argument key="doctrine:migrations:current">doctrine_migrations.current_command</argument>
        <argument key="doctrine:migrations:dump-schema">doctrine_migrations.dump_schema_command</argument>
        <argument key="doctrine:migrations:execute">doctrine_migrations.execute_command</argument>
        <argument key="doctrine:migrations:generate">doctrine_migrations.generate_command</argument>
        <argument key="doctrine:migrations:latest">doctrine_migrations.latest_command</argument>
        <argument key="doctrine:migrations:migrate">doctrine_migrations.migrate_command</argument>
        <argument key="doctrine:migrations:rollup">doctrine_migrations.rollup_command</argument>
        <argument key="doctrine:migrations:status">doctrine_migrations.status_command</argument>
        <argument key="doctrine:migrations:up-to-date">doctrine_migrations.up_to_date_command</argument>
        <argument key="doctrine:migrations:version">doctrine_migrations.version_command</argument>
        <argument key="doctrine:fixtures:load">doctrine.fixtures_load_command</argument>
        <argument key="debug:firewall">security.command.debug_firewall</argument>
        <argument key="security:hash-password">security.command.user_password_hash</argument>
        <argument key="lexik:jwt:check-config">lexik_jwt_authentication.check_config_command</argument>
        <argument key="lexik:jwt:generate-token">lexik_jwt_authentication.generate_token_command</argument>
        <argument key="lexik:jwt:generate-keypair">lexik_jwt_authentication.generate_keypair_command</argument>
        <argument key="make:auth">maker.auto_command.make_auth</argument>
        <argument key="make:command">maker.auto_command.make_command</argument>
        <argument key="make:twig-component">maker.auto_command.make_twig_component</argument>
        <argument key="make:controller">maker.auto_command.make_controller</argument>
        <argument key="make:crud">maker.auto_command.make_crud</argument>
        <argument key="make:docker:database">maker.auto_command.make_docker_database</argument>
        <argument key="make:entity">maker.auto_command.make_entity</argument>
        <argument key="make:fixtures">maker.auto_command.make_fixtures</argument>
        <argument key="make:form">maker.auto_command.make_form</argument>
        <argument key="make:message">maker.auto_command.make_message</argument>
        <argument key="make:messenger-middleware">maker.auto_command.make_messenger_middleware</argument>
        <argument key="make:registration-form">maker.auto_command.make_registration_form</argument>
        <argument key="make:reset-password">maker.auto_command.make_reset_password</argument>
        <argument key="make:serializer:encoder">maker.auto_command.make_serializer_encoder</argument>
        <argument key="make:serializer:normalizer">maker.auto_command.make_serializer_normalizer</argument>
        <argument key="make:subscriber">maker.auto_command.make_subscriber</argument>
        <argument key="make:twig-extension">maker.auto_command.make_twig_extension</argument>
        <argument key="make:test">maker.auto_command.make_test</argument>
        <argument key="make:unit-test">maker.auto_command.make_test</argument>
        <argument key="make:functional-test">maker.auto_command.make_test</argument>
        <argument key="make:validator">maker.auto_command.make_validator</argument>
        <argument key="make:voter">maker.auto_command.make_voter</argument>
        <argument key="make:user">maker.auto_command.make_user</argument>
        <argument key="make:migration">maker.auto_command.make_migration</argument>
        <argument key="make:stimulus-controller">maker.auto_command.make_stimulus_controller</argument>
        <argument key="make:security:form-login">maker.auto_command.make_security_form_login</argument>
      </argument>
    </service>
    <service id=".service_locator.2.Nrb8T" class="Symfony\Component\DependencyInjection\ServiceLocator">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="console.command.about" type="service_closure" id=".console.command.about.lazy"/>
        <argument key="console.command.assets_install" type="service_closure" id=".console.command.assets_install.lazy"/>
        <argument key="console.command.cache_clear" type="service_closure" id=".console.command.cache_clear.lazy"/>
        <argument key="console.command.cache_pool_clear" type="service_closure" id=".console.command.cache_pool_clear.lazy"/>
        <argument key="console.command.cache_pool_prune" type="service_closure" id=".console.command.cache_pool_prune.lazy"/>
        <argument key="console.command.cache_pool_invalidate_tags" type="service_closure" id=".console.command.cache_pool_invalidate_tags.lazy"/>
        <argument key="console.command.cache_pool_delete" type="service_closure" id=".console.command.cache_pool_delete.lazy"/>
        <argument key="console.command.cache_pool_list" type="service_closure" id=".console.command.cache_pool_list.lazy"/>
        <argument key="console.command.cache_warmup" type="service_closure" id=".console.command.cache_warmup.lazy"/>
        <argument key="console.command.config_debug" type="service_closure" id=".console.command.config_debug.lazy"/>
        <argument key="console.command.config_dump_reference" type="service_closure" id=".console.command.config_dump_reference.lazy"/>
        <argument key="console.command.container_debug" type="service_closure" id=".console.command.container_debug.lazy"/>
        <argument key="console.command.container_lint" type="service_closure" id=".console.command.container_lint.lazy"/>
        <argument key="console.command.debug_autowiring" type="service_closure" id=".console.command.debug_autowiring.lazy"/>
        <argument key="console.command.dotenv_debug" type="service_closure" id=".console.command.dotenv_debug.lazy"/>
        <argument key="console.command.event_dispatcher_debug" type="service_closure" id=".console.command.event_dispatcher_debug.lazy"/>
        <argument key="console.command.router_debug" type="service_closure" id=".console.command.router_debug.lazy"/>
        <argument key="console.command.router_match" type="service_closure" id=".console.command.router_match.lazy"/>
        <argument key="console.command.serializer_debug" type="service_closure" id=".console.command.serializer_debug.lazy"/>
        <argument key="console.command.validator_debug" type="service_closure" id=".console.command.validator_debug.lazy"/>
        <argument key="console.command.yaml_lint" type="service_closure" id=".console.command.yaml_lint.lazy"/>
        <argument key="console.command.secrets_set" type="service_closure" id=".console.command.secrets_set.lazy"/>
        <argument key="console.command.secrets_remove" type="service_closure" id=".console.command.secrets_remove.lazy"/>
        <argument key="console.command.secrets_generate_key" type="service_closure" id=".console.command.secrets_generate_key.lazy"/>
        <argument key="console.command.secrets_list" type="service_closure" id=".console.command.secrets_list.lazy"/>
        <argument key="console.command.secrets_decrypt_to_local" type="service_closure" id=".console.command.secrets_decrypt_to_local.lazy"/>
        <argument key="console.command.secrets_encrypt_from_local" type="service_closure" id=".console.command.secrets_encrypt_from_local.lazy"/>
        <argument key="doctrine.database_create_command" type="service_closure" id="doctrine.database_create_command"/>
        <argument key="doctrine.database_drop_command" type="service_closure" id="doctrine.database_drop_command"/>
        <argument key="doctrine.query_sql_command" type="service_closure" id="doctrine.query_sql_command"/>
        <argument key="Doctrine\DBAL\Tools\Console\Command\RunSqlCommand" type="service_closure" id="Doctrine\DBAL\Tools\Console\Command\RunSqlCommand"/>
        <argument key="doctrine.cache_clear_metadata_command" type="service_closure" id="doctrine.cache_clear_metadata_command"/>
        <argument key="doctrine.cache_clear_query_cache_command" type="service_closure" id="doctrine.cache_clear_query_cache_command"/>
        <argument key="doctrine.cache_clear_result_command" type="service_closure" id="doctrine.cache_clear_result_command"/>
        <argument key="doctrine.cache_collection_region_command" type="service_closure" id="doctrine.cache_collection_region_command"/>
        <argument key="doctrine.mapping_convert_command" type="service_closure" id="doctrine.mapping_convert_command"/>
        <argument key="doctrine.schema_create_command" type="service_closure" id="doctrine.schema_create_command"/>
        <argument key="doctrine.schema_drop_command" type="service_closure" id="doctrine.schema_drop_command"/>
        <argument key="doctrine.ensure_production_settings_command" type="service_closure" id="doctrine.ensure_production_settings_command"/>
        <argument key="doctrine.clear_entity_region_command" type="service_closure" id="doctrine.clear_entity_region_command"/>
        <argument key="doctrine.mapping_info_command" type="service_closure" id="doctrine.mapping_info_command"/>
        <argument key="doctrine.clear_query_region_command" type="service_closure" id="doctrine.clear_query_region_command"/>
        <argument key="doctrine.query_dql_command" type="service_closure" id="doctrine.query_dql_command"/>
        <argument key="doctrine.schema_update_command" type="service_closure" id="doctrine.schema_update_command"/>
        <argument key="doctrine.schema_validate_command" type="service_closure" id="doctrine.schema_validate_command"/>
        <argument key="doctrine.mapping_import_command" type="service_closure" id="doctrine.mapping_import_command"/>
        <argument key="doctrine_migrations.diff_command" type="service_closure" id="doctrine_migrations.diff_command"/>
        <argument key="doctrine_migrations.sync_metadata_command" type="service_closure" id="doctrine_migrations.sync_metadata_command"/>
        <argument key="doctrine_migrations.versions_command" type="service_closure" id="doctrine_migrations.versions_command"/>
        <argument key="doctrine_migrations.current_command" type="service_closure" id="doctrine_migrations.current_command"/>
        <argument key="doctrine_migrations.dump_schema_command" type="service_closure" id="doctrine_migrations.dump_schema_command"/>
        <argument key="doctrine_migrations.execute_command" type="service_closure" id="doctrine_migrations.execute_command"/>
        <argument key="doctrine_migrations.generate_command" type="service_closure" id="doctrine_migrations.generate_command"/>
        <argument key="doctrine_migrations.latest_command" type="service_closure" id="doctrine_migrations.latest_command"/>
        <argument key="doctrine_migrations.migrate_command" type="service_closure" id="doctrine_migrations.migrate_command"/>
        <argument key="doctrine_migrations.rollup_command" type="service_closure" id="doctrine_migrations.rollup_command"/>
        <argument key="doctrine_migrations.status_command" type="service_closure" id="doctrine_migrations.status_command"/>
        <argument key="doctrine_migrations.up_to_date_command" type="service_closure" id="doctrine_migrations.up_to_date_command"/>
        <argument key="doctrine_migrations.version_command" type="service_closure" id="doctrine_migrations.version_command"/>
        <argument key="doctrine.fixtures_load_command" type="service_closure" id="doctrine.fixtures_load_command"/>
        <argument key="security.command.debug_firewall" type="service_closure" id=".security.command.debug_firewall.lazy"/>
        <argument key="security.command.user_password_hash" type="service_closure" id=".security.command.user_password_hash.lazy"/>
        <argument key="lexik_jwt_authentication.check_config_command" type="service_closure" id=".lexik_jwt_authentication.check_config_command.lazy"/>
        <argument key="lexik_jwt_authentication.generate_token_command" type="service_closure" id=".lexik_jwt_authentication.generate_token_command.lazy"/>
        <argument key="lexik_jwt_authentication.generate_keypair_command" type="service_closure" id=".lexik_jwt_authentication.generate_keypair_command.lazy"/>
        <argument key="maker.auto_command.make_auth" type="service_closure" id=".maker.auto_command.make_auth.lazy"/>
        <argument key="maker.auto_command.make_command" type="service_closure" id=".maker.auto_command.make_command.lazy"/>
        <argument key="maker.auto_command.make_twig_component" type="service_closure" id=".maker.auto_command.make_twig_component.lazy"/>
        <argument key="maker.auto_command.make_controller" type="service_closure" id=".maker.auto_command.make_controller.lazy"/>
        <argument key="maker.auto_command.make_crud" type="service_closure" id=".maker.auto_command.make_crud.lazy"/>
        <argument key="maker.auto_command.make_docker_database" type="service_closure" id=".maker.auto_command.make_docker_database.lazy"/>
        <argument key="maker.auto_command.make_entity" type="service_closure" id=".maker.auto_command.make_entity.lazy"/>
        <argument key="maker.auto_command.make_fixtures" type="service_closure" id=".maker.auto_command.make_fixtures.lazy"/>
        <argument key="maker.auto_command.make_form" type="service_closure" id=".maker.auto_command.make_form.lazy"/>
        <argument key="maker.auto_command.make_message" type="service_closure" id=".maker.auto_command.make_message.lazy"/>
        <argument key="maker.auto_command.make_messenger_middleware" type="service_closure" id=".maker.auto_command.make_messenger_middleware.lazy"/>
        <argument key="maker.auto_command.make_registration_form" type="service_closure" id=".maker.auto_command.make_registration_form.lazy"/>
        <argument key="maker.auto_command.make_reset_password" type="service_closure" id=".maker.auto_command.make_reset_password.lazy"/>
        <argument key="maker.auto_command.make_serializer_encoder" type="service_closure" id=".maker.auto_command.make_serializer_encoder.lazy"/>
        <argument key="maker.auto_command.make_serializer_normalizer" type="service_closure" id=".maker.auto_command.make_serializer_normalizer.lazy"/>
        <argument key="maker.auto_command.make_subscriber" type="service_closure" id=".maker.auto_command.make_subscriber.lazy"/>
        <argument key="maker.auto_command.make_twig_extension" type="service_closure" id=".maker.auto_command.make_twig_extension.lazy"/>
        <argument key="maker.auto_command.make_test" type="service_closure" id=".maker.auto_command.make_test.lazy"/>
        <argument key="maker.auto_command.make_validator" type="service_closure" id=".maker.auto_command.make_validator.lazy"/>
        <argument key="maker.auto_command.make_voter" type="service_closure" id=".maker.auto_command.make_voter.lazy"/>
        <argument key="maker.auto_command.make_user" type="service_closure" id=".maker.auto_command.make_user.lazy"/>
        <argument key="maker.auto_command.make_migration" type="service_closure" id=".maker.auto_command.make_migration.lazy"/>
        <argument key="maker.auto_command.make_stimulus_controller" type="service_closure" id=".maker.auto_command.make_stimulus_controller.lazy"/>
        <argument key="maker.auto_command.make_security_form_login" type="service_closure" id=".maker.auto_command.make_security_form_login.lazy"/>
      </argument>
    </service>
    <service id="App\Kernel" alias="kernel" public="true"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ContainerBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface" alias="parameter_bag"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher"/>
    <service id="Symfony\Contracts\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher"/>
    <service id="Psr\EventDispatcher\EventDispatcherInterface" alias="debug.event_dispatcher"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack"/>
    <service id="Symfony\Component\HttpKernel\HttpCache\StoreInterface" alias="http_cache.store"/>
    <service id="Symfony\Component\HttpFoundation\UrlHelper" alias="url_helper"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator"/>
    <service id="Symfony\Component\HttpKernel\UriSigner" alias="uri_signer"/>
    <service id="Symfony\Component\DependencyInjection\ReverseContainer" alias="reverse_container"/>
    <service id="Symfony\Component\String\Slugger\SluggerInterface" alias="slugger"/>
    <service id="Symfony\Component\Clock\ClockInterface" alias="clock"/>
    <service id="Psr\Clock\ClockInterface" alias="clock"/>
    <service id="Symfony\Component\HttpKernel\Fragment\FragmentUriGeneratorInterface" alias="fragment.uri_generator"/>
    <service id="error_renderer.html" alias="error_handler.error_renderer.html"/>
    <service id="error_renderer" alias="error_handler.error_renderer.serializer"/>
    <service id="Psr\Container\ContainerInterface $parameterBag" alias="parameter_bag"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\CacheInterface" alias="cache.app"/>
    <service id="Symfony\Contracts\Cache\TagAwareCacheInterface" alias="cache.app.taggable"/>
    <service id="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" alias="debug.file_link_formatter"/>
    <service id="Symfony\Component\Stopwatch\Stopwatch" alias="debug.stopwatch"/>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context"/>
    <service id="annotation_reader" alias="annotations.cached_reader"/>
    <service id="Doctrine\Common\Annotations\Reader" alias="annotations.cached_reader"/>
    <service id="Symfony\Component\PropertyAccess\PropertyAccessorInterface" alias="property_accessor"/>
    <service id="Symfony\Component\Serializer\SerializerInterface" alias="serializer"/>
    <service id="Symfony\Component\Serializer\Normalizer\NormalizerInterface" alias="serializer"/>
    <service id="Symfony\Component\Serializer\Normalizer\DenormalizerInterface" alias="serializer"/>
    <service id="Symfony\Component\Serializer\Encoder\EncoderInterface" alias="serializer"/>
    <service id="Symfony\Component\Serializer\Encoder\DecoderInterface" alias="serializer"/>
    <service id="serializer.property_accessor" alias="property_accessor"/>
    <service id="Symfony\Component\Serializer\Mapping\ClassDiscriminatorResolverInterface" alias="serializer.mapping.class_discriminator_resolver"/>
    <service id="Symfony\Component\Serializer\Normalizer\ObjectNormalizer" alias="serializer.normalizer.object">
      <deprecated package="symfony/serializer" version="6.2">The "%alias_id%" service alias is deprecated, type-hint against "Symfony\Component\Serializer\Normalizer\NormalizerInterface" or implement "Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface" instead.</deprecated>
    </service>
    <service id="Symfony\Component\Serializer\Normalizer\PropertyNormalizer" alias="serializer.normalizer.property">
      <deprecated package="symfony/serializer" version="6.2">The "%alias_id%" service alias is deprecated, type-hint against "Symfony\Component\Serializer\Normalizer\NormalizerInterface" or implement "Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface" instead.</deprecated>
    </service>
    <service id="Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactoryInterface" alias="serializer.mapping.class_metadata_factory"/>
    <service id="error_renderer.serializer" alias="error_handler.error_renderer.serializer"/>
    <service id="Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyListExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface" alias="property_info"/>
    <service id="Symfony\Component\PropertyInfo\PropertyReadInfoExtractorInterface" alias="property_info.reflection_extractor"/>
    <service id="Symfony\Component\PropertyInfo\PropertyWriteInfoExtractorInterface" alias="property_info.reflection_extractor"/>
    <service id="cache.default_redis_provider" alias=".cache_connection.GD_MSZC"/>
    <service id="cache.default_memcached_provider" alias=".cache_connection.JKE6keX"/>
    <service id="cache.default_doctrine_dbal_provider" alias="doctrine.dbal.default_connection"/>
    <service id="SessionHandlerInterface" alias="session.handler.native"/>
    <service id="session.storage.factory" alias="session.storage.factory.native"/>
    <service id="session.handler" alias="session.handler.native"/>
    <service id="Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface" alias="security.csrf.token_generator"/>
    <service id="Symfony\Component\Security\Csrf\TokenStorage\TokenStorageInterface" alias="security.csrf.token_storage"/>
    <service id="Symfony\Component\Security\Csrf\CsrfTokenManagerInterface" alias="security.csrf.token_manager"/>
    <service id="Symfony\Component\Validator\Validator\ValidatorInterface" alias="validator"/>
    <service id="validator.mapping.class_metadata_factory" alias="validator"/>
    <service id="Doctrine\DBAL\Connection" alias="doctrine.dbal.default_connection"/>
    <service id="Doctrine\Persistence\ManagerRegistry" alias="doctrine"/>
    <service id="Doctrine\Common\Persistence\ManagerRegistry" alias="doctrine"/>
    <service id="database_connection" alias="doctrine.dbal.default_connection" public="true"/>
    <service id="doctrine.dbal.event_manager" alias="doctrine.dbal.default_connection.event_manager"/>
    <service id="Doctrine\DBAL\Connection $defaultConnection" alias="doctrine.dbal.default_connection"/>
    <service id="Doctrine\ORM\EntityManagerInterface" alias="doctrine.orm.default_entity_manager"/>
    <service id="doctrine.orm.metadata.annotation_reader" alias="annotations.cached_reader"/>
    <service id="doctrine.orm.entity_manager" alias="doctrine.orm.default_entity_manager" public="true"/>
    <service id="doctrine.orm.default_metadata_cache" alias="cache.doctrine.orm.default.metadata"/>
    <service id="doctrine.orm.default_result_cache" alias="cache.doctrine.orm.default.result"/>
    <service id="doctrine.orm.default_query_cache" alias="cache.doctrine.orm.default.query"/>
    <service id="Doctrine\ORM\EntityManagerInterface $defaultEntityManager" alias="doctrine.orm.default_entity_manager"/>
    <service id="doctrine.orm.default_entity_manager.event_manager" alias="doctrine.dbal.default_connection.event_manager"/>
    <service id="doctrine.migrations.metadata_storage" alias="doctrine.migrations.storage.table_storage"/>
    <service id="jms_serializer.metadata.cache" alias="jms_serializer.metadata.cache.file_cache"/>
    <service id="jms_serializer.naming_strategy" alias="jms_serializer.serialized_name_annotation_strategy"/>
    <service id="jms_serializer.deserialization_context_factory" alias="jms_serializer.configured_deserialization_context_factory" public="true"/>
    <service id="jms_serializer.serialization_context_factory" alias="jms_serializer.configured_serialization_context_factory" public="true"/>
    <service id="jms_serializer" alias="jms_serializer.serializer" public="true"/>
    <service id="JMS\Serializer\SerializerInterface" alias="jms_serializer.serializer"/>
    <service id="JMS\Serializer\ArrayTransformerInterface" alias="jms_serializer.serializer"/>
    <service id="jms_serializer.accessor_strategy" alias="jms_serializer.accessor_strategy.default"/>
    <service id="JMS\Serializer\ContextFactory\SerializationContextFactoryInterface" alias="jms_serializer.configured_serialization_context_factory"/>
    <service id="JMS\Serializer\ContextFactory\DeserializationContextFactoryInterface" alias="jms_serializer.configured_deserialization_context_factory"/>
    <service id="jms_serializer.instance.default.event_dispatcher" alias="jms_serializer.event_dispatcher"/>
    <service id="jms_serializer.instance.default.event_dispatcher.service_locator" alias="jms_serializer.event_dispatcher.service_locator"/>
    <service id="jms_serializer.instance.default.doctrine_proxy_subscriber" alias="jms_serializer.doctrine_proxy_subscriber"/>
    <service id="jms_serializer.instance.default.stopwatch_subscriber" alias="jms_serializer.stopwatch_subscriber"/>
    <service id="jms_serializer.instance.default.enum_subscriber" alias="jms_serializer.enum_subscriber"/>
    <service id="jms_serializer.instance.default.handler_registry" alias="jms_serializer.traceable_handler_registry"/>
    <service id="jms_serializer.instance.default.handler_registry.service_locator" alias="jms_serializer.handler_registry.service_locator"/>
    <service id="jms_serializer.instance.default.enum_handler" alias="jms_serializer.enum_handler"/>
    <service id="jms_serializer.instance.default.array_collection_handler" alias="jms_serializer.array_collection_handler"/>
    <service id="jms_serializer.instance.default.constraint_violation_handler" alias="jms_serializer.constraint_violation_handler"/>
    <service id="jms_serializer.instance.default.datetime_handler" alias="jms_serializer.datetime_handler"/>
    <service id="jms_serializer.instance.default.form_error_handler" alias="fos_rest.serializer.form_error_handler"/>
    <service id="jms_serializer.instance.default.iterator_handler" alias="jms_serializer.iterator_handler"/>
    <service id="jms_serializer.instance.default.symfony_uid_handler" alias="jms_serializer.symfony_uid_handler"/>
    <service id="jms_serializer.instance.default.type_parser" alias="jms_serializer.type_parser"/>
    <service id="jms_serializer.instance.default.metadata.file_locator" alias="jms_serializer.metadata.traceable_file_locator"/>
    <service id="jms_serializer.instance.default.metadata.yaml_driver" alias="jms_serializer.metadata.yaml_driver"/>
    <service id="jms_serializer.instance.default.metadata.xml_driver" alias="jms_serializer.metadata.xml_driver"/>
    <service id="jms_serializer.instance.default.metadata.annotation_driver" alias="jms_serializer.metadata.annotation_driver"/>
    <service id="jms_serializer.instance.default.metadata_driver" alias="jms_serializer.metadata.typed_properties_driver"/>
    <service id="jms_serializer.instance.default.metadata.doctrine_type_driver" alias="jms_serializer.metadata.doctrine_type_driver"/>
    <service id="jms_serializer.instance.default.metadata.doctrine_phpcr_type_driver" alias="jms_serializer.metadata.doctrine_phpcr_type_driver"/>
    <service id="jms_serializer.instance.default.metadata.typed_properties_driver" alias="jms_serializer.metadata.typed_properties_driver"/>
    <service id="jms_serializer.instance.default.metadata.enum_driver" alias="jms_serializer.metadata.enum_driver"/>
    <service id="jms_serializer.instance.default.metadata.doc_block_driver" alias="jms_serializer.metadata.doc_block_driver"/>
    <service id="jms_serializer.instance.default.metadata.service_locator" alias="jms_serializer.metadata.service_locator"/>
    <service id="jms_serializer.instance.default.metadata.lazy_loading_driver" alias="jms_serializer.metadata.lazy_loading_driver"/>
    <service id="jms_serializer.instance.default.metadata.cache.file_cache" alias="jms_serializer.metadata.cache.file_cache"/>
    <service id="jms_serializer.instance.default.metadata_factory" alias="jms_serializer.traceable_metadata_factory"/>
    <service id="jms_serializer.instance.default.version_exclusion_strategy" alias="jms_serializer.version_exclusion_strategy"/>
    <service id="jms_serializer.instance.default.camel_case_naming_strategy" alias="jms_serializer.camel_case_naming_strategy"/>
    <service id="jms_serializer.instance.default.identical_property_naming_strategy" alias="jms_serializer.identical_property_naming_strategy"/>
    <service id="jms_serializer.instance.default.serialized_name_annotation_strategy" alias="jms_serializer.serialized_name_annotation_strategy"/>
    <service id="jms_serializer.instance.default.doctrine_object_constructor" alias="jms_serializer.doctrine_object_constructor"/>
    <service id="jms_serializer.instance.default.doctrine_phpcr_object_constructor" alias="jms_serializer.doctrine_phpcr_object_constructor"/>
    <service id="jms_serializer.instance.default.object_constructor" alias="jms_serializer.doctrine_object_constructor"/>
    <service id="jms_serializer.instance.default.serializer" alias="jms_serializer.serializer"/>
    <service id="jms_serializer.instance.default.deserialization_graph_navigator_factory" alias="jms_serializer.deserialization_graph_navigator_factory"/>
    <service id="jms_serializer.instance.default.serialization_graph_navigator_factory" alias="jms_serializer.serialization_graph_navigator_factory"/>
    <service id="jms_serializer.instance.default.expression_evaluator" alias="jms_serializer.expression_evaluator"/>
    <service id="jms_serializer.instance.default.expression_language" alias="jms_serializer.expression_language"/>
    <service id="jms_serializer.instance.default.expression_language.function_provider" alias="jms_serializer.expression_language.function_provider"/>
    <service id="jms_serializer.instance.default.twig_extension.serializer" alias="jms_serializer.twig_extension.serializer"/>
    <service id="jms_serializer.instance.default.twig_extension.runtime_serializer" alias="jms_serializer.twig_extension.runtime_serializer"/>
    <service id="jms_serializer.instance.default.twig_extension.serializer_runtime_helper" alias="jms_serializer.twig_extension.serializer_runtime_helper"/>
    <service id="jms_serializer.instance.default.templating.helper.serializer" alias="jms_serializer.templating.helper.serializer"/>
    <service id="jms_serializer.instance.default.accessor_strategy.default" alias="jms_serializer.accessor_strategy.default"/>
    <service id="jms_serializer.instance.default.json_serialization_visitor" alias="jms_serializer.json_serialization_visitor"/>
    <service id="jms_serializer.instance.default.json_deserialization_visitor" alias="jms_serializer.json_deserialization_visitor"/>
    <service id="jms_serializer.instance.default.xml_serialization_visitor" alias="jms_serializer.xml_serialization_visitor"/>
    <service id="jms_serializer.instance.default.xml_deserialization_visitor" alias="jms_serializer.xml_deserialization_visitor"/>
    <service id="jms_serializer.instance.default.cache.cache_clearer" alias="jms_serializer.cache.cache_clearer"/>
    <service id="jms_serializer.instance.default.cache.cache_warmer" alias="jms_serializer.cache.cache_warmer"/>
    <service id="jms_serializer.instance.default.configured_serialization_context_factory" alias="jms_serializer.configured_serialization_context_factory"/>
    <service id="jms_serializer.instance.default.configured_deserialization_context_factory" alias="jms_serializer.configured_deserialization_context_factory"/>
    <service id="jms_serializer.instance.default.data_collector" alias="jms_serializer.data_collector"/>
    <service id="jms_serializer.instance.default.traceable_runs_listener" alias="jms_serializer.traceable_runs_listener"/>
    <service id="jms_serializer.instance.default.traceable_metadata_factory" alias="jms_serializer.traceable_metadata_factory"/>
    <service id="jms_serializer.instance.default.traceable_handler_registry" alias="jms_serializer.traceable_handler_registry"/>
    <service id="jms_serializer.instance.default.metadata.traceable_file_locator" alias="jms_serializer.metadata.traceable_file_locator"/>
    <service id="jms_serializer.instance.default.metadata.annotation_and_attributes_reader" alias="jms_serializer.metadata.annotation_and_attributes_reader"/>
    <service id="jms_serializer.instances.default" alias="jms_serializer.serializer" public="true"/>
    <service id="FOS\RestBundle\View\ViewHandlerInterface" alias="fos_rest.view_handler.default"/>
    <service id="FOS\RestBundle\Request\ParamFetcherInterface" alias="fos_rest.request.param_fetcher"/>
    <service id="fos_rest.view_handler" alias="fos_rest.view_handler.default" public="true"/>
    <service id="Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface" alias="security.authorization_checker"/>
    <service id="Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface" alias="security.token_storage"/>
    <service id="Symfony\Bundle\SecurityBundle\Security" alias="security.helper"/>
    <service id="Symfony\Component\Security\Core\Security" alias="security.helper">
      <deprecated package="symfony/security-bundle" version="6.2">The "%alias_id%" service alias is deprecated, use "Symfony\Bundle\SecurityBundle\Security" instead.</deprecated>
    </service>
    <service id="Symfony\Component\Security\Http\Session\SessionAuthenticationStrategyInterface" alias="security.authentication.session_strategy"/>
    <service id="Symfony\Component\Security\Http\Authentication\AuthenticationUtils" alias="security.authentication_utils"/>
    <service id="Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface" alias="debug.security.access.decision_manager"/>
    <service id="Symfony\Component\Security\Core\Role\RoleHierarchyInterface" alias="security.role_hierarchy"/>
    <service id="Symfony\Component\Security\Http\Firewall" alias="debug.security.firewall"/>
    <service id="Symfony\Component\Security\Http\FirewallMapInterface" alias="security.firewall.map"/>
    <service id="Symfony\Component\Security\Http\HttpUtils" alias="security.http_utils"/>
    <service id="Symfony\Component\PasswordHasher\Hasher\PasswordHasherFactoryInterface" alias="security.password_hasher_factory"/>
    <service id="security.password_hasher" alias="security.user_password_hasher"/>
    <service id="Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface" alias="security.user_password_hasher"/>
    <service id="Symfony\Component\Security\Http\Authentication\UserAuthenticatorInterface" alias="security.user_authenticator"/>
    <service id="security.firewall" alias="debug.security.firewall"/>
    <service id="security.user_providers" alias="security.user.provider.concrete.app_user_provider"/>
    <service id="Symfony\Component\Security\Core\User\UserProviderInterface" alias="security.user.provider.concrete.app_user_provider"/>
    <service id="security.authentication.session_strategy.login" alias="security.authentication.session_strategy_noop"/>
    <service id="security.user_checker.login" alias="security.user_checker"/>
    <service id="security.authentication.session_strategy.api" alias="security.authentication.session_strategy_noop"/>
    <service id="security.user_checker.api" alias="security.user_checker"/>
    <service id="security.authentication.session_strategy.main" alias="security.authentication.session_strategy"/>
    <service id="security.user_checker.main" alias="security.user_checker"/>
    <service id="security.firewall.context_locator" alias=".service_locator.dsdSIIc"/>
    <service id="Symfony\Component\Security\Core\User\UserCheckerInterface" alias="security.user_checker"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenInterface" alias="lexik_jwt_authentication.jwt_manager"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTTokenManagerInterface" alias="lexik_jwt_authentication.jwt_manager"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\JWSProviderInterface" alias="lexik_jwt_authentication.jws_provider.lcobucci"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler" alias="lexik_jwt_authentication.handler.authentication_success"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler" alias="lexik_jwt_authentication.handler.authentication_failure"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\TokenExtractorInterface" alias="lexik_jwt_authentication.extractor.chain_extractor"/>
    <service id="lexik_jwt_authentication.jwt_token_authenticator" alias="lexik_jwt_authentication.security.guard.jwt_token_authenticator"/>
    <service id="lexik_jwt_authentication.encoder" alias="lexik_jwt_authentication.encoder.lcobucci" public="true"/>
    <service id="Lexik\Bundle\JWTAuthenticationBundle\Encoder\JWTEncoderInterface" alias="lexik_jwt_authentication.encoder.lcobucci"/>
    <service id="lexik_jwt_authentication.key_loader" alias="lexik_jwt_authentication.key_loader.raw" public="true"/>
    <service id="container.env_var_processors_locator" alias=".service_locator.7nzbL4K" public="true"/>
    <service id="argument_resolver.controller_locator" alias=".service_locator.2MdOtvo"/>
    <service id="doctrine.id_generator_locator" alias=".service_locator.KLVvNIq"/>
    <service id="jms_serializer.authorization_checker" alias="security.authorization_checker" public="true"/>
    <service id="fos_rest.serializer" alias="fos_rest.serializer.jms"/>
    <service id="Psr\Log\LoggerInterface" alias="logger"/>
    <service id=".service_locator.dvfUIQY" alias="jms_serializer.event_dispatcher.service_locator"/>
    <service id=".service_locator.kU_9bh." alias="jms_serializer.handler_registry.service_locator"/>
    <service id=".service_locator.13qzyLC" alias="jms_serializer.metadata.service_locator"/>
    <service id=".service_locator.k3s3K.2" alias=".service_locator.dsdSIIc"/>
    <service id=".service_locator.o.uf2zi" alias=".service_locator.7nzbL4K"/>
    <service id=".service_locator.uAQXRKb" alias=".service_locator.2PcGlAo"/>
    <service id=".service_locator.Q21mlXF" alias=".service_locator.hZCPxtQ"/>
    <service id=".service_locator.4FDOu4H" alias=".service_locator.G7dnWNX"/>
    <service id=".service_locator.YobfUR9" alias=".service_locator.eaWM4aR"/>
    <service id=".service_locator.Jc0rdIY" alias=".service_locator.OCnFGBG"/>
    <service id=".service_locator.i6fd6Jz" alias=".service_locator.YFlO83_"/>
    <service id=".service_locator.wkujLPz" alias=".service_locator.ljsIQCe"/>
    <service id=".service_locator.u_jR27L" alias=".service_locator.LWeIwFr"/>
    <service id=".service_locator.cD9BZ37" alias=".service_locator.2MdOtvo"/>
    <service id=".service_locator.BFrsqsn" alias=".service_locator.F9PKc.7"/>
    <service id=".service_locator.LMuqDDe" alias=".service_locator.VHsrTPK"/>
    <service id=".service_locator.jUv.zyj" alias=".service_locator.O2p6Lk7"/>
    <service id="event_dispatcher" alias="debug.event_dispatcher" public="true"/>
    <service id="controller_resolver" alias="debug.controller_resolver"/>
    <service id="argument_resolver" alias="debug.argument_resolver"/>
    <service id="doctrine.migrations.migrations_factory" alias="doctrine.migrations.container_aware_migrations_factory"/>
    <service id="jms_serializer.metadata_driver" alias="jms_serializer.metadata.typed_properties_driver"/>
    <service id="jms_serializer.metadata.typed_properties_driver.inner" alias="jms_serializer.metadata.doctrine_type_driver"/>
    <service id="jms_serializer.object_constructor" alias="jms_serializer.doctrine_object_constructor"/>
    <service id="security.access.decision_manager" alias="debug.security.access.decision_manager"/>
    <service id="security.firewall.authenticator.login" alias="debug.security.firewall.authenticator.login"/>
    <service id="security.firewall.authenticator.api" alias="debug.security.firewall.authenticator.api"/>
    <service id="security.firewall.authenticator.main" alias="debug.security.firewall.authenticator.main"/>
    <service id="doctrine.orm.default_metadata_driver" alias=".doctrine.orm.default_metadata_driver"/>
    <service id="jms_serializer.form_error_handler" alias="fos_rest.serializer.form_error_handler"/>
    <service id="security.event_dispatcher.login" alias="debug.security.event_dispatcher.login"/>
    <service id="security.event_dispatcher.api" alias="debug.security.event_dispatcher.api"/>
    <service id="security.event_dispatcher.main" alias="debug.security.event_dispatcher.main"/>
    <service id="jms_serializer.metadata_factory" alias="jms_serializer.traceable_metadata_factory"/>
    <service id="jms_serializer.handler_registry" alias="jms_serializer.traceable_handler_registry"/>
    <service id="jms_serializer.metadata.file_locator" alias="jms_serializer.metadata.traceable_file_locator"/>
    <service id=".service_locator.gFlme_s" alias=".service_locator.y4_Zrx."/>
    <service id=".service_locator.fot_oVu" alias=".service_locator.msKV3CX"/>
    <service id=".service_locator.RA57PVI" alias=".service_locator.2PcGlAo"/>
    <service id=".service_locator.vJhqu18" alias=".service_locator.hZCPxtQ"/>
    <service id=".service_locator.WwBtT5x" alias=".service_locator.G7dnWNX"/>
    <service id=".service_locator.eQ296SW" alias=".service_locator.o6sN0hZ"/>
    <service id=".service_locator.R9jFW8H" alias=".service_locator.eaWM4aR"/>
    <service id=".service_locator.5_8K1cs" alias=".service_locator.wi2Ekjr"/>
    <service id=".service_locator._NHG3Me" alias=".service_locator.OCnFGBG"/>
    <service id=".service_locator.pZni5vc" alias=".service_locator.iYW9vWf"/>
    <service id=".service_locator.2Aa6eME" alias=".service_locator.VIKQ0FW"/>
    <service id=".service_locator.HC3aKHL" alias=".service_locator.YFlO83_"/>
    <service id=".service_locator.8MAkis8" alias=".service_locator.ljsIQCe"/>
    <service id=".service_locator..SJFrvE" alias=".service_locator.LWeIwFr"/>
    <service id=".service_locator.ACyMyke" alias=".service_locator.n.7.wCW"/>
    <service id=".service_locator.DXHN2Dk" alias=".service_locator.dTaHD7m"/>
    <service id=".service_locator.wCoTccS" alias=".service_locator.O2p6Lk7"/>
    <service id=".service_locator.dGUCsbe" alias=".service_locator.oR77BOj"/>
    <service id=".service_locator.ro9MXaF" alias=".service_locator.Oannbdp"/>
    <service id=".service_locator.u6DWx23" alias=".service_locator.cXsfP3P"/>
    <service id=".service_locator.BlxN3Cw" alias=".service_locator.LrCXAmX"/>
  </services>
</container>
